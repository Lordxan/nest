{"version":3,"sources":["../../node_modules/tsup/assets/esm_shims.js","../../node_modules/cache-manager/lib/callback_filler.js","../../node_modules/cache-manager/lib/utils.js","../../node_modules/cache-manager/lib/caching.js","../../node_modules/cache-manager/node_modules/async/dist/async.mjs","../../node_modules/cache-manager/lib/multi_caching.js","../../node_modules/cache-manager/lib/index.js","../../node_modules/cache-manager/index.js","index.ts","cache/index.ts","cache/cache.constants.ts","cache/cache.module.ts","decorators/index.ts","decorators/core/index.ts","decorators/core/bind.decorator.ts","decorators/core/catch.decorator.ts","constants.ts","decorators/core/controller.decorator.ts","utils/shared.utils.ts","decorators/core/dependencies.decorator.ts","decorators/core/exception-filters.decorator.ts","utils/extend-metadata.util.ts","utils/validate-each.util.ts","decorators/core/inject.decorator.ts","decorators/core/injectable.decorator.ts","decorators/core/optional.decorator.ts","decorators/core/set-metadata.decorator.ts","decorators/core/use-guards.decorator.ts","decorators/core/use-interceptors.decorator.ts","decorators/core/use-pipes.decorator.ts","decorators/core/apply-decorators.ts","decorators/core/version.decorator.ts","decorators/modules/index.ts","decorators/modules/global.decorator.ts","decorators/modules/module.decorator.ts","utils/validate-module-keys.util.ts","decorators/http/index.ts","decorators/http/request-mapping.decorator.ts","enums/request-method.enum.ts","decorators/http/route-params.decorator.ts","enums/route-paramtypes.enum.ts","decorators/http/http-code.decorator.ts","decorators/http/create-route-param-metadata.decorator.ts","utils/assign-custom-metadata.util.ts","decorators/http/render.decorator.ts","decorators/http/header.decorator.ts","decorators/http/redirect.decorator.ts","decorators/http/sse.decorator.ts","cache/cache.providers.ts","utils/load-package.util.ts","services/logger.service.ts","services/console-logger.service.ts","utils/cli-colors.util.ts","services/utils/index.ts","services/utils/is-log-level-enabled.util.ts","cache/default-options.ts","cache/decorators/index.ts","cache/decorators/cache-key.decorator.ts","cache/decorators/cache-ttl.decorator.ts","cache/interceptors/index.ts","cache/interceptors/cache.interceptor.ts","cache/interfaces/index.ts","cache/interfaces/cache-manager.interface.ts","cache/interfaces/cache-module.interface.ts","enums/index.ts","enums/http-status.enum.ts","enums/shutdown-signal.enum.ts","enums/version-type.enum.ts","exceptions/index.ts","exceptions/bad-request.exception.ts","exceptions/http.exception.ts","exceptions/unauthorized.exception.ts","exceptions/method-not-allowed.exception.ts","exceptions/not-found.exception.ts","exceptions/forbidden.exception.ts","exceptions/not-acceptable.exception.ts","exceptions/request-timeout.exception.ts","exceptions/conflict.exception.ts","exceptions/gone.exception.ts","exceptions/payload-too-large.exception.ts","exceptions/unsupported-media-type.exception.ts","exceptions/unprocessable-entity.exception.ts","exceptions/internal-server-error.exception.ts","exceptions/not-implemented.exception.ts","exceptions/http-version-not-supported.exception.ts","exceptions/bad-gateway.exception.ts","exceptions/service-unavailable.exception.ts","exceptions/gateway-timeout.exception.ts","exceptions/im-a-teapot.exception.ts","exceptions/precondition-failed.exception.ts","exceptions/misdirected.exception.ts","file-stream/index.ts","file-stream/streamable-file.ts","http/index.ts","http/http.module.ts","utils/random-string-generator.util.ts","http/http.constants.ts","http/http.service.ts","services/index.ts","http/interfaces/index.ts","http/interfaces/http-module.interface.ts","interfaces/index.ts","interfaces/abstract.interface.ts","interfaces/controllers/controller-metadata.interface.ts","interfaces/controllers/controller.interface.ts","interfaces/exceptions/exception-filter.interface.ts","interfaces/exceptions/rpc-exception-filter.interface.ts","interfaces/exceptions/ws-exception-filter.interface.ts","interfaces/external/validation-error.interface.ts","interfaces/features/arguments-host.interface.ts","interfaces/features/can-activate.interface.ts","interfaces/features/custom-route-param-factory.interface.ts","interfaces/features/execution-context.interface.ts","interfaces/features/nest-interceptor.interface.ts","interfaces/features/paramtype.interface.ts","interfaces/features/pipe-transform.interface.ts","interfaces/global-prefix-options.interface.ts","interfaces/hooks/index.ts","interfaces/hooks/before-application-shutdown.interface.ts","interfaces/hooks/on-application-bootstrap.interface.ts","interfaces/hooks/on-application-shutdown.interface.ts","interfaces/hooks/on-destroy.interface.ts","interfaces/hooks/on-init.interface.ts","interfaces/http/index.ts","interfaces/http/http-server.interface.ts","interfaces/http/message-event.interface.ts","interfaces/injectable.interface.ts","interfaces/microservices/nest-hybrid-application-options.interface.ts","interfaces/middleware/index.ts","interfaces/middleware/middleware-config-proxy.interface.ts","interfaces/middleware/middleware-configuration.interface.ts","interfaces/middleware/middleware-consumer.interface.ts","interfaces/middleware/nest-middleware.interface.ts","interfaces/modules/index.ts","interfaces/modules/dynamic-module.interface.ts","interfaces/modules/forward-reference.interface.ts","interfaces/modules/injection-token.interface.ts","interfaces/modules/introspection-result.interface.ts","interfaces/modules/module-metadata.interface.ts","interfaces/modules/nest-module.interface.ts","interfaces/modules/optional-factory-dependency.interface.ts","interfaces/modules/provider.interface.ts","interfaces/nest-application-context.interface.ts","interfaces/nest-application-options.interface.ts","interfaces/nest-application.interface.ts","interfaces/nest-microservice.interface.ts","interfaces/scope-options.interface.ts","interfaces/type.interface.ts","interfaces/version-options.interface.ts","interfaces/websockets/web-socket-adapter.interface.ts","pipes/index.ts","pipes/default-value.pipe.ts","pipes/parse-array.pipe.ts","utils/http-error-by-code.util.ts","pipes/validation.pipe.ts","pipes/parse-bool.pipe.ts","pipes/parse-int.pipe.ts","pipes/parse-float.pipe.ts","pipes/parse-enum.pipe.ts","pipes/parse-uuid.pipe.ts","utils/is-uuid.ts","serializer/index.ts","serializer/class-serializer.interceptor.ts","serializer/class-serializer.constants.ts","serializer/decorators/index.ts","serializer/decorators/serialize-options.decorator.ts","utils/index.ts","utils/forward-ref.util.ts"],"sourcesContent":["// Shim globals in esm bundle\nimport { fileURLToPath } from 'url'\nimport path from 'path'\n\nconst getFilename = () => fileURLToPath(import.meta.url)\nconst getDirname = () => path.dirname(getFilename())\n\nexport const __dirname = /* @__PURE__ */ getDirname()\nexport const __filename = /* @__PURE__ */ getFilename()\n","function CallbackFiller() {\n    this.queues = {};\n}\n\nCallbackFiller.prototype.fill = function(key, err, data) {\n    var waiting = this.queues[key];\n    delete this.queues[key];\n\n    if (waiting && waiting.length) {\n        waiting.forEach(function(task) {\n            (task.cb)(err, data);\n        });\n    }\n};\n\nCallbackFiller.prototype.has = function(key) {\n    return this.queues[key];\n};\n\nCallbackFiller.prototype.add = function(key, funcObj) {\n    if (this.queues[key]) {\n        this.queues[key].push(funcObj);\n    } else {\n        this.queues[key] = [funcObj];\n    }\n};\n\nmodule.exports = CallbackFiller;\n","var isObject = function isObject(value) {\n    return value instanceof Object && value.constructor === Object;\n};\n\nvar parseWrapArguments = function parseWrapArguments(args) {\n    var length = args.length;\n    var work;\n    var options = {};\n    var cb;\n\n    /**\n     * As we can receive an unlimited number of keys\n     * we find the index of the first function which is\n     * the \"work\" handler to fetch the keys.\n     */\n    for (var i = 0; i < length; i += 1) {\n        if (typeof args[i] === 'function') {\n            if (typeof args[i + 2] === 'function') {\n                cb = args.pop();\n            } else if (typeof args[i + 1] === 'function') {\n                cb = args.pop();\n            }\n            if (isObject(args[i + 1])) {\n                options = args.pop();\n            }\n            work = args.pop();\n            break;\n        }\n    }\n\n    return {\n        keys: args,\n        work: work,\n        options: options,\n        cb: cb\n    };\n};\n\nmodule.exports = {\n    isObject: isObject,\n    parseWrapArguments: parseWrapArguments\n};\n","/** @module cacheManager/caching */\n/*jshint maxcomplexity:16*/\nvar CallbackFiller = require('./callback_filler');\nvar utils = require('./utils');\nvar parseWrapArguments = utils.parseWrapArguments;\n\n/**\n * Generic caching interface that wraps any caching library with a compatible interface.\n *\n * @param {object} args\n * @param {object|string} args.store - The store must at least have `set` and a `get` functions.\n * @param {function} [args.isCacheableValue] - A callback function which is called\n *   with every value returned from cache or from a wrapped function. This lets you specify\n *   which values should and should not be cached. If the function returns true, it will be\n *   stored in cache. By default it caches everything except undefined.\n */\nvar caching = function(args) {\n    args = args || {};\n    var self = {};\n    if (typeof args.store === 'object') {\n        if (args.store.create) {\n            self.store = args.store.create(args);\n        } else {\n            self.store = args.store;\n        }\n    } else {\n        var storeName = args.store || 'memory';\n        self.store = require('./stores/' + storeName + '.js').create(args);\n    }\n\n    // do we handle a cache error the same as a cache miss?\n    self.ignoreCacheErrors = args.ignoreCacheErrors || false;\n    self.refreshThreshold = args.refreshThreshold || false;\n\n    var Promise = args.promiseDependency || global.Promise;\n\n    var callbackFiller = new CallbackFiller();\n    var backgroundQueue = new Set();\n\n    if (typeof args.isCacheableValue === 'function') {\n        self._isCacheableValue = args.isCacheableValue;\n    } else if (typeof self.store.isCacheableValue === 'function') {\n        self._isCacheableValue = self.store.isCacheableValue.bind(self.store);\n    } else {\n        self._isCacheableValue = function(value) {\n            return value !== undefined;\n        };\n    }\n\n    function wrapPromise(key, promise, options) {\n        return new Promise(function(resolve, reject) {\n            self.wrap(key, function(cb) {\n                Promise.resolve()\n                    .then(promise)\n                    .then(function(result) {\n                        cb(null, result);\n                        return null;\n                    })\n                    .catch(cb);\n            }, options, function(err, result) {\n                if (err) {\n                    return reject(err);\n                }\n                resolve(result);\n            });\n        });\n    }\n\n    function handleBackgroundRefresh(key, work, options) {\n        if (self.refreshThreshold && !backgroundQueue.has(key)) {\n            backgroundQueue.add(key);\n            self.checkRefreshThreshold(key, function(err, isExpiring) {\n                if (err) {\n                    backgroundQueue.delete(key);\n                    return;\n                }\n                if (isExpiring) {\n                    work(function(err, data) {\n                        if (err || !self._isCacheableValue(data)) {\n                            backgroundQueue.delete(key);\n                            return;\n                        }\n                        if (options && typeof options.ttl === 'function') {\n                            options.ttl = options.ttl(data);\n                        }\n                        self.store.set(key, data, options, function() {\n                            backgroundQueue.delete(key);\n                        });\n                    });\n                } else {\n                    backgroundQueue.delete(key);\n                }\n            });\n        }\n    }\n\n    /**\n     * Checks if the current key is expiring. I.e., if a refreshThreshold is set for this cache\n     * and if the cache supports the ttl method, this method checks if the remaining ttl is\n     * less than the refreshThreshold.\n     * In all other cases this method's callback will contain \"false\" (ie. not expiring).\n     *\n     * @function\n     * @name checkRefreshThreshold\n     *\n     * @param {string} key - The cache key to check.\n     * @param {function} cb\n     */\n    self.checkRefreshThreshold = function(key, cb) {\n        if (self.refreshThreshold && typeof self.store.ttl === 'function') {\n            return self.store.ttl(key, function(ttlErr, ttl) {\n                if (ttlErr || typeof ttl !== 'number') {\n                    return cb(new Error('Invalid TTL response'));\n                }\n                if (self.refreshThreshold > ttl) {\n                    return cb(null, true);\n                }\n                return cb(null, false);\n            });\n        } else {\n            return cb(new Error('Unhandled refresh'));\n        }\n    };\n\n    /**\n     * Wraps a function in cache. I.e., the first time the function is run,\n     * its results are stored in cache so subsequent calls retrieve from cache\n     * instead of calling the function.\n     * You can pass any number of keys as long as the wrapped function returns\n     * an array with the same number of values and in the same order.\n     *\n     * @function\n     * @name wrap\n     *\n     * @param {string} key - The cache key to use in cache operations. Can be one or many.\n     * @param {function} work - The function to wrap\n     * @param {object} [options] - options passed to `set` function\n     * @param {function} cb\n     *\n     * @example\n     * var key = 'user_' + userId;\n     * cache.wrap(key, function(cb) {\n     *     User.get(userId, cb);\n     * }, function(err, user) {\n     *     console.log(user);\n     * });\n     *\n     * // Multiple keys\n     * var key = 'user_' + userId;\n     * var key2 = 'user_' + userId2;\n     * cache.wrap(key, key2, function(cb) {\n     *     User.getMany([userId, userId2], cb);\n     * }, function(err, users) {\n     *     console.log(users[0]);\n     *     console.log(users[1]);\n     * });\n     */\n    self.wrap = function() {\n        var parsedArgs = parseWrapArguments(Array.prototype.slice.apply(arguments));\n        var keys = parsedArgs.keys;\n        var work = parsedArgs.work;\n        var options = parsedArgs.options;\n        var cb = parsedArgs.cb;\n\n        if (!cb) {\n            keys.push(work);\n            keys.push(options);\n            return wrapPromise.apply(this, keys);\n        }\n\n        if (keys.length > 1) {\n            /**\n             * Handle more than 1 key\n             */\n            return wrapMultiple(keys, work, options, cb);\n        }\n\n        var key = keys[0];\n\n        var hasKey = callbackFiller.has(key);\n        callbackFiller.add(key, {cb: cb});\n        if (hasKey) { return; }\n\n        self.store.get(key, options, function(err, result) {\n            if (err && (!self.ignoreCacheErrors)) {\n                callbackFiller.fill(key, err);\n            } else if (self._isCacheableValue(result)) {\n                handleBackgroundRefresh(key, work, options);\n                callbackFiller.fill(key, null, result);\n            } else {\n                work(function(err, data) {\n                    if (err) {\n                        callbackFiller.fill(key, err);\n                        return;\n                    }\n\n                    if (!self._isCacheableValue(data)) {\n                        callbackFiller.fill(key, null, data);\n                        return;\n                    }\n\n                    if (options && typeof options.ttl === 'function') {\n                        options.ttl = options.ttl(data);\n                    }\n\n                    self.store.set(key, data, options, function(err) {\n                        if (err && (!self.ignoreCacheErrors)) {\n                            callbackFiller.fill(key, err);\n                        } else {\n                            callbackFiller.fill(key, null, data);\n                        }\n                    });\n                });\n            }\n        });\n    };\n\n    function wrapMultiple(keys, work, options, cb) {\n        /**\n         * We create a unique key for the multiple keys\n         * by concatenating them\n         */\n        var combinedKey = keys.reduce(function(acc, k) {\n            return acc + k;\n        }, '');\n\n        var hasKey = callbackFiller.has(combinedKey);\n        callbackFiller.add(combinedKey, {cb: cb});\n        if (hasKey) { return; }\n\n        keys.push(options);\n        keys.push(onResult);\n\n        self.store.mget.apply(self.store, keys);\n\n        function onResult(err, result) {\n            if (err && (!self.ignoreCacheErrors)) {\n                return callbackFiller.fill(combinedKey, err);\n            }\n\n            /**\n            * If all the values returned are cacheable we don't need\n            * to call our \"work\" method and the values returned by the cache\n            * are valid. If one or more of the values is not cacheable\n            * the cache result is not valid.\n            */\n            var cacheOk = Array.isArray(result) && result.filter(function(_result) {\n                return self._isCacheableValue(_result);\n            }).length === result.length;\n\n            if (cacheOk) {\n                return callbackFiller.fill(combinedKey, null, result);\n            }\n\n            return work(function(err, data) {\n                if (err || !data) {\n                    return done(err);\n                }\n\n                var _args = [];\n                data.forEach(function(value, i) {\n                    /**\n                     * Add the {key, value} pair to the args\n                     * array that we will send to mset()\n                     */\n                    if (self._isCacheableValue(value)) {\n                        _args.push(keys[i]);\n                        _args.push(value);\n                    }\n                });\n\n                // If no key|value, exit\n                if (_args.length === 0) {\n                    return done(null);\n                }\n\n                if (options && typeof options.ttl === 'function') {\n                    options.ttl = options.ttl(data);\n                }\n\n                _args.push(options);\n                _args.push(done);\n\n                self.store.mset.apply(self.store, _args);\n\n                function done(err) {\n                    if (err && (!self.ignoreCacheErrors)) {\n                        callbackFiller.fill(combinedKey, err);\n                    } else {\n                        callbackFiller.fill(combinedKey, null, data);\n                    }\n                }\n            });\n        }\n    }\n\n    /**\n     * Binds to the underlying store's `get` function.\n     * @function\n     * @name get\n     */\n    self.get = self.store.get.bind(self.store);\n\n    /**\n     * Get multiple keys at once.\n     * Binds to the underlying store's `mget` function.\n     * @function\n     * @name mget\n     */\n    if (typeof self.store.mget === 'function') {\n        self.mget = self.store.mget.bind(self.store);\n    }\n\n    /**\n     * Binds to the underlying store's `set` function.\n     * @function\n     * @name set\n     */\n    self.set = self.store.set.bind(self.store);\n\n    /**\n     * Set multiple keys at once.\n     * It accepts any number of {key, value} pair\n     * Binds to the underlying store's `mset` function.\n     * @function\n     * @name mset\n     */\n    if (typeof self.store.mset === 'function') {\n        self.mset = self.store.mset.bind(self.store);\n    }\n\n    /**\n     * Binds to the underlying store's `del` function if it exists.\n     * @function\n     * @name del\n     */\n    if (typeof self.store.del === 'function') {\n        self.del = self.store.del.bind(self.store);\n    }\n\n    /**\n     * Binds to the underlying store's `setex` function if it exists.\n     * @function\n     * @name setex\n     */\n    if (typeof self.store.setex === 'function') {\n        self.setex = self.store.setex.bind(self.store);\n    }\n\n    /**\n     * Binds to the underlying store's `reset` function if it exists.\n     * @function\n     * @name reset\n     */\n    if (typeof self.store.reset === 'function') {\n        self.reset = self.store.reset.bind(self.store);\n    }\n\n    /**\n     * Binds to the underlying store's `keys` function if it exists.\n     * @function\n     * @name keys\n     */\n    if (typeof self.store.keys === 'function') {\n        self.keys = self.store.keys.bind(self.store);\n    }\n\n    /**\n     * Binds to the underlying store's `ttl` function if it exists.\n     * @function\n     * @name ttl\n     */\n    if (typeof self.store.ttl === 'function') {\n        self.ttl = self.store.ttl.bind(self.store);\n    }\n\n    return self;\n};\n\nmodule.exports = caching;\n","/**\n * Creates a continuation function with some arguments already applied.\n *\n * Useful as a shorthand when combined with other control flow functions. Any\n * arguments passed to the returned function are added to the arguments\n * originally passed to apply.\n *\n * @name apply\n * @static\n * @memberOf module:Utils\n * @method\n * @category Util\n * @param {Function} fn - The function you want to eventually apply all\n * arguments to. Invokes with (arguments...).\n * @param {...*} arguments... - Any number of arguments to automatically apply\n * when the continuation is called.\n * @returns {Function} the partially-applied function\n * @example\n *\n * // using apply\n * async.parallel([\n *     async.apply(fs.writeFile, 'testfile1', 'test1'),\n *     async.apply(fs.writeFile, 'testfile2', 'test2')\n * ]);\n *\n *\n * // the same process without using apply\n * async.parallel([\n *     function(callback) {\n *         fs.writeFile('testfile1', 'test1', callback);\n *     },\n *     function(callback) {\n *         fs.writeFile('testfile2', 'test2', callback);\n *     }\n * ]);\n *\n * // It's possible to pass any number of additional arguments when calling the\n * // continuation:\n *\n * node> var fn = async.apply(sys.puts, 'one');\n * node> fn('two', 'three');\n * one\n * two\n * three\n */\nfunction apply(fn, ...args) {\n    return (...callArgs) => fn(...args,...callArgs);\n}\n\nfunction initialParams (fn) {\n    return function (...args/*, callback*/) {\n        var callback = args.pop();\n        return fn.call(this, args, callback);\n    };\n}\n\n/* istanbul ignore file */\n\nvar hasSetImmediate = typeof setImmediate === 'function' && setImmediate;\nvar hasNextTick = typeof process === 'object' && typeof process.nextTick === 'function';\n\nfunction fallback(fn) {\n    setTimeout(fn, 0);\n}\n\nfunction wrap(defer) {\n    return (fn, ...args) => defer(() => fn(...args));\n}\n\nvar _defer;\n\nif (hasSetImmediate) {\n    _defer = setImmediate;\n} else if (hasNextTick) {\n    _defer = process.nextTick;\n} else {\n    _defer = fallback;\n}\n\nvar setImmediate$1 = wrap(_defer);\n\n/**\n * Take a sync function and make it async, passing its return value to a\n * callback. This is useful for plugging sync functions into a waterfall,\n * series, or other async functions. Any arguments passed to the generated\n * function will be passed to the wrapped function (except for the final\n * callback argument). Errors thrown will be passed to the callback.\n *\n * If the function passed to `asyncify` returns a Promise, that promises's\n * resolved/rejected state will be used to call the callback, rather than simply\n * the synchronous return value.\n *\n * This also means you can asyncify ES2017 `async` functions.\n *\n * @name asyncify\n * @static\n * @memberOf module:Utils\n * @method\n * @alias wrapSync\n * @category Util\n * @param {Function} func - The synchronous function, or Promise-returning\n * function to convert to an {@link AsyncFunction}.\n * @returns {AsyncFunction} An asynchronous wrapper of the `func`. To be\n * invoked with `(args..., callback)`.\n * @example\n *\n * // passing a regular synchronous function\n * async.waterfall([\n *     async.apply(fs.readFile, filename, \"utf8\"),\n *     async.asyncify(JSON.parse),\n *     function (data, next) {\n *         // data is the result of parsing the text.\n *         // If there was a parsing error, it would have been caught.\n *     }\n * ], callback);\n *\n * // passing a function returning a promise\n * async.waterfall([\n *     async.apply(fs.readFile, filename, \"utf8\"),\n *     async.asyncify(function (contents) {\n *         return db.model.create(contents);\n *     }),\n *     function (model, next) {\n *         // `model` is the instantiated model object.\n *         // If there was an error, this function would be skipped.\n *     }\n * ], callback);\n *\n * // es2017 example, though `asyncify` is not needed if your JS environment\n * // supports async functions out of the box\n * var q = async.queue(async.asyncify(async function(file) {\n *     var intermediateStep = await processFile(file);\n *     return await somePromise(intermediateStep)\n * }));\n *\n * q.push(files);\n */\nfunction asyncify(func) {\n    if (isAsync(func)) {\n        return function (...args/*, callback*/) {\n            const callback = args.pop();\n            const promise = func.apply(this, args);\n            return handlePromise(promise, callback)\n        }\n    }\n\n    return initialParams(function (args, callback) {\n        var result;\n        try {\n            result = func.apply(this, args);\n        } catch (e) {\n            return callback(e);\n        }\n        // if result is Promise object\n        if (result && typeof result.then === 'function') {\n            return handlePromise(result, callback)\n        } else {\n            callback(null, result);\n        }\n    });\n}\n\nfunction handlePromise(promise, callback) {\n    return promise.then(value => {\n        invokeCallback(callback, null, value);\n    }, err => {\n        invokeCallback(callback, err && err.message ? err : new Error(err));\n    });\n}\n\nfunction invokeCallback(callback, error, value) {\n    try {\n        callback(error, value);\n    } catch (err) {\n        setImmediate$1(e => { throw e }, err);\n    }\n}\n\nfunction isAsync(fn) {\n    return fn[Symbol.toStringTag] === 'AsyncFunction';\n}\n\nfunction isAsyncGenerator(fn) {\n    return fn[Symbol.toStringTag] === 'AsyncGenerator';\n}\n\nfunction isAsyncIterable(obj) {\n    return typeof obj[Symbol.asyncIterator] === 'function';\n}\n\nfunction wrapAsync(asyncFn) {\n    if (typeof asyncFn !== 'function') throw new Error('expected a function')\n    return isAsync(asyncFn) ? asyncify(asyncFn) : asyncFn;\n}\n\n// conditionally promisify a function.\n// only return a promise if a callback is omitted\nfunction awaitify (asyncFn, arity = asyncFn.length) {\n    if (!arity) throw new Error('arity is undefined')\n    function awaitable (...args) {\n        if (typeof args[arity - 1] === 'function') {\n            return asyncFn.apply(this, args)\n        }\n\n        return new Promise((resolve, reject) => {\n            args[arity - 1] = (err, ...cbArgs) => {\n                if (err) return reject(err)\n                resolve(cbArgs.length > 1 ? cbArgs : cbArgs[0]);\n            };\n            asyncFn.apply(this, args);\n        })\n    }\n\n    return awaitable\n}\n\nfunction applyEach (eachfn) {\n    return function applyEach(fns, ...callArgs) {\n        const go = awaitify(function (callback) {\n            var that = this;\n            return eachfn(fns, (fn, cb) => {\n                wrapAsync(fn).apply(that, callArgs.concat(cb));\n            }, callback);\n        });\n        return go;\n    };\n}\n\nfunction _asyncMap(eachfn, arr, iteratee, callback) {\n    arr = arr || [];\n    var results = [];\n    var counter = 0;\n    var _iteratee = wrapAsync(iteratee);\n\n    return eachfn(arr, (value, _, iterCb) => {\n        var index = counter++;\n        _iteratee(value, (err, v) => {\n            results[index] = v;\n            iterCb(err);\n        });\n    }, err => {\n        callback(err, results);\n    });\n}\n\nfunction isArrayLike(value) {\n    return value &&\n        typeof value.length === 'number' &&\n        value.length >= 0 &&\n        value.length % 1 === 0;\n}\n\n// A temporary value used to identify if the loop should be broken.\n// See #1064, #1293\nconst breakLoop = {};\n\nfunction once(fn) {\n    function wrapper (...args) {\n        if (fn === null) return;\n        var callFn = fn;\n        fn = null;\n        callFn.apply(this, args);\n    }\n    Object.assign(wrapper, fn);\n    return wrapper\n}\n\nfunction getIterator (coll) {\n    return coll[Symbol.iterator] && coll[Symbol.iterator]();\n}\n\nfunction createArrayIterator(coll) {\n    var i = -1;\n    var len = coll.length;\n    return function next() {\n        return ++i < len ? {value: coll[i], key: i} : null;\n    }\n}\n\nfunction createES2015Iterator(iterator) {\n    var i = -1;\n    return function next() {\n        var item = iterator.next();\n        if (item.done)\n            return null;\n        i++;\n        return {value: item.value, key: i};\n    }\n}\n\nfunction createObjectIterator(obj) {\n    var okeys = obj ? Object.keys(obj) : [];\n    var i = -1;\n    var len = okeys.length;\n    return function next() {\n        var key = okeys[++i];\n        return i < len ? {value: obj[key], key} : null;\n    };\n}\n\nfunction createIterator(coll) {\n    if (isArrayLike(coll)) {\n        return createArrayIterator(coll);\n    }\n\n    var iterator = getIterator(coll);\n    return iterator ? createES2015Iterator(iterator) : createObjectIterator(coll);\n}\n\nfunction onlyOnce(fn) {\n    return function (...args) {\n        if (fn === null) throw new Error(\"Callback was already called.\");\n        var callFn = fn;\n        fn = null;\n        callFn.apply(this, args);\n    };\n}\n\n// for async generators\nfunction asyncEachOfLimit(generator, limit, iteratee, callback) {\n    let done = false;\n    let canceled = false;\n    let awaiting = false;\n    let running = 0;\n    let idx = 0;\n\n    function replenish() {\n        //console.log('replenish')\n        if (running >= limit || awaiting || done) return\n        //console.log('replenish awaiting')\n        awaiting = true;\n        generator.next().then(({value, done: iterDone}) => {\n            //console.log('got value', value)\n            if (canceled || done) return\n            awaiting = false;\n            if (iterDone) {\n                done = true;\n                if (running <= 0) {\n                    //console.log('done nextCb')\n                    callback(null);\n                }\n                return;\n            }\n            running++;\n            iteratee(value, idx, iterateeCallback);\n            idx++;\n            replenish();\n        }).catch(handleError);\n    }\n\n    function iterateeCallback(err, result) {\n        //console.log('iterateeCallback')\n        running -= 1;\n        if (canceled) return\n        if (err) return handleError(err)\n\n        if (err === false) {\n            done = true;\n            canceled = true;\n            return\n        }\n\n        if (result === breakLoop || (done && running <= 0)) {\n            done = true;\n            //console.log('done iterCb')\n            return callback(null);\n        }\n        replenish();\n    }\n\n    function handleError(err) {\n        if (canceled) return\n        awaiting = false;\n        done = true;\n        callback(err);\n    }\n\n    replenish();\n}\n\nvar eachOfLimit = (limit) => {\n    return (obj, iteratee, callback) => {\n        callback = once(callback);\n        if (limit <= 0) {\n            throw new RangeError('concurrency limit cannot be less than 1')\n        }\n        if (!obj) {\n            return callback(null);\n        }\n        if (isAsyncGenerator(obj)) {\n            return asyncEachOfLimit(obj, limit, iteratee, callback)\n        }\n        if (isAsyncIterable(obj)) {\n            return asyncEachOfLimit(obj[Symbol.asyncIterator](), limit, iteratee, callback)\n        }\n        var nextElem = createIterator(obj);\n        var done = false;\n        var canceled = false;\n        var running = 0;\n        var looping = false;\n\n        function iterateeCallback(err, value) {\n            if (canceled) return\n            running -= 1;\n            if (err) {\n                done = true;\n                callback(err);\n            }\n            else if (err === false) {\n                done = true;\n                canceled = true;\n            }\n            else if (value === breakLoop || (done && running <= 0)) {\n                done = true;\n                return callback(null);\n            }\n            else if (!looping) {\n                replenish();\n            }\n        }\n\n        function replenish () {\n            looping = true;\n            while (running < limit && !done) {\n                var elem = nextElem();\n                if (elem === null) {\n                    done = true;\n                    if (running <= 0) {\n                        callback(null);\n                    }\n                    return;\n                }\n                running += 1;\n                iteratee(elem.value, elem.key, onlyOnce(iterateeCallback));\n            }\n            looping = false;\n        }\n\n        replenish();\n    };\n};\n\n/**\n * The same as [`eachOf`]{@link module:Collections.eachOf} but runs a maximum of `limit` async operations at a\n * time.\n *\n * @name eachOfLimit\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.eachOf]{@link module:Collections.eachOf}\n * @alias forEachOfLimit\n * @category Collection\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {number} limit - The maximum number of async operations at a time.\n * @param {AsyncFunction} iteratee - An async function to apply to each\n * item in `coll`. The `key` is the item's key, or index in the case of an\n * array.\n * Invoked with (item, key, callback).\n * @param {Function} [callback] - A callback which is called when all\n * `iteratee` functions have finished, or an error occurs. Invoked with (err).\n * @returns {Promise} a promise, if a callback is omitted\n */\nfunction eachOfLimit$1(coll, limit, iteratee, callback) {\n    return eachOfLimit(limit)(coll, wrapAsync(iteratee), callback);\n}\n\nvar eachOfLimit$2 = awaitify(eachOfLimit$1, 4);\n\n// eachOf implementation optimized for array-likes\nfunction eachOfArrayLike(coll, iteratee, callback) {\n    callback = once(callback);\n    var index = 0,\n        completed = 0,\n        {length} = coll,\n        canceled = false;\n    if (length === 0) {\n        callback(null);\n    }\n\n    function iteratorCallback(err, value) {\n        if (err === false) {\n            canceled = true;\n        }\n        if (canceled === true) return\n        if (err) {\n            callback(err);\n        } else if ((++completed === length) || value === breakLoop) {\n            callback(null);\n        }\n    }\n\n    for (; index < length; index++) {\n        iteratee(coll[index], index, onlyOnce(iteratorCallback));\n    }\n}\n\n// a generic version of eachOf which can handle array, object, and iterator cases.\nfunction eachOfGeneric (coll, iteratee, callback) {\n    return eachOfLimit$2(coll, Infinity, iteratee, callback);\n}\n\n/**\n * Like [`each`]{@link module:Collections.each}, except that it passes the key (or index) as the second argument\n * to the iteratee.\n *\n * @name eachOf\n * @static\n * @memberOf module:Collections\n * @method\n * @alias forEachOf\n * @category Collection\n * @see [async.each]{@link module:Collections.each}\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {AsyncFunction} iteratee - A function to apply to each\n * item in `coll`.\n * The `key` is the item's key, or index in the case of an array.\n * Invoked with (item, key, callback).\n * @param {Function} [callback] - A callback which is called when all\n * `iteratee` functions have finished, or an error occurs. Invoked with (err).\n * @returns {Promise} a promise, if a callback is omitted\n * @example\n *\n * var obj = {dev: \"/dev.json\", test: \"/test.json\", prod: \"/prod.json\"};\n * var configs = {};\n *\n * async.forEachOf(obj, function (value, key, callback) {\n *     fs.readFile(__dirname + value, \"utf8\", function (err, data) {\n *         if (err) return callback(err);\n *         try {\n *             configs[key] = JSON.parse(data);\n *         } catch (e) {\n *             return callback(e);\n *         }\n *         callback();\n *     });\n * }, function (err) {\n *     if (err) console.error(err.message);\n *     // configs is now a map of JSON data\n *     doSomethingWith(configs);\n * });\n */\nfunction eachOf(coll, iteratee, callback) {\n    var eachOfImplementation = isArrayLike(coll) ? eachOfArrayLike : eachOfGeneric;\n    return eachOfImplementation(coll, wrapAsync(iteratee), callback);\n}\n\nvar eachOf$1 = awaitify(eachOf, 3);\n\n/**\n * Produces a new collection of values by mapping each value in `coll` through\n * the `iteratee` function. The `iteratee` is called with an item from `coll`\n * and a callback for when it has finished processing. Each of these callback\n * takes 2 arguments: an `error`, and the transformed item from `coll`. If\n * `iteratee` passes an error to its callback, the main `callback` (for the\n * `map` function) is immediately called with the error.\n *\n * Note, that since this function applies the `iteratee` to each item in\n * parallel, there is no guarantee that the `iteratee` functions will complete\n * in order. However, the results array will be in the same order as the\n * original `coll`.\n *\n * If `map` is passed an Object, the results will be an Array.  The results\n * will roughly be in the order of the original Objects' keys (but this can\n * vary across JavaScript engines).\n *\n * @name map\n * @static\n * @memberOf module:Collections\n * @method\n * @category Collection\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {AsyncFunction} iteratee - An async function to apply to each item in\n * `coll`.\n * The iteratee should complete with the transformed item.\n * Invoked with (item, callback).\n * @param {Function} [callback] - A callback which is called when all `iteratee`\n * functions have finished, or an error occurs. Results is an Array of the\n * transformed items from the `coll`. Invoked with (err, results).\n * @returns {Promise} a promise, if no callback is passed\n * @example\n *\n * async.map(['file1','file2','file3'], fs.stat, function(err, results) {\n *     // results is now an array of stats for each file\n * });\n */\nfunction map (coll, iteratee, callback) {\n    return _asyncMap(eachOf$1, coll, iteratee, callback)\n}\nvar map$1 = awaitify(map, 3);\n\n/**\n * Applies the provided arguments to each function in the array, calling\n * `callback` after all functions have completed. If you only provide the first\n * argument, `fns`, then it will return a function which lets you pass in the\n * arguments as if it were a single function call. If more arguments are\n * provided, `callback` is required while `args` is still optional. The results\n * for each of the applied async functions are passed to the final callback\n * as an array.\n *\n * @name applyEach\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @category Control Flow\n * @param {Array|Iterable|AsyncIterable|Object} fns - A collection of {@link AsyncFunction}s\n * to all call with the same arguments\n * @param {...*} [args] - any number of separate arguments to pass to the\n * function.\n * @param {Function} [callback] - the final argument should be the callback,\n * called when all functions have completed processing.\n * @returns {AsyncFunction} - Returns a function that takes no args other than\n * an optional callback, that is the result of applying the `args` to each\n * of the functions.\n * @example\n *\n * const appliedFn = async.applyEach([enableSearch, updateSchema], 'bucket')\n *\n * appliedFn((err, results) => {\n *     // results[0] is the results for `enableSearch`\n *     // results[1] is the results for `updateSchema`\n * });\n *\n * // partial application example:\n * async.each(\n *     buckets,\n *     async (bucket) => async.applyEach([enableSearch, updateSchema], bucket)(),\n *     callback\n * );\n */\nvar applyEach$1 = applyEach(map$1);\n\n/**\n * The same as [`eachOf`]{@link module:Collections.eachOf} but runs only a single async operation at a time.\n *\n * @name eachOfSeries\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.eachOf]{@link module:Collections.eachOf}\n * @alias forEachOfSeries\n * @category Collection\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {AsyncFunction} iteratee - An async function to apply to each item in\n * `coll`.\n * Invoked with (item, key, callback).\n * @param {Function} [callback] - A callback which is called when all `iteratee`\n * functions have finished, or an error occurs. Invoked with (err).\n * @returns {Promise} a promise, if a callback is omitted\n */\nfunction eachOfSeries(coll, iteratee, callback) {\n    return eachOfLimit$2(coll, 1, iteratee, callback)\n}\nvar eachOfSeries$1 = awaitify(eachOfSeries, 3);\n\n/**\n * The same as [`map`]{@link module:Collections.map} but runs only a single async operation at a time.\n *\n * @name mapSeries\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.map]{@link module:Collections.map}\n * @category Collection\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {AsyncFunction} iteratee - An async function to apply to each item in\n * `coll`.\n * The iteratee should complete with the transformed item.\n * Invoked with (item, callback).\n * @param {Function} [callback] - A callback which is called when all `iteratee`\n * functions have finished, or an error occurs. Results is an array of the\n * transformed items from the `coll`. Invoked with (err, results).\n * @returns {Promise} a promise, if no callback is passed\n */\nfunction mapSeries (coll, iteratee, callback) {\n    return _asyncMap(eachOfSeries$1, coll, iteratee, callback)\n}\nvar mapSeries$1 = awaitify(mapSeries, 3);\n\n/**\n * The same as [`applyEach`]{@link module:ControlFlow.applyEach} but runs only a single async operation at a time.\n *\n * @name applyEachSeries\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @see [async.applyEach]{@link module:ControlFlow.applyEach}\n * @category Control Flow\n * @param {Array|Iterable|AsyncIterable|Object} fns - A collection of {@link AsyncFunction}s to all\n * call with the same arguments\n * @param {...*} [args] - any number of separate arguments to pass to the\n * function.\n * @param {Function} [callback] - the final argument should be the callback,\n * called when all functions have completed processing.\n * @returns {AsyncFunction} - A function, that when called, is the result of\n * appling the `args` to the list of functions.  It takes no args, other than\n * a callback.\n */\nvar applyEachSeries = applyEach(mapSeries$1);\n\nconst PROMISE_SYMBOL = Symbol('promiseCallback');\n\nfunction promiseCallback () {\n    let resolve, reject;\n    function callback (err, ...args) {\n        if (err) return reject(err)\n        resolve(args.length > 1 ? args : args[0]);\n    }\n\n    callback[PROMISE_SYMBOL] = new Promise((res, rej) => {\n        resolve = res,\n        reject = rej;\n    });\n\n    return callback\n}\n\n/**\n * Determines the best order for running the {@link AsyncFunction}s in `tasks`, based on\n * their requirements. Each function can optionally depend on other functions\n * being completed first, and each function is run as soon as its requirements\n * are satisfied.\n *\n * If any of the {@link AsyncFunction}s pass an error to their callback, the `auto` sequence\n * will stop. Further tasks will not execute (so any other functions depending\n * on it will not run), and the main `callback` is immediately called with the\n * error.\n *\n * {@link AsyncFunction}s also receive an object containing the results of functions which\n * have completed so far as the first argument, if they have dependencies. If a\n * task function has no dependencies, it will only be passed a callback.\n *\n * @name auto\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @category Control Flow\n * @param {Object} tasks - An object. Each of its properties is either a\n * function or an array of requirements, with the {@link AsyncFunction} itself the last item\n * in the array. The object's key of a property serves as the name of the task\n * defined by that property, i.e. can be used when specifying requirements for\n * other tasks. The function receives one or two arguments:\n * * a `results` object, containing the results of the previously executed\n *   functions, only passed if the task has any dependencies,\n * * a `callback(err, result)` function, which must be called when finished,\n *   passing an `error` (which can be `null`) and the result of the function's\n *   execution.\n * @param {number} [concurrency=Infinity] - An optional `integer` for\n * determining the maximum number of tasks that can be run in parallel. By\n * default, as many as possible.\n * @param {Function} [callback] - An optional callback which is called when all\n * the tasks have been completed. It receives the `err` argument if any `tasks`\n * pass an error to their callback. Results are always returned; however, if an\n * error occurs, no further `tasks` will be performed, and the results object\n * will only contain partial results. Invoked with (err, results).\n * @returns {Promise} a promise, if a callback is not passed\n * @example\n *\n * async.auto({\n *     // this function will just be passed a callback\n *     readData: async.apply(fs.readFile, 'data.txt', 'utf-8'),\n *     showData: ['readData', function(results, cb) {\n *         // results.readData is the file's contents\n *         // ...\n *     }]\n * }, callback);\n *\n * async.auto({\n *     get_data: function(callback) {\n *         console.log('in get_data');\n *         // async code to get some data\n *         callback(null, 'data', 'converted to array');\n *     },\n *     make_folder: function(callback) {\n *         console.log('in make_folder');\n *         // async code to create a directory to store a file in\n *         // this is run at the same time as getting the data\n *         callback(null, 'folder');\n *     },\n *     write_file: ['get_data', 'make_folder', function(results, callback) {\n *         console.log('in write_file', JSON.stringify(results));\n *         // once there is some data and the directory exists,\n *         // write the data to a file in the directory\n *         callback(null, 'filename');\n *     }],\n *     email_link: ['write_file', function(results, callback) {\n *         console.log('in email_link', JSON.stringify(results));\n *         // once the file is written let's email a link to it...\n *         // results.write_file contains the filename returned by write_file.\n *         callback(null, {'file':results.write_file, 'email':'user@example.com'});\n *     }]\n * }, function(err, results) {\n *     console.log('err = ', err);\n *     console.log('results = ', results);\n * });\n */\nfunction auto(tasks, concurrency, callback) {\n    if (typeof concurrency !== 'number') {\n        // concurrency is optional, shift the args.\n        callback = concurrency;\n        concurrency = null;\n    }\n    callback = once(callback || promiseCallback());\n    var numTasks = Object.keys(tasks).length;\n    if (!numTasks) {\n        return callback(null);\n    }\n    if (!concurrency) {\n        concurrency = numTasks;\n    }\n\n    var results = {};\n    var runningTasks = 0;\n    var canceled = false;\n    var hasError = false;\n\n    var listeners = Object.create(null);\n\n    var readyTasks = [];\n\n    // for cycle detection:\n    var readyToCheck = []; // tasks that have been identified as reachable\n    // without the possibility of returning to an ancestor task\n    var uncheckedDependencies = {};\n\n    Object.keys(tasks).forEach(key => {\n        var task = tasks[key];\n        if (!Array.isArray(task)) {\n            // no dependencies\n            enqueueTask(key, [task]);\n            readyToCheck.push(key);\n            return;\n        }\n\n        var dependencies = task.slice(0, task.length - 1);\n        var remainingDependencies = dependencies.length;\n        if (remainingDependencies === 0) {\n            enqueueTask(key, task);\n            readyToCheck.push(key);\n            return;\n        }\n        uncheckedDependencies[key] = remainingDependencies;\n\n        dependencies.forEach(dependencyName => {\n            if (!tasks[dependencyName]) {\n                throw new Error('async.auto task `' + key +\n                    '` has a non-existent dependency `' +\n                    dependencyName + '` in ' +\n                    dependencies.join(', '));\n            }\n            addListener(dependencyName, () => {\n                remainingDependencies--;\n                if (remainingDependencies === 0) {\n                    enqueueTask(key, task);\n                }\n            });\n        });\n    });\n\n    checkForDeadlocks();\n    processQueue();\n\n    function enqueueTask(key, task) {\n        readyTasks.push(() => runTask(key, task));\n    }\n\n    function processQueue() {\n        if (canceled) return\n        if (readyTasks.length === 0 && runningTasks === 0) {\n            return callback(null, results);\n        }\n        while(readyTasks.length && runningTasks < concurrency) {\n            var run = readyTasks.shift();\n            run();\n        }\n\n    }\n\n    function addListener(taskName, fn) {\n        var taskListeners = listeners[taskName];\n        if (!taskListeners) {\n            taskListeners = listeners[taskName] = [];\n        }\n\n        taskListeners.push(fn);\n    }\n\n    function taskComplete(taskName) {\n        var taskListeners = listeners[taskName] || [];\n        taskListeners.forEach(fn => fn());\n        processQueue();\n    }\n\n\n    function runTask(key, task) {\n        if (hasError) return;\n\n        var taskCallback = onlyOnce((err, ...result) => {\n            runningTasks--;\n            if (err === false) {\n                canceled = true;\n                return\n            }\n            if (result.length < 2) {\n                [result] = result;\n            }\n            if (err) {\n                var safeResults = {};\n                Object.keys(results).forEach(rkey => {\n                    safeResults[rkey] = results[rkey];\n                });\n                safeResults[key] = result;\n                hasError = true;\n                listeners = Object.create(null);\n                if (canceled) return\n                callback(err, safeResults);\n            } else {\n                results[key] = result;\n                taskComplete(key);\n            }\n        });\n\n        runningTasks++;\n        var taskFn = wrapAsync(task[task.length - 1]);\n        if (task.length > 1) {\n            taskFn(results, taskCallback);\n        } else {\n            taskFn(taskCallback);\n        }\n    }\n\n    function checkForDeadlocks() {\n        // Kahn's algorithm\n        // https://en.wikipedia.org/wiki/Topological_sorting#Kahn.27s_algorithm\n        // http://connalle.blogspot.com/2013/10/topological-sortingkahn-algorithm.html\n        var currentTask;\n        var counter = 0;\n        while (readyToCheck.length) {\n            currentTask = readyToCheck.pop();\n            counter++;\n            getDependents(currentTask).forEach(dependent => {\n                if (--uncheckedDependencies[dependent] === 0) {\n                    readyToCheck.push(dependent);\n                }\n            });\n        }\n\n        if (counter !== numTasks) {\n            throw new Error(\n                'async.auto cannot execute tasks due to a recursive dependency'\n            );\n        }\n    }\n\n    function getDependents(taskName) {\n        var result = [];\n        Object.keys(tasks).forEach(key => {\n            const task = tasks[key];\n            if (Array.isArray(task) && task.indexOf(taskName) >= 0) {\n                result.push(key);\n            }\n        });\n        return result;\n    }\n\n    return callback[PROMISE_SYMBOL]\n}\n\nvar FN_ARGS = /^(?:async\\s+)?(?:function)?\\s*\\w*\\s*\\(\\s*([^)]+)\\s*\\)(?:\\s*{)/;\nvar ARROW_FN_ARGS = /^(?:async\\s+)?\\(?\\s*([^)=]+)\\s*\\)?(?:\\s*=>)/;\nvar FN_ARG_SPLIT = /,/;\nvar FN_ARG = /(=.+)?(\\s*)$/;\nvar STRIP_COMMENTS = /((\\/\\/.*$)|(\\/\\*[\\s\\S]*?\\*\\/))/mg;\n\nfunction parseParams(func) {\n    const src = func.toString().replace(STRIP_COMMENTS, '');\n    let match = src.match(FN_ARGS);\n    if (!match) {\n        match = src.match(ARROW_FN_ARGS);\n    }\n    if (!match) throw new Error('could not parse args in autoInject\\nSource:\\n' + src)\n    let [, args] = match;\n    return args\n        .replace(/\\s/g, '')\n        .split(FN_ARG_SPLIT)\n        .map((arg) => arg.replace(FN_ARG, '').trim());\n}\n\n/**\n * A dependency-injected version of the [async.auto]{@link module:ControlFlow.auto} function. Dependent\n * tasks are specified as parameters to the function, after the usual callback\n * parameter, with the parameter names matching the names of the tasks it\n * depends on. This can provide even more readable task graphs which can be\n * easier to maintain.\n *\n * If a final callback is specified, the task results are similarly injected,\n * specified as named parameters after the initial error parameter.\n *\n * The autoInject function is purely syntactic sugar and its semantics are\n * otherwise equivalent to [async.auto]{@link module:ControlFlow.auto}.\n *\n * @name autoInject\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @see [async.auto]{@link module:ControlFlow.auto}\n * @category Control Flow\n * @param {Object} tasks - An object, each of whose properties is an {@link AsyncFunction} of\n * the form 'func([dependencies...], callback). The object's key of a property\n * serves as the name of the task defined by that property, i.e. can be used\n * when specifying requirements for other tasks.\n * * The `callback` parameter is a `callback(err, result)` which must be called\n *   when finished, passing an `error` (which can be `null`) and the result of\n *   the function's execution. The remaining parameters name other tasks on\n *   which the task is dependent, and the results from those tasks are the\n *   arguments of those parameters.\n * @param {Function} [callback] - An optional callback which is called when all\n * the tasks have been completed. It receives the `err` argument if any `tasks`\n * pass an error to their callback, and a `results` object with any completed\n * task results, similar to `auto`.\n * @returns {Promise} a promise, if no callback is passed\n * @example\n *\n * //  The example from `auto` can be rewritten as follows:\n * async.autoInject({\n *     get_data: function(callback) {\n *         // async code to get some data\n *         callback(null, 'data', 'converted to array');\n *     },\n *     make_folder: function(callback) {\n *         // async code to create a directory to store a file in\n *         // this is run at the same time as getting the data\n *         callback(null, 'folder');\n *     },\n *     write_file: function(get_data, make_folder, callback) {\n *         // once there is some data and the directory exists,\n *         // write the data to a file in the directory\n *         callback(null, 'filename');\n *     },\n *     email_link: function(write_file, callback) {\n *         // once the file is written let's email a link to it...\n *         // write_file contains the filename returned by write_file.\n *         callback(null, {'file':write_file, 'email':'user@example.com'});\n *     }\n * }, function(err, results) {\n *     console.log('err = ', err);\n *     console.log('email_link = ', results.email_link);\n * });\n *\n * // If you are using a JS minifier that mangles parameter names, `autoInject`\n * // will not work with plain functions, since the parameter names will be\n * // collapsed to a single letter identifier.  To work around this, you can\n * // explicitly specify the names of the parameters your task function needs\n * // in an array, similar to Angular.js dependency injection.\n *\n * // This still has an advantage over plain `auto`, since the results a task\n * // depends on are still spread into arguments.\n * async.autoInject({\n *     //...\n *     write_file: ['get_data', 'make_folder', function(get_data, make_folder, callback) {\n *         callback(null, 'filename');\n *     }],\n *     email_link: ['write_file', function(write_file, callback) {\n *         callback(null, {'file':write_file, 'email':'user@example.com'});\n *     }]\n *     //...\n * }, function(err, results) {\n *     console.log('err = ', err);\n *     console.log('email_link = ', results.email_link);\n * });\n */\nfunction autoInject(tasks, callback) {\n    var newTasks = {};\n\n    Object.keys(tasks).forEach(key => {\n        var taskFn = tasks[key];\n        var params;\n        var fnIsAsync = isAsync(taskFn);\n        var hasNoDeps =\n            (!fnIsAsync && taskFn.length === 1) ||\n            (fnIsAsync && taskFn.length === 0);\n\n        if (Array.isArray(taskFn)) {\n            params = [...taskFn];\n            taskFn = params.pop();\n\n            newTasks[key] = params.concat(params.length > 0 ? newTask : taskFn);\n        } else if (hasNoDeps) {\n            // no dependencies, use the function as-is\n            newTasks[key] = taskFn;\n        } else {\n            params = parseParams(taskFn);\n            if ((taskFn.length === 0 && !fnIsAsync) && params.length === 0) {\n                throw new Error(\"autoInject task functions require explicit parameters.\");\n            }\n\n            // remove callback param\n            if (!fnIsAsync) params.pop();\n\n            newTasks[key] = params.concat(newTask);\n        }\n\n        function newTask(results, taskCb) {\n            var newArgs = params.map(name => results[name]);\n            newArgs.push(taskCb);\n            wrapAsync(taskFn)(...newArgs);\n        }\n    });\n\n    return auto(newTasks, callback);\n}\n\n// Simple doubly linked list (https://en.wikipedia.org/wiki/Doubly_linked_list) implementation\n// used for queues. This implementation assumes that the node provided by the user can be modified\n// to adjust the next and last properties. We implement only the minimal functionality\n// for queue support.\nclass DLL {\n    constructor() {\n        this.head = this.tail = null;\n        this.length = 0;\n    }\n\n    removeLink(node) {\n        if (node.prev) node.prev.next = node.next;\n        else this.head = node.next;\n        if (node.next) node.next.prev = node.prev;\n        else this.tail = node.prev;\n\n        node.prev = node.next = null;\n        this.length -= 1;\n        return node;\n    }\n\n    empty () {\n        while(this.head) this.shift();\n        return this;\n    }\n\n    insertAfter(node, newNode) {\n        newNode.prev = node;\n        newNode.next = node.next;\n        if (node.next) node.next.prev = newNode;\n        else this.tail = newNode;\n        node.next = newNode;\n        this.length += 1;\n    }\n\n    insertBefore(node, newNode) {\n        newNode.prev = node.prev;\n        newNode.next = node;\n        if (node.prev) node.prev.next = newNode;\n        else this.head = newNode;\n        node.prev = newNode;\n        this.length += 1;\n    }\n\n    unshift(node) {\n        if (this.head) this.insertBefore(this.head, node);\n        else setInitial(this, node);\n    }\n\n    push(node) {\n        if (this.tail) this.insertAfter(this.tail, node);\n        else setInitial(this, node);\n    }\n\n    shift() {\n        return this.head && this.removeLink(this.head);\n    }\n\n    pop() {\n        return this.tail && this.removeLink(this.tail);\n    }\n\n    toArray() {\n        return [...this]\n    }\n\n    *[Symbol.iterator] () {\n        var cur = this.head;\n        while (cur) {\n            yield cur.data;\n            cur = cur.next;\n        }\n    }\n\n    remove (testFn) {\n        var curr = this.head;\n        while(curr) {\n            var {next} = curr;\n            if (testFn(curr)) {\n                this.removeLink(curr);\n            }\n            curr = next;\n        }\n        return this;\n    }\n}\n\nfunction setInitial(dll, node) {\n    dll.length = 1;\n    dll.head = dll.tail = node;\n}\n\nfunction queue(worker, concurrency, payload) {\n    if (concurrency == null) {\n        concurrency = 1;\n    }\n    else if(concurrency === 0) {\n        throw new RangeError('Concurrency must not be zero');\n    }\n\n    var _worker = wrapAsync(worker);\n    var numRunning = 0;\n    var workersList = [];\n    const events = {\n        error: [],\n        drain: [],\n        saturated: [],\n        unsaturated: [],\n        empty: []\n    };\n\n    function on (event, handler) {\n        events[event].push(handler);\n    }\n\n    function once (event, handler) {\n        const handleAndRemove = (...args) => {\n            off(event, handleAndRemove);\n            handler(...args);\n        };\n        events[event].push(handleAndRemove);\n    }\n\n    function off (event, handler) {\n        if (!event) return Object.keys(events).forEach(ev => events[ev] = [])\n        if (!handler) return events[event] = []\n        events[event] = events[event].filter(ev => ev !== handler);\n    }\n\n    function trigger (event, ...args) {\n        events[event].forEach(handler => handler(...args));\n    }\n\n    var processingScheduled = false;\n    function _insert(data, insertAtFront, rejectOnError, callback) {\n        if (callback != null && typeof callback !== 'function') {\n            throw new Error('task callback must be a function');\n        }\n        q.started = true;\n\n        var res, rej;\n        function promiseCallback (err, ...args) {\n            // we don't care about the error, let the global error handler\n            // deal with it\n            if (err) return rejectOnError ? rej(err) : res()\n            if (args.length <= 1) return res(args[0])\n            res(args);\n        }\n\n        var item = {\n            data,\n            callback: rejectOnError ?\n                promiseCallback :\n                (callback || promiseCallback)\n        };\n\n        if (insertAtFront) {\n            q._tasks.unshift(item);\n        } else {\n            q._tasks.push(item);\n        }\n\n        if (!processingScheduled) {\n            processingScheduled = true;\n            setImmediate$1(() => {\n                processingScheduled = false;\n                q.process();\n            });\n        }\n\n        if (rejectOnError || !callback) {\n            return new Promise((resolve, reject) => {\n                res = resolve;\n                rej = reject;\n            })\n        }\n    }\n\n    function _createCB(tasks) {\n        return function (err, ...args) {\n            numRunning -= 1;\n\n            for (var i = 0, l = tasks.length; i < l; i++) {\n                var task = tasks[i];\n\n                var index = workersList.indexOf(task);\n                if (index === 0) {\n                    workersList.shift();\n                } else if (index > 0) {\n                    workersList.splice(index, 1);\n                }\n\n                task.callback(err, ...args);\n\n                if (err != null) {\n                    trigger('error', err, task.data);\n                }\n            }\n\n            if (numRunning <= (q.concurrency - q.buffer) ) {\n                trigger('unsaturated');\n            }\n\n            if (q.idle()) {\n                trigger('drain');\n            }\n            q.process();\n        };\n    }\n\n    function _maybeDrain(data) {\n        if (data.length === 0 && q.idle()) {\n            // call drain immediately if there are no tasks\n            setImmediate$1(() => trigger('drain'));\n            return true\n        }\n        return false\n    }\n\n    const eventMethod = (name) => (handler) => {\n        if (!handler) {\n            return new Promise((resolve, reject) => {\n                once(name, (err, data) => {\n                    if (err) return reject(err)\n                    resolve(data);\n                });\n            })\n        }\n        off(name);\n        on(name, handler);\n\n    };\n\n    var isProcessing = false;\n    var q = {\n        _tasks: new DLL(),\n        *[Symbol.iterator] () {\n            yield* q._tasks[Symbol.iterator]();\n        },\n        concurrency,\n        payload,\n        buffer: concurrency / 4,\n        started: false,\n        paused: false,\n        push (data, callback) {\n            if (Array.isArray(data)) {\n                if (_maybeDrain(data)) return\n                return data.map(datum => _insert(datum, false, false, callback))\n            }\n            return _insert(data, false, false, callback);\n        },\n        pushAsync (data, callback) {\n            if (Array.isArray(data)) {\n                if (_maybeDrain(data)) return\n                return data.map(datum => _insert(datum, false, true, callback))\n            }\n            return _insert(data, false, true, callback);\n        },\n        kill () {\n            off();\n            q._tasks.empty();\n        },\n        unshift (data, callback) {\n            if (Array.isArray(data)) {\n                if (_maybeDrain(data)) return\n                return data.map(datum => _insert(datum, true, false, callback))\n            }\n            return _insert(data, true, false, callback);\n        },\n        unshiftAsync (data, callback) {\n            if (Array.isArray(data)) {\n                if (_maybeDrain(data)) return\n                return data.map(datum => _insert(datum, true, true, callback))\n            }\n            return _insert(data, true, true, callback);\n        },\n        remove (testFn) {\n            q._tasks.remove(testFn);\n        },\n        process () {\n            // Avoid trying to start too many processing operations. This can occur\n            // when callbacks resolve synchronously (#1267).\n            if (isProcessing) {\n                return;\n            }\n            isProcessing = true;\n            while(!q.paused && numRunning < q.concurrency && q._tasks.length){\n                var tasks = [], data = [];\n                var l = q._tasks.length;\n                if (q.payload) l = Math.min(l, q.payload);\n                for (var i = 0; i < l; i++) {\n                    var node = q._tasks.shift();\n                    tasks.push(node);\n                    workersList.push(node);\n                    data.push(node.data);\n                }\n\n                numRunning += 1;\n\n                if (q._tasks.length === 0) {\n                    trigger('empty');\n                }\n\n                if (numRunning === q.concurrency) {\n                    trigger('saturated');\n                }\n\n                var cb = onlyOnce(_createCB(tasks));\n                _worker(data, cb);\n            }\n            isProcessing = false;\n        },\n        length () {\n            return q._tasks.length;\n        },\n        running () {\n            return numRunning;\n        },\n        workersList () {\n            return workersList;\n        },\n        idle() {\n            return q._tasks.length + numRunning === 0;\n        },\n        pause () {\n            q.paused = true;\n        },\n        resume () {\n            if (q.paused === false) { return; }\n            q.paused = false;\n            setImmediate$1(q.process);\n        }\n    };\n    // define these as fixed properties, so people get useful errors when updating\n    Object.defineProperties(q, {\n        saturated: {\n            writable: false,\n            value: eventMethod('saturated')\n        },\n        unsaturated: {\n            writable: false,\n            value: eventMethod('unsaturated')\n        },\n        empty: {\n            writable: false,\n            value: eventMethod('empty')\n        },\n        drain: {\n            writable: false,\n            value: eventMethod('drain')\n        },\n        error: {\n            writable: false,\n            value: eventMethod('error')\n        },\n    });\n    return q;\n}\n\n/**\n * Creates a `cargo` object with the specified payload. Tasks added to the\n * cargo will be processed altogether (up to the `payload` limit). If the\n * `worker` is in progress, the task is queued until it becomes available. Once\n * the `worker` has completed some tasks, each callback of those tasks is\n * called. Check out [these](https://camo.githubusercontent.com/6bbd36f4cf5b35a0f11a96dcd2e97711ffc2fb37/68747470733a2f2f662e636c6f75642e6769746875622e636f6d2f6173736574732f313637363837312f36383130382f62626330636662302d356632392d313165322d393734662d3333393763363464633835382e676966) [animations](https://camo.githubusercontent.com/f4810e00e1c5f5f8addbe3e9f49064fd5d102699/68747470733a2f2f662e636c6f75642e6769746875622e636f6d2f6173736574732f313637363837312f36383130312f38346339323036362d356632392d313165322d383134662d3964336430323431336266642e676966)\n * for how `cargo` and `queue` work.\n *\n * While [`queue`]{@link module:ControlFlow.queue} passes only one task to one of a group of workers\n * at a time, cargo passes an array of tasks to a single worker, repeating\n * when the worker is finished.\n *\n * @name cargo\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @see [async.queue]{@link module:ControlFlow.queue}\n * @category Control Flow\n * @param {AsyncFunction} worker - An asynchronous function for processing an array\n * of queued tasks. Invoked with `(tasks, callback)`.\n * @param {number} [payload=Infinity] - An optional `integer` for determining\n * how many tasks should be processed per round; if omitted, the default is\n * unlimited.\n * @returns {module:ControlFlow.QueueObject} A cargo object to manage the tasks. Callbacks can\n * attached as certain properties to listen for specific events during the\n * lifecycle of the cargo and inner queue.\n * @example\n *\n * // create a cargo object with payload 2\n * var cargo = async.cargo(function(tasks, callback) {\n *     for (var i=0; i<tasks.length; i++) {\n *         console.log('hello ' + tasks[i].name);\n *     }\n *     callback();\n * }, 2);\n *\n * // add some items\n * cargo.push({name: 'foo'}, function(err) {\n *     console.log('finished processing foo');\n * });\n * cargo.push({name: 'bar'}, function(err) {\n *     console.log('finished processing bar');\n * });\n * await cargo.push({name: 'baz'});\n * console.log('finished processing baz');\n */\nfunction cargo(worker, payload) {\n    return queue(worker, 1, payload);\n}\n\n/**\n * Creates a `cargoQueue` object with the specified payload. Tasks added to the\n * cargoQueue will be processed together (up to the `payload` limit) in `concurrency` parallel workers.\n * If the all `workers` are in progress, the task is queued until one becomes available. Once\n * a `worker` has completed some tasks, each callback of those tasks is\n * called. Check out [these](https://camo.githubusercontent.com/6bbd36f4cf5b35a0f11a96dcd2e97711ffc2fb37/68747470733a2f2f662e636c6f75642e6769746875622e636f6d2f6173736574732f313637363837312f36383130382f62626330636662302d356632392d313165322d393734662d3333393763363464633835382e676966) [animations](https://camo.githubusercontent.com/f4810e00e1c5f5f8addbe3e9f49064fd5d102699/68747470733a2f2f662e636c6f75642e6769746875622e636f6d2f6173736574732f313637363837312f36383130312f38346339323036362d356632392d313165322d383134662d3964336430323431336266642e676966)\n * for how `cargo` and `queue` work.\n *\n * While [`queue`]{@link module:ControlFlow.queue} passes only one task to one of a group of workers\n * at a time, and [`cargo`]{@link module:ControlFlow.cargo} passes an array of tasks to a single worker,\n * the cargoQueue passes an array of tasks to multiple parallel workers.\n *\n * @name cargoQueue\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @see [async.queue]{@link module:ControlFlow.queue}\n * @see [async.cargo]{@link module:ControlFLow.cargo}\n * @category Control Flow\n * @param {AsyncFunction} worker - An asynchronous function for processing an array\n * of queued tasks. Invoked with `(tasks, callback)`.\n * @param {number} [concurrency=1] - An `integer` for determining how many\n * `worker` functions should be run in parallel.  If omitted, the concurrency\n * defaults to `1`.  If the concurrency is `0`, an error is thrown.\n * @param {number} [payload=Infinity] - An optional `integer` for determining\n * how many tasks should be processed per round; if omitted, the default is\n * unlimited.\n * @returns {module:ControlFlow.QueueObject} A cargoQueue object to manage the tasks. Callbacks can\n * attached as certain properties to listen for specific events during the\n * lifecycle of the cargoQueue and inner queue.\n * @example\n *\n * // create a cargoQueue object with payload 2 and concurrency 2\n * var cargoQueue = async.cargoQueue(function(tasks, callback) {\n *     for (var i=0; i<tasks.length; i++) {\n *         console.log('hello ' + tasks[i].name);\n *     }\n *     callback();\n * }, 2, 2);\n *\n * // add some items\n * cargoQueue.push({name: 'foo'}, function(err) {\n *     console.log('finished processing foo');\n * });\n * cargoQueue.push({name: 'bar'}, function(err) {\n *     console.log('finished processing bar');\n * });\n * cargoQueue.push({name: 'baz'}, function(err) {\n *     console.log('finished processing baz');\n * });\n * cargoQueue.push({name: 'boo'}, function(err) {\n *     console.log('finished processing boo');\n * });\n */\nfunction cargo$1(worker, concurrency, payload) {\n    return queue(worker, concurrency, payload);\n}\n\n/**\n * Reduces `coll` into a single value using an async `iteratee` to return each\n * successive step. `memo` is the initial state of the reduction. This function\n * only operates in series.\n *\n * For performance reasons, it may make sense to split a call to this function\n * into a parallel map, and then use the normal `Array.prototype.reduce` on the\n * results. This function is for situations where each step in the reduction\n * needs to be async; if you can get the data before reducing it, then it's\n * probably a good idea to do so.\n *\n * @name reduce\n * @static\n * @memberOf module:Collections\n * @method\n * @alias inject\n * @alias foldl\n * @category Collection\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {*} memo - The initial state of the reduction.\n * @param {AsyncFunction} iteratee - A function applied to each item in the\n * array to produce the next step in the reduction.\n * The `iteratee` should complete with the next state of the reduction.\n * If the iteratee complete with an error, the reduction is stopped and the\n * main `callback` is immediately called with the error.\n * Invoked with (memo, item, callback).\n * @param {Function} [callback] - A callback which is called after all the\n * `iteratee` functions have finished. Result is the reduced value. Invoked with\n * (err, result).\n * @returns {Promise} a promise, if no callback is passed\n * @example\n *\n * async.reduce([1,2,3], 0, function(memo, item, callback) {\n *     // pointless async:\n *     process.nextTick(function() {\n *         callback(null, memo + item)\n *     });\n * }, function(err, result) {\n *     // result is now equal to the last value of memo, which is 6\n * });\n */\nfunction reduce(coll, memo, iteratee, callback) {\n    callback = once(callback);\n    var _iteratee = wrapAsync(iteratee);\n    return eachOfSeries$1(coll, (x, i, iterCb) => {\n        _iteratee(memo, x, (err, v) => {\n            memo = v;\n            iterCb(err);\n        });\n    }, err => callback(err, memo));\n}\nvar reduce$1 = awaitify(reduce, 4);\n\n/**\n * Version of the compose function that is more natural to read. Each function\n * consumes the return value of the previous function. It is the equivalent of\n * [compose]{@link module:ControlFlow.compose} with the arguments reversed.\n *\n * Each function is executed with the `this` binding of the composed function.\n *\n * @name seq\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @see [async.compose]{@link module:ControlFlow.compose}\n * @category Control Flow\n * @param {...AsyncFunction} functions - the asynchronous functions to compose\n * @returns {Function} a function that composes the `functions` in order\n * @example\n *\n * // Requires lodash (or underscore), express3 and dresende's orm2.\n * // Part of an app, that fetches cats of the logged user.\n * // This example uses `seq` function to avoid overnesting and error\n * // handling clutter.\n * app.get('/cats', function(request, response) {\n *     var User = request.models.User;\n *     async.seq(\n *         _.bind(User.get, User),  // 'User.get' has signature (id, callback(err, data))\n *         function(user, fn) {\n *             user.getCats(fn);      // 'getCats' has signature (callback(err, data))\n *         }\n *     )(req.session.user_id, function (err, cats) {\n *         if (err) {\n *             console.error(err);\n *             response.json({ status: 'error', message: err.message });\n *         } else {\n *             response.json({ status: 'ok', message: 'Cats found', data: cats });\n *         }\n *     });\n * });\n */\nfunction seq(...functions) {\n    var _functions = functions.map(wrapAsync);\n    return function (...args) {\n        var that = this;\n\n        var cb = args[args.length - 1];\n        if (typeof cb == 'function') {\n            args.pop();\n        } else {\n            cb = promiseCallback();\n        }\n\n        reduce$1(_functions, args, (newargs, fn, iterCb) => {\n            fn.apply(that, newargs.concat((err, ...nextargs) => {\n                iterCb(err, nextargs);\n            }));\n        },\n        (err, results) => cb(err, ...results));\n\n        return cb[PROMISE_SYMBOL]\n    };\n}\n\n/**\n * Creates a function which is a composition of the passed asynchronous\n * functions. Each function consumes the return value of the function that\n * follows. Composing functions `f()`, `g()`, and `h()` would produce the result\n * of `f(g(h()))`, only this version uses callbacks to obtain the return values.\n *\n * If the last argument to the composed function is not a function, a promise\n * is returned when you call it.\n *\n * Each function is executed with the `this` binding of the composed function.\n *\n * @name compose\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @category Control Flow\n * @param {...AsyncFunction} functions - the asynchronous functions to compose\n * @returns {Function} an asynchronous function that is the composed\n * asynchronous `functions`\n * @example\n *\n * function add1(n, callback) {\n *     setTimeout(function () {\n *         callback(null, n + 1);\n *     }, 10);\n * }\n *\n * function mul3(n, callback) {\n *     setTimeout(function () {\n *         callback(null, n * 3);\n *     }, 10);\n * }\n *\n * var add1mul3 = async.compose(mul3, add1);\n * add1mul3(4, function (err, result) {\n *     // result now equals 15\n * });\n */\nfunction compose(...args) {\n    return seq(...args.reverse());\n}\n\n/**\n * The same as [`map`]{@link module:Collections.map} but runs a maximum of `limit` async operations at a time.\n *\n * @name mapLimit\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.map]{@link module:Collections.map}\n * @category Collection\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {number} limit - The maximum number of async operations at a time.\n * @param {AsyncFunction} iteratee - An async function to apply to each item in\n * `coll`.\n * The iteratee should complete with the transformed item.\n * Invoked with (item, callback).\n * @param {Function} [callback] - A callback which is called when all `iteratee`\n * functions have finished, or an error occurs. Results is an array of the\n * transformed items from the `coll`. Invoked with (err, results).\n * @returns {Promise} a promise, if no callback is passed\n */\nfunction mapLimit (coll, limit, iteratee, callback) {\n    return _asyncMap(eachOfLimit(limit), coll, iteratee, callback)\n}\nvar mapLimit$1 = awaitify(mapLimit, 4);\n\n/**\n * The same as [`concat`]{@link module:Collections.concat} but runs a maximum of `limit` async operations at a time.\n *\n * @name concatLimit\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.concat]{@link module:Collections.concat}\n * @category Collection\n * @alias flatMapLimit\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {number} limit - The maximum number of async operations at a time.\n * @param {AsyncFunction} iteratee - A function to apply to each item in `coll`,\n * which should use an array as its result. Invoked with (item, callback).\n * @param {Function} [callback] - A callback which is called after all the\n * `iteratee` functions have finished, or an error occurs. Results is an array\n * containing the concatenated results of the `iteratee` function. Invoked with\n * (err, results).\n * @returns A Promise, if no callback is passed\n */\nfunction concatLimit(coll, limit, iteratee, callback) {\n    var _iteratee = wrapAsync(iteratee);\n    return mapLimit$1(coll, limit, (val, iterCb) => {\n        _iteratee(val, (err, ...args) => {\n            if (err) return iterCb(err);\n            return iterCb(err, args);\n        });\n    }, (err, mapResults) => {\n        var result = [];\n        for (var i = 0; i < mapResults.length; i++) {\n            if (mapResults[i]) {\n                result = result.concat(...mapResults[i]);\n            }\n        }\n\n        return callback(err, result);\n    });\n}\nvar concatLimit$1 = awaitify(concatLimit, 4);\n\n/**\n * Applies `iteratee` to each item in `coll`, concatenating the results. Returns\n * the concatenated list. The `iteratee`s are called in parallel, and the\n * results are concatenated as they return. The results array will be returned in\n * the original order of `coll` passed to the `iteratee` function.\n *\n * @name concat\n * @static\n * @memberOf module:Collections\n * @method\n * @category Collection\n * @alias flatMap\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {AsyncFunction} iteratee - A function to apply to each item in `coll`,\n * which should use an array as its result. Invoked with (item, callback).\n * @param {Function} [callback] - A callback which is called after all the\n * `iteratee` functions have finished, or an error occurs. Results is an array\n * containing the concatenated results of the `iteratee` function. Invoked with\n * (err, results).\n * @returns A Promise, if no callback is passed\n * @example\n *\n * async.concat(['dir1','dir2','dir3'], fs.readdir, function(err, files) {\n *     // files is now a list of filenames that exist in the 3 directories\n * });\n */\nfunction concat(coll, iteratee, callback) {\n    return concatLimit$1(coll, Infinity, iteratee, callback)\n}\nvar concat$1 = awaitify(concat, 3);\n\n/**\n * The same as [`concat`]{@link module:Collections.concat} but runs only a single async operation at a time.\n *\n * @name concatSeries\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.concat]{@link module:Collections.concat}\n * @category Collection\n * @alias flatMapSeries\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {AsyncFunction} iteratee - A function to apply to each item in `coll`.\n * The iteratee should complete with an array an array of results.\n * Invoked with (item, callback).\n * @param {Function} [callback] - A callback which is called after all the\n * `iteratee` functions have finished, or an error occurs. Results is an array\n * containing the concatenated results of the `iteratee` function. Invoked with\n * (err, results).\n * @returns A Promise, if no callback is passed\n */\nfunction concatSeries(coll, iteratee, callback) {\n    return concatLimit$1(coll, 1, iteratee, callback)\n}\nvar concatSeries$1 = awaitify(concatSeries, 3);\n\n/**\n * Returns a function that when called, calls-back with the values provided.\n * Useful as the first function in a [`waterfall`]{@link module:ControlFlow.waterfall}, or for plugging values in to\n * [`auto`]{@link module:ControlFlow.auto}.\n *\n * @name constant\n * @static\n * @memberOf module:Utils\n * @method\n * @category Util\n * @param {...*} arguments... - Any number of arguments to automatically invoke\n * callback with.\n * @returns {AsyncFunction} Returns a function that when invoked, automatically\n * invokes the callback with the previous given arguments.\n * @example\n *\n * async.waterfall([\n *     async.constant(42),\n *     function (value, next) {\n *         // value === 42\n *     },\n *     //...\n * ], callback);\n *\n * async.waterfall([\n *     async.constant(filename, \"utf8\"),\n *     fs.readFile,\n *     function (fileData, next) {\n *         //...\n *     }\n *     //...\n * ], callback);\n *\n * async.auto({\n *     hostname: async.constant(\"https://server.net/\"),\n *     port: findFreePort,\n *     launchServer: [\"hostname\", \"port\", function (options, cb) {\n *         startServer(options, cb);\n *     }],\n *     //...\n * }, callback);\n */\nfunction constant(...args) {\n    return function (...ignoredArgs/*, callback*/) {\n        var callback = ignoredArgs.pop();\n        return callback(null, ...args);\n    };\n}\n\nfunction _createTester(check, getResult) {\n    return (eachfn, arr, _iteratee, cb) => {\n        var testPassed = false;\n        var testResult;\n        const iteratee = wrapAsync(_iteratee);\n        eachfn(arr, (value, _, callback) => {\n            iteratee(value, (err, result) => {\n                if (err || err === false) return callback(err);\n\n                if (check(result) && !testResult) {\n                    testPassed = true;\n                    testResult = getResult(true, value);\n                    return callback(null, breakLoop);\n                }\n                callback();\n            });\n        }, err => {\n            if (err) return cb(err);\n            cb(null, testPassed ? testResult : getResult(false));\n        });\n    };\n}\n\n/**\n * Returns the first value in `coll` that passes an async truth test. The\n * `iteratee` is applied in parallel, meaning the first iteratee to return\n * `true` will fire the detect `callback` with that result. That means the\n * result might not be the first item in the original `coll` (in terms of order)\n * that passes the test.\n\n * If order within the original `coll` is important, then look at\n * [`detectSeries`]{@link module:Collections.detectSeries}.\n *\n * @name detect\n * @static\n * @memberOf module:Collections\n * @method\n * @alias find\n * @category Collections\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {AsyncFunction} iteratee - A truth test to apply to each item in `coll`.\n * The iteratee must complete with a boolean value as its result.\n * Invoked with (item, callback).\n * @param {Function} [callback] - A callback which is called as soon as any\n * iteratee returns `true`, or after all the `iteratee` functions have finished.\n * Result will be the first item in the array that passes the truth test\n * (iteratee) or the value `undefined` if none passed. Invoked with\n * (err, result).\n * @returns A Promise, if no callback is passed\n * @example\n *\n * async.detect(['file1','file2','file3'], function(filePath, callback) {\n *     fs.access(filePath, function(err) {\n *         callback(null, !err)\n *     });\n * }, function(err, result) {\n *     // result now equals the first file in the list that exists\n * });\n */\nfunction detect(coll, iteratee, callback) {\n    return _createTester(bool => bool, (res, item) => item)(eachOf$1, coll, iteratee, callback)\n}\nvar detect$1 = awaitify(detect, 3);\n\n/**\n * The same as [`detect`]{@link module:Collections.detect} but runs a maximum of `limit` async operations at a\n * time.\n *\n * @name detectLimit\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.detect]{@link module:Collections.detect}\n * @alias findLimit\n * @category Collections\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {number} limit - The maximum number of async operations at a time.\n * @param {AsyncFunction} iteratee - A truth test to apply to each item in `coll`.\n * The iteratee must complete with a boolean value as its result.\n * Invoked with (item, callback).\n * @param {Function} [callback] - A callback which is called as soon as any\n * iteratee returns `true`, or after all the `iteratee` functions have finished.\n * Result will be the first item in the array that passes the truth test\n * (iteratee) or the value `undefined` if none passed. Invoked with\n * (err, result).\n * @returns a Promise if no callback is passed\n */\nfunction detectLimit(coll, limit, iteratee, callback) {\n    return _createTester(bool => bool, (res, item) => item)(eachOfLimit(limit), coll, iteratee, callback)\n}\nvar detectLimit$1 = awaitify(detectLimit, 4);\n\n/**\n * The same as [`detect`]{@link module:Collections.detect} but runs only a single async operation at a time.\n *\n * @name detectSeries\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.detect]{@link module:Collections.detect}\n * @alias findSeries\n * @category Collections\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {AsyncFunction} iteratee - A truth test to apply to each item in `coll`.\n * The iteratee must complete with a boolean value as its result.\n * Invoked with (item, callback).\n * @param {Function} [callback] - A callback which is called as soon as any\n * iteratee returns `true`, or after all the `iteratee` functions have finished.\n * Result will be the first item in the array that passes the truth test\n * (iteratee) or the value `undefined` if none passed. Invoked with\n * (err, result).\n * @returns a Promise if no callback is passed\n */\nfunction detectSeries(coll, iteratee, callback) {\n    return _createTester(bool => bool, (res, item) => item)(eachOfLimit(1), coll, iteratee, callback)\n}\n\nvar detectSeries$1 = awaitify(detectSeries, 3);\n\nfunction consoleFunc(name) {\n    return (fn, ...args) => wrapAsync(fn)(...args, (err, ...resultArgs) => {\n        if (typeof console === 'object') {\n            if (err) {\n                if (console.error) {\n                    console.error(err);\n                }\n            } else if (console[name]) {\n                resultArgs.forEach(x => console[name](x));\n            }\n        }\n    })\n}\n\n/**\n * Logs the result of an [`async` function]{@link AsyncFunction} to the\n * `console` using `console.dir` to display the properties of the resulting object.\n * Only works in Node.js or in browsers that support `console.dir` and\n * `console.error` (such as FF and Chrome).\n * If multiple arguments are returned from the async function,\n * `console.dir` is called on each argument in order.\n *\n * @name dir\n * @static\n * @memberOf module:Utils\n * @method\n * @category Util\n * @param {AsyncFunction} function - The function you want to eventually apply\n * all arguments to.\n * @param {...*} arguments... - Any number of arguments to apply to the function.\n * @example\n *\n * // in a module\n * var hello = function(name, callback) {\n *     setTimeout(function() {\n *         callback(null, {hello: name});\n *     }, 1000);\n * };\n *\n * // in the node repl\n * node> async.dir(hello, 'world');\n * {hello: 'world'}\n */\nvar dir = consoleFunc('dir');\n\n/**\n * The post-check version of [`whilst`]{@link module:ControlFlow.whilst}. To reflect the difference in\n * the order of operations, the arguments `test` and `iteratee` are switched.\n *\n * `doWhilst` is to `whilst` as `do while` is to `while` in plain JavaScript.\n *\n * @name doWhilst\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @see [async.whilst]{@link module:ControlFlow.whilst}\n * @category Control Flow\n * @param {AsyncFunction} iteratee - A function which is called each time `test`\n * passes. Invoked with (callback).\n * @param {AsyncFunction} test - asynchronous truth test to perform after each\n * execution of `iteratee`. Invoked with (...args, callback), where `...args` are the\n * non-error args from the previous callback of `iteratee`.\n * @param {Function} [callback] - A callback which is called after the test\n * function has failed and repeated execution of `iteratee` has stopped.\n * `callback` will be passed an error and any arguments passed to the final\n * `iteratee`'s callback. Invoked with (err, [results]);\n * @returns {Promise} a promise, if no callback is passed\n */\nfunction doWhilst(iteratee, test, callback) {\n    callback = onlyOnce(callback);\n    var _fn = wrapAsync(iteratee);\n    var _test = wrapAsync(test);\n    var results;\n\n    function next(err, ...args) {\n        if (err) return callback(err);\n        if (err === false) return;\n        results = args;\n        _test(...args, check);\n    }\n\n    function check(err, truth) {\n        if (err) return callback(err);\n        if (err === false) return;\n        if (!truth) return callback(null, ...results);\n        _fn(next);\n    }\n\n    return check(null, true);\n}\n\nvar doWhilst$1 = awaitify(doWhilst, 3);\n\n/**\n * Like ['doWhilst']{@link module:ControlFlow.doWhilst}, except the `test` is inverted. Note the\n * argument ordering differs from `until`.\n *\n * @name doUntil\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @see [async.doWhilst]{@link module:ControlFlow.doWhilst}\n * @category Control Flow\n * @param {AsyncFunction} iteratee - An async function which is called each time\n * `test` fails. Invoked with (callback).\n * @param {AsyncFunction} test - asynchronous truth test to perform after each\n * execution of `iteratee`. Invoked with (...args, callback), where `...args` are the\n * non-error args from the previous callback of `iteratee`\n * @param {Function} [callback] - A callback which is called after the test\n * function has passed and repeated execution of `iteratee` has stopped. `callback`\n * will be passed an error and any arguments passed to the final `iteratee`'s\n * callback. Invoked with (err, [results]);\n * @returns {Promise} a promise, if no callback is passed\n */\nfunction doUntil(iteratee, test, callback) {\n    const _test = wrapAsync(test);\n    return doWhilst$1(iteratee, (...args) => {\n        const cb = args.pop();\n        _test(...args, (err, truth) => cb (err, !truth));\n    }, callback);\n}\n\nfunction _withoutIndex(iteratee) {\n    return (value, index, callback) => iteratee(value, callback);\n}\n\n/**\n * Applies the function `iteratee` to each item in `coll`, in parallel.\n * The `iteratee` is called with an item from the list, and a callback for when\n * it has finished. If the `iteratee` passes an error to its `callback`, the\n * main `callback` (for the `each` function) is immediately called with the\n * error.\n *\n * Note, that since this function applies `iteratee` to each item in parallel,\n * there is no guarantee that the iteratee functions will complete in order.\n *\n * @name each\n * @static\n * @memberOf module:Collections\n * @method\n * @alias forEach\n * @category Collection\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {AsyncFunction} iteratee - An async function to apply to\n * each item in `coll`. Invoked with (item, callback).\n * The array index is not passed to the iteratee.\n * If you need the index, use `eachOf`.\n * @param {Function} [callback] - A callback which is called when all\n * `iteratee` functions have finished, or an error occurs. Invoked with (err).\n * @returns {Promise} a promise, if a callback is omitted\n * @example\n *\n * // assuming openFiles is an array of file names and saveFile is a function\n * // to save the modified contents of that file:\n *\n * async.each(openFiles, saveFile, function(err){\n *   // if any of the saves produced an error, err would equal that error\n * });\n *\n * // assuming openFiles is an array of file names\n * async.each(openFiles, function(file, callback) {\n *\n *     // Perform operation on file here.\n *     console.log('Processing file ' + file);\n *\n *     if( file.length > 32 ) {\n *       console.log('This file name is too long');\n *       callback('File name too long');\n *     } else {\n *       // Do work to process file here\n *       console.log('File processed');\n *       callback();\n *     }\n * }, function(err) {\n *     // if any of the file processing produced an error, err would equal that error\n *     if( err ) {\n *       // One of the iterations produced an error.\n *       // All processing will now stop.\n *       console.log('A file failed to process');\n *     } else {\n *       console.log('All files have been processed successfully');\n *     }\n * });\n */\nfunction eachLimit(coll, iteratee, callback) {\n    return eachOf$1(coll, _withoutIndex(wrapAsync(iteratee)), callback);\n}\n\nvar each = awaitify(eachLimit, 3);\n\n/**\n * The same as [`each`]{@link module:Collections.each} but runs a maximum of `limit` async operations at a time.\n *\n * @name eachLimit\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.each]{@link module:Collections.each}\n * @alias forEachLimit\n * @category Collection\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {number} limit - The maximum number of async operations at a time.\n * @param {AsyncFunction} iteratee - An async function to apply to each item in\n * `coll`.\n * The array index is not passed to the iteratee.\n * If you need the index, use `eachOfLimit`.\n * Invoked with (item, callback).\n * @param {Function} [callback] - A callback which is called when all\n * `iteratee` functions have finished, or an error occurs. Invoked with (err).\n * @returns {Promise} a promise, if a callback is omitted\n */\nfunction eachLimit$1(coll, limit, iteratee, callback) {\n    return eachOfLimit(limit)(coll, _withoutIndex(wrapAsync(iteratee)), callback);\n}\nvar eachLimit$2 = awaitify(eachLimit$1, 4);\n\n/**\n * The same as [`each`]{@link module:Collections.each} but runs only a single async operation at a time.\n *\n * Note, that unlike [`each`]{@link module:Collections.each}, this function applies iteratee to each item\n * in series and therefore the iteratee functions will complete in order.\n\n * @name eachSeries\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.each]{@link module:Collections.each}\n * @alias forEachSeries\n * @category Collection\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {AsyncFunction} iteratee - An async function to apply to each\n * item in `coll`.\n * The array index is not passed to the iteratee.\n * If you need the index, use `eachOfSeries`.\n * Invoked with (item, callback).\n * @param {Function} [callback] - A callback which is called when all\n * `iteratee` functions have finished, or an error occurs. Invoked with (err).\n * @returns {Promise} a promise, if a callback is omitted\n */\nfunction eachSeries(coll, iteratee, callback) {\n    return eachLimit$2(coll, 1, iteratee, callback)\n}\nvar eachSeries$1 = awaitify(eachSeries, 3);\n\n/**\n * Wrap an async function and ensure it calls its callback on a later tick of\n * the event loop.  If the function already calls its callback on a next tick,\n * no extra deferral is added. This is useful for preventing stack overflows\n * (`RangeError: Maximum call stack size exceeded`) and generally keeping\n * [Zalgo](http://blog.izs.me/post/59142742143/designing-apis-for-asynchrony)\n * contained. ES2017 `async` functions are returned as-is -- they are immune\n * to Zalgo's corrupting influences, as they always resolve on a later tick.\n *\n * @name ensureAsync\n * @static\n * @memberOf module:Utils\n * @method\n * @category Util\n * @param {AsyncFunction} fn - an async function, one that expects a node-style\n * callback as its last argument.\n * @returns {AsyncFunction} Returns a wrapped function with the exact same call\n * signature as the function passed in.\n * @example\n *\n * function sometimesAsync(arg, callback) {\n *     if (cache[arg]) {\n *         return callback(null, cache[arg]); // this would be synchronous!!\n *     } else {\n *         doSomeIO(arg, callback); // this IO would be asynchronous\n *     }\n * }\n *\n * // this has a risk of stack overflows if many results are cached in a row\n * async.mapSeries(args, sometimesAsync, done);\n *\n * // this will defer sometimesAsync's callback if necessary,\n * // preventing stack overflows\n * async.mapSeries(args, async.ensureAsync(sometimesAsync), done);\n */\nfunction ensureAsync(fn) {\n    if (isAsync(fn)) return fn;\n    return function (...args/*, callback*/) {\n        var callback = args.pop();\n        var sync = true;\n        args.push((...innerArgs) => {\n            if (sync) {\n                setImmediate$1(() => callback(...innerArgs));\n            } else {\n                callback(...innerArgs);\n            }\n        });\n        fn.apply(this, args);\n        sync = false;\n    };\n}\n\n/**\n * Returns `true` if every element in `coll` satisfies an async test. If any\n * iteratee call returns `false`, the main `callback` is immediately called.\n *\n * @name every\n * @static\n * @memberOf module:Collections\n * @method\n * @alias all\n * @category Collection\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {AsyncFunction} iteratee - An async truth test to apply to each item\n * in the collection in parallel.\n * The iteratee must complete with a boolean result value.\n * Invoked with (item, callback).\n * @param {Function} [callback] - A callback which is called after all the\n * `iteratee` functions have finished. Result will be either `true` or `false`\n * depending on the values of the async tests. Invoked with (err, result).\n * @returns {Promise} a promise, if no callback provided\n * @example\n *\n * async.every(['file1','file2','file3'], function(filePath, callback) {\n *     fs.access(filePath, function(err) {\n *         callback(null, !err)\n *     });\n * }, function(err, result) {\n *     // if result is true then every file exists\n * });\n */\nfunction every(coll, iteratee, callback) {\n    return _createTester(bool => !bool, res => !res)(eachOf$1, coll, iteratee, callback)\n}\nvar every$1 = awaitify(every, 3);\n\n/**\n * The same as [`every`]{@link module:Collections.every} but runs a maximum of `limit` async operations at a time.\n *\n * @name everyLimit\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.every]{@link module:Collections.every}\n * @alias allLimit\n * @category Collection\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {number} limit - The maximum number of async operations at a time.\n * @param {AsyncFunction} iteratee - An async truth test to apply to each item\n * in the collection in parallel.\n * The iteratee must complete with a boolean result value.\n * Invoked with (item, callback).\n * @param {Function} [callback] - A callback which is called after all the\n * `iteratee` functions have finished. Result will be either `true` or `false`\n * depending on the values of the async tests. Invoked with (err, result).\n * @returns {Promise} a promise, if no callback provided\n */\nfunction everyLimit(coll, limit, iteratee, callback) {\n    return _createTester(bool => !bool, res => !res)(eachOfLimit(limit), coll, iteratee, callback)\n}\nvar everyLimit$1 = awaitify(everyLimit, 4);\n\n/**\n * The same as [`every`]{@link module:Collections.every} but runs only a single async operation at a time.\n *\n * @name everySeries\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.every]{@link module:Collections.every}\n * @alias allSeries\n * @category Collection\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {AsyncFunction} iteratee - An async truth test to apply to each item\n * in the collection in series.\n * The iteratee must complete with a boolean result value.\n * Invoked with (item, callback).\n * @param {Function} [callback] - A callback which is called after all the\n * `iteratee` functions have finished. Result will be either `true` or `false`\n * depending on the values of the async tests. Invoked with (err, result).\n * @returns {Promise} a promise, if no callback provided\n */\nfunction everySeries(coll, iteratee, callback) {\n    return _createTester(bool => !bool, res => !res)(eachOfSeries$1, coll, iteratee, callback)\n}\nvar everySeries$1 = awaitify(everySeries, 3);\n\nfunction filterArray(eachfn, arr, iteratee, callback) {\n    var truthValues = new Array(arr.length);\n    eachfn(arr, (x, index, iterCb) => {\n        iteratee(x, (err, v) => {\n            truthValues[index] = !!v;\n            iterCb(err);\n        });\n    }, err => {\n        if (err) return callback(err);\n        var results = [];\n        for (var i = 0; i < arr.length; i++) {\n            if (truthValues[i]) results.push(arr[i]);\n        }\n        callback(null, results);\n    });\n}\n\nfunction filterGeneric(eachfn, coll, iteratee, callback) {\n    var results = [];\n    eachfn(coll, (x, index, iterCb) => {\n        iteratee(x, (err, v) => {\n            if (err) return iterCb(err);\n            if (v) {\n                results.push({index, value: x});\n            }\n            iterCb(err);\n        });\n    }, err => {\n        if (err) return callback(err);\n        callback(null, results\n            .sort((a, b) => a.index - b.index)\n            .map(v => v.value));\n    });\n}\n\nfunction _filter(eachfn, coll, iteratee, callback) {\n    var filter = isArrayLike(coll) ? filterArray : filterGeneric;\n    return filter(eachfn, coll, wrapAsync(iteratee), callback);\n}\n\n/**\n * Returns a new array of all the values in `coll` which pass an async truth\n * test. This operation is performed in parallel, but the results array will be\n * in the same order as the original.\n *\n * @name filter\n * @static\n * @memberOf module:Collections\n * @method\n * @alias select\n * @category Collection\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {Function} iteratee - A truth test to apply to each item in `coll`.\n * The `iteratee` is passed a `callback(err, truthValue)`, which must be called\n * with a boolean argument once it has completed. Invoked with (item, callback).\n * @param {Function} [callback] - A callback which is called after all the\n * `iteratee` functions have finished. Invoked with (err, results).\n * @returns {Promise} a promise, if no callback provided\n * @example\n *\n * async.filter(['file1','file2','file3'], function(filePath, callback) {\n *     fs.access(filePath, function(err) {\n *         callback(null, !err)\n *     });\n * }, function(err, results) {\n *     // results now equals an array of the existing files\n * });\n */\nfunction filter (coll, iteratee, callback) {\n    return _filter(eachOf$1, coll, iteratee, callback)\n}\nvar filter$1 = awaitify(filter, 3);\n\n/**\n * The same as [`filter`]{@link module:Collections.filter} but runs a maximum of `limit` async operations at a\n * time.\n *\n * @name filterLimit\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.filter]{@link module:Collections.filter}\n * @alias selectLimit\n * @category Collection\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {number} limit - The maximum number of async operations at a time.\n * @param {Function} iteratee - A truth test to apply to each item in `coll`.\n * The `iteratee` is passed a `callback(err, truthValue)`, which must be called\n * with a boolean argument once it has completed. Invoked with (item, callback).\n * @param {Function} [callback] - A callback which is called after all the\n * `iteratee` functions have finished. Invoked with (err, results).\n * @returns {Promise} a promise, if no callback provided\n */\nfunction filterLimit (coll, limit, iteratee, callback) {\n    return _filter(eachOfLimit(limit), coll, iteratee, callback)\n}\nvar filterLimit$1 = awaitify(filterLimit, 4);\n\n/**\n * The same as [`filter`]{@link module:Collections.filter} but runs only a single async operation at a time.\n *\n * @name filterSeries\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.filter]{@link module:Collections.filter}\n * @alias selectSeries\n * @category Collection\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {Function} iteratee - A truth test to apply to each item in `coll`.\n * The `iteratee` is passed a `callback(err, truthValue)`, which must be called\n * with a boolean argument once it has completed. Invoked with (item, callback).\n * @param {Function} [callback] - A callback which is called after all the\n * `iteratee` functions have finished. Invoked with (err, results)\n * @returns {Promise} a promise, if no callback provided\n */\nfunction filterSeries (coll, iteratee, callback) {\n    return _filter(eachOfSeries$1, coll, iteratee, callback)\n}\nvar filterSeries$1 = awaitify(filterSeries, 3);\n\n/**\n * Calls the asynchronous function `fn` with a callback parameter that allows it\n * to call itself again, in series, indefinitely.\n\n * If an error is passed to the callback then `errback` is called with the\n * error, and execution stops, otherwise it will never be called.\n *\n * @name forever\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @category Control Flow\n * @param {AsyncFunction} fn - an async function to call repeatedly.\n * Invoked with (next).\n * @param {Function} [errback] - when `fn` passes an error to it's callback,\n * this function will be called, and execution stops. Invoked with (err).\n * @returns {Promise} a promise that rejects if an error occurs and an errback\n * is not passed\n * @example\n *\n * async.forever(\n *     function(next) {\n *         // next is suitable for passing to things that need a callback(err [, whatever]);\n *         // it will result in this function being called again.\n *     },\n *     function(err) {\n *         // if next is called with a value in its first parameter, it will appear\n *         // in here as 'err', and execution will stop.\n *     }\n * );\n */\nfunction forever(fn, errback) {\n    var done = onlyOnce(errback);\n    var task = wrapAsync(ensureAsync(fn));\n\n    function next(err) {\n        if (err) return done(err);\n        if (err === false) return;\n        task(next);\n    }\n    return next();\n}\nvar forever$1 = awaitify(forever, 2);\n\n/**\n * The same as [`groupBy`]{@link module:Collections.groupBy} but runs a maximum of `limit` async operations at a time.\n *\n * @name groupByLimit\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.groupBy]{@link module:Collections.groupBy}\n * @category Collection\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {number} limit - The maximum number of async operations at a time.\n * @param {AsyncFunction} iteratee - An async function to apply to each item in\n * `coll`.\n * The iteratee should complete with a `key` to group the value under.\n * Invoked with (value, callback).\n * @param {Function} [callback] - A callback which is called when all `iteratee`\n * functions have finished, or an error occurs. Result is an `Object` whoses\n * properties are arrays of values which returned the corresponding key.\n * @returns {Promise} a promise, if no callback is passed\n */\nfunction groupByLimit(coll, limit, iteratee, callback) {\n    var _iteratee = wrapAsync(iteratee);\n    return mapLimit$1(coll, limit, (val, iterCb) => {\n        _iteratee(val, (err, key) => {\n            if (err) return iterCb(err);\n            return iterCb(err, {key, val});\n        });\n    }, (err, mapResults) => {\n        var result = {};\n        // from MDN, handle object having an `hasOwnProperty` prop\n        var {hasOwnProperty} = Object.prototype;\n\n        for (var i = 0; i < mapResults.length; i++) {\n            if (mapResults[i]) {\n                var {key} = mapResults[i];\n                var {val} = mapResults[i];\n\n                if (hasOwnProperty.call(result, key)) {\n                    result[key].push(val);\n                } else {\n                    result[key] = [val];\n                }\n            }\n        }\n\n        return callback(err, result);\n    });\n}\n\nvar groupByLimit$1 = awaitify(groupByLimit, 4);\n\n/**\n * Returns a new object, where each value corresponds to an array of items, from\n * `coll`, that returned the corresponding key. That is, the keys of the object\n * correspond to the values passed to the `iteratee` callback.\n *\n * Note: Since this function applies the `iteratee` to each item in parallel,\n * there is no guarantee that the `iteratee` functions will complete in order.\n * However, the values for each key in the `result` will be in the same order as\n * the original `coll`. For Objects, the values will roughly be in the order of\n * the original Objects' keys (but this can vary across JavaScript engines).\n *\n * @name groupBy\n * @static\n * @memberOf module:Collections\n * @method\n * @category Collection\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {AsyncFunction} iteratee - An async function to apply to each item in\n * `coll`.\n * The iteratee should complete with a `key` to group the value under.\n * Invoked with (value, callback).\n * @param {Function} [callback] - A callback which is called when all `iteratee`\n * functions have finished, or an error occurs. Result is an `Object` whoses\n * properties are arrays of values which returned the corresponding key.\n * @returns {Promise} a promise, if no callback is passed\n * @example\n *\n * async.groupBy(['userId1', 'userId2', 'userId3'], function(userId, callback) {\n *     db.findById(userId, function(err, user) {\n *         if (err) return callback(err);\n *         return callback(null, user.age);\n *     });\n * }, function(err, result) {\n *     // result is object containing the userIds grouped by age\n *     // e.g. { 30: ['userId1', 'userId3'], 42: ['userId2']};\n * });\n */\nfunction groupBy (coll, iteratee, callback) {\n    return groupByLimit$1(coll, Infinity, iteratee, callback)\n}\n\n/**\n * The same as [`groupBy`]{@link module:Collections.groupBy} but runs only a single async operation at a time.\n *\n * @name groupBySeries\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.groupBy]{@link module:Collections.groupBy}\n * @category Collection\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {AsyncFunction} iteratee - An async function to apply to each item in\n * `coll`.\n * The iteratee should complete with a `key` to group the value under.\n * Invoked with (value, callback).\n * @param {Function} [callback] - A callback which is called when all `iteratee`\n * functions have finished, or an error occurs. Result is an `Object` whoses\n * properties are arrays of values which returned the corresponding key.\n * @returns {Promise} a promise, if no callback is passed\n */\nfunction groupBySeries (coll, iteratee, callback) {\n    return groupByLimit$1(coll, 1, iteratee, callback)\n}\n\n/**\n * Logs the result of an `async` function to the `console`. Only works in\n * Node.js or in browsers that support `console.log` and `console.error` (such\n * as FF and Chrome). If multiple arguments are returned from the async\n * function, `console.log` is called on each argument in order.\n *\n * @name log\n * @static\n * @memberOf module:Utils\n * @method\n * @category Util\n * @param {AsyncFunction} function - The function you want to eventually apply\n * all arguments to.\n * @param {...*} arguments... - Any number of arguments to apply to the function.\n * @example\n *\n * // in a module\n * var hello = function(name, callback) {\n *     setTimeout(function() {\n *         callback(null, 'hello ' + name);\n *     }, 1000);\n * };\n *\n * // in the node repl\n * node> async.log(hello, 'world');\n * 'hello world'\n */\nvar log = consoleFunc('log');\n\n/**\n * The same as [`mapValues`]{@link module:Collections.mapValues} but runs a maximum of `limit` async operations at a\n * time.\n *\n * @name mapValuesLimit\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.mapValues]{@link module:Collections.mapValues}\n * @category Collection\n * @param {Object} obj - A collection to iterate over.\n * @param {number} limit - The maximum number of async operations at a time.\n * @param {AsyncFunction} iteratee - A function to apply to each value and key\n * in `coll`.\n * The iteratee should complete with the transformed value as its result.\n * Invoked with (value, key, callback).\n * @param {Function} [callback] - A callback which is called when all `iteratee`\n * functions have finished, or an error occurs. `result` is a new object consisting\n * of each key from `obj`, with each transformed value on the right-hand side.\n * Invoked with (err, result).\n * @returns {Promise} a promise, if no callback is passed\n */\nfunction mapValuesLimit(obj, limit, iteratee, callback) {\n    callback = once(callback);\n    var newObj = {};\n    var _iteratee = wrapAsync(iteratee);\n    return eachOfLimit(limit)(obj, (val, key, next) => {\n        _iteratee(val, key, (err, result) => {\n            if (err) return next(err);\n            newObj[key] = result;\n            next(err);\n        });\n    }, err => callback(err, newObj));\n}\n\nvar mapValuesLimit$1 = awaitify(mapValuesLimit, 4);\n\n/**\n * A relative of [`map`]{@link module:Collections.map}, designed for use with objects.\n *\n * Produces a new Object by mapping each value of `obj` through the `iteratee`\n * function. The `iteratee` is called each `value` and `key` from `obj` and a\n * callback for when it has finished processing. Each of these callbacks takes\n * two arguments: an `error`, and the transformed item from `obj`. If `iteratee`\n * passes an error to its callback, the main `callback` (for the `mapValues`\n * function) is immediately called with the error.\n *\n * Note, the order of the keys in the result is not guaranteed.  The keys will\n * be roughly in the order they complete, (but this is very engine-specific)\n *\n * @name mapValues\n * @static\n * @memberOf module:Collections\n * @method\n * @category Collection\n * @param {Object} obj - A collection to iterate over.\n * @param {AsyncFunction} iteratee - A function to apply to each value and key\n * in `coll`.\n * The iteratee should complete with the transformed value as its result.\n * Invoked with (value, key, callback).\n * @param {Function} [callback] - A callback which is called when all `iteratee`\n * functions have finished, or an error occurs. `result` is a new object consisting\n * of each key from `obj`, with each transformed value on the right-hand side.\n * Invoked with (err, result).\n * @returns {Promise} a promise, if no callback is passed\n * @example\n *\n * async.mapValues({\n *     f1: 'file1',\n *     f2: 'file2',\n *     f3: 'file3'\n * }, function (file, key, callback) {\n *   fs.stat(file, callback);\n * }, function(err, result) {\n *     // result is now a map of stats for each file, e.g.\n *     // {\n *     //     f1: [stats for file1],\n *     //     f2: [stats for file2],\n *     //     f3: [stats for file3]\n *     // }\n * });\n */\nfunction mapValues(obj, iteratee, callback) {\n    return mapValuesLimit$1(obj, Infinity, iteratee, callback)\n}\n\n/**\n * The same as [`mapValues`]{@link module:Collections.mapValues} but runs only a single async operation at a time.\n *\n * @name mapValuesSeries\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.mapValues]{@link module:Collections.mapValues}\n * @category Collection\n * @param {Object} obj - A collection to iterate over.\n * @param {AsyncFunction} iteratee - A function to apply to each value and key\n * in `coll`.\n * The iteratee should complete with the transformed value as its result.\n * Invoked with (value, key, callback).\n * @param {Function} [callback] - A callback which is called when all `iteratee`\n * functions have finished, or an error occurs. `result` is a new object consisting\n * of each key from `obj`, with each transformed value on the right-hand side.\n * Invoked with (err, result).\n * @returns {Promise} a promise, if no callback is passed\n */\nfunction mapValuesSeries(obj, iteratee, callback) {\n    return mapValuesLimit$1(obj, 1, iteratee, callback)\n}\n\n/**\n * Caches the results of an async function. When creating a hash to store\n * function results against, the callback is omitted from the hash and an\n * optional hash function can be used.\n *\n * **Note: if the async function errs, the result will not be cached and\n * subsequent calls will call the wrapped function.**\n *\n * If no hash function is specified, the first argument is used as a hash key,\n * which may work reasonably if it is a string or a data type that converts to a\n * distinct string. Note that objects and arrays will not behave reasonably.\n * Neither will cases where the other arguments are significant. In such cases,\n * specify your own hash function.\n *\n * The cache of results is exposed as the `memo` property of the function\n * returned by `memoize`.\n *\n * @name memoize\n * @static\n * @memberOf module:Utils\n * @method\n * @category Util\n * @param {AsyncFunction} fn - The async function to proxy and cache results from.\n * @param {Function} hasher - An optional function for generating a custom hash\n * for storing results. It has all the arguments applied to it apart from the\n * callback, and must be synchronous.\n * @returns {AsyncFunction} a memoized version of `fn`\n * @example\n *\n * var slow_fn = function(name, callback) {\n *     // do something\n *     callback(null, result);\n * };\n * var fn = async.memoize(slow_fn);\n *\n * // fn can now be used as if it were slow_fn\n * fn('some name', function() {\n *     // callback\n * });\n */\nfunction memoize(fn, hasher = v => v) {\n    var memo = Object.create(null);\n    var queues = Object.create(null);\n    var _fn = wrapAsync(fn);\n    var memoized = initialParams((args, callback) => {\n        var key = hasher(...args);\n        if (key in memo) {\n            setImmediate$1(() => callback(null, ...memo[key]));\n        } else if (key in queues) {\n            queues[key].push(callback);\n        } else {\n            queues[key] = [callback];\n            _fn(...args, (err, ...resultArgs) => {\n                // #1465 don't memoize if an error occurred\n                if (!err) {\n                    memo[key] = resultArgs;\n                }\n                var q = queues[key];\n                delete queues[key];\n                for (var i = 0, l = q.length; i < l; i++) {\n                    q[i](err, ...resultArgs);\n                }\n            });\n        }\n    });\n    memoized.memo = memo;\n    memoized.unmemoized = fn;\n    return memoized;\n}\n\n/**\n * Calls `callback` on a later loop around the event loop. In Node.js this just\n * calls `process.nextTick`.  In the browser it will use `setImmediate` if\n * available, otherwise `setTimeout(callback, 0)`, which means other higher\n * priority events may precede the execution of `callback`.\n *\n * This is used internally for browser-compatibility purposes.\n *\n * @name nextTick\n * @static\n * @memberOf module:Utils\n * @method\n * @see [async.setImmediate]{@link module:Utils.setImmediate}\n * @category Util\n * @param {Function} callback - The function to call on a later loop around\n * the event loop. Invoked with (args...).\n * @param {...*} args... - any number of additional arguments to pass to the\n * callback on the next tick.\n * @example\n *\n * var call_order = [];\n * async.nextTick(function() {\n *     call_order.push('two');\n *     // call_order now equals ['one','two']\n * });\n * call_order.push('one');\n *\n * async.setImmediate(function (a, b, c) {\n *     // a, b, and c equal 1, 2, and 3\n * }, 1, 2, 3);\n */\nvar _defer$1;\n\nif (hasNextTick) {\n    _defer$1 = process.nextTick;\n} else if (hasSetImmediate) {\n    _defer$1 = setImmediate;\n} else {\n    _defer$1 = fallback;\n}\n\nvar nextTick = wrap(_defer$1);\n\nvar _parallel = awaitify((eachfn, tasks, callback) => {\n    var results = isArrayLike(tasks) ? [] : {};\n\n    eachfn(tasks, (task, key, taskCb) => {\n        wrapAsync(task)((err, ...result) => {\n            if (result.length < 2) {\n                [result] = result;\n            }\n            results[key] = result;\n            taskCb(err);\n        });\n    }, err => callback(err, results));\n}, 3);\n\n/**\n * Run the `tasks` collection of functions in parallel, without waiting until\n * the previous function has completed. If any of the functions pass an error to\n * its callback, the main `callback` is immediately called with the value of the\n * error. Once the `tasks` have completed, the results are passed to the final\n * `callback` as an array.\n *\n * **Note:** `parallel` is about kicking-off I/O tasks in parallel, not about\n * parallel execution of code.  If your tasks do not use any timers or perform\n * any I/O, they will actually be executed in series.  Any synchronous setup\n * sections for each task will happen one after the other.  JavaScript remains\n * single-threaded.\n *\n * **Hint:** Use [`reflect`]{@link module:Utils.reflect} to continue the\n * execution of other tasks when a task fails.\n *\n * It is also possible to use an object instead of an array. Each property will\n * be run as a function and the results will be passed to the final `callback`\n * as an object instead of an array. This can be a more readable way of handling\n * results from {@link async.parallel}.\n *\n * @name parallel\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @category Control Flow\n * @param {Array|Iterable|AsyncIterable|Object} tasks - A collection of\n * [async functions]{@link AsyncFunction} to run.\n * Each async function can complete with any number of optional `result` values.\n * @param {Function} [callback] - An optional callback to run once all the\n * functions have completed successfully. This function gets a results array\n * (or object) containing all the result arguments passed to the task callbacks.\n * Invoked with (err, results).\n * @returns {Promise} a promise, if a callback is not passed\n *\n * @example\n * async.parallel([\n *     function(callback) {\n *         setTimeout(function() {\n *             callback(null, 'one');\n *         }, 200);\n *     },\n *     function(callback) {\n *         setTimeout(function() {\n *             callback(null, 'two');\n *         }, 100);\n *     }\n * ],\n * // optional callback\n * function(err, results) {\n *     // the results array will equal ['one','two'] even though\n *     // the second function had a shorter timeout.\n * });\n *\n * // an example using an object instead of an array\n * async.parallel({\n *     one: function(callback) {\n *         setTimeout(function() {\n *             callback(null, 1);\n *         }, 200);\n *     },\n *     two: function(callback) {\n *         setTimeout(function() {\n *             callback(null, 2);\n *         }, 100);\n *     }\n * }, function(err, results) {\n *     // results is now equals to: {one: 1, two: 2}\n * });\n */\nfunction parallel(tasks, callback) {\n    return _parallel(eachOf$1, tasks, callback);\n}\n\n/**\n * The same as [`parallel`]{@link module:ControlFlow.parallel} but runs a maximum of `limit` async operations at a\n * time.\n *\n * @name parallelLimit\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @see [async.parallel]{@link module:ControlFlow.parallel}\n * @category Control Flow\n * @param {Array|Iterable|AsyncIterable|Object} tasks - A collection of\n * [async functions]{@link AsyncFunction} to run.\n * Each async function can complete with any number of optional `result` values.\n * @param {number} limit - The maximum number of async operations at a time.\n * @param {Function} [callback] - An optional callback to run once all the\n * functions have completed successfully. This function gets a results array\n * (or object) containing all the result arguments passed to the task callbacks.\n * Invoked with (err, results).\n * @returns {Promise} a promise, if a callback is not passed\n */\nfunction parallelLimit(tasks, limit, callback) {\n    return _parallel(eachOfLimit(limit), tasks, callback);\n}\n\n/**\n * A queue of tasks for the worker function to complete.\n * @typedef {Iterable} QueueObject\n * @memberOf module:ControlFlow\n * @property {Function} length - a function returning the number of items\n * waiting to be processed. Invoke with `queue.length()`.\n * @property {boolean} started - a boolean indicating whether or not any\n * items have been pushed and processed by the queue.\n * @property {Function} running - a function returning the number of items\n * currently being processed. Invoke with `queue.running()`.\n * @property {Function} workersList - a function returning the array of items\n * currently being processed. Invoke with `queue.workersList()`.\n * @property {Function} idle - a function returning false if there are items\n * waiting or being processed, or true if not. Invoke with `queue.idle()`.\n * @property {number} concurrency - an integer for determining how many `worker`\n * functions should be run in parallel. This property can be changed after a\n * `queue` is created to alter the concurrency on-the-fly.\n * @property {number} payload - an integer that specifies how many items are\n * passed to the worker function at a time. only applies if this is a\n * [cargo]{@link module:ControlFlow.cargo} object\n * @property {AsyncFunction} push - add a new task to the `queue`. Calls `callback`\n * once the `worker` has finished processing the task. Instead of a single task,\n * a `tasks` array can be submitted. The respective callback is used for every\n * task in the list. Invoke with `queue.push(task, [callback])`,\n * @property {AsyncFunction} unshift - add a new task to the front of the `queue`.\n * Invoke with `queue.unshift(task, [callback])`.\n * @property {AsyncFunction} pushAsync - the same as `q.push`, except this returns\n * a promise that rejects if an error occurs.\n * @property {AsyncFunction} unshirtAsync - the same as `q.unshift`, except this returns\n * a promise that rejects if an error occurs.\n * @property {Function} remove - remove items from the queue that match a test\n * function.  The test function will be passed an object with a `data` property,\n * and a `priority` property, if this is a\n * [priorityQueue]{@link module:ControlFlow.priorityQueue} object.\n * Invoked with `queue.remove(testFn)`, where `testFn` is of the form\n * `function ({data, priority}) {}` and returns a Boolean.\n * @property {Function} saturated - a function that sets a callback that is\n * called when the number of running workers hits the `concurrency` limit, and\n * further tasks will be queued.  If the callback is omitted, `q.saturated()`\n * returns a promise for the next occurrence.\n * @property {Function} unsaturated - a function that sets a callback that is\n * called when the number of running workers is less than the `concurrency` &\n * `buffer` limits, and further tasks will not be queued. If the callback is\n * omitted, `q.unsaturated()` returns a promise for the next occurrence.\n * @property {number} buffer - A minimum threshold buffer in order to say that\n * the `queue` is `unsaturated`.\n * @property {Function} empty - a function that sets a callback that is called\n * when the last item from the `queue` is given to a `worker`. If the callback\n * is omitted, `q.empty()` returns a promise for the next occurrence.\n * @property {Function} drain - a function that sets a callback that is called\n * when the last item from the `queue` has returned from the `worker`. If the\n * callback is omitted, `q.drain()` returns a promise for the next occurrence.\n * @property {Function} error - a function that sets a callback that is called\n * when a task errors. Has the signature `function(error, task)`. If the\n * callback is omitted, `error()` returns a promise that rejects on the next\n * error.\n * @property {boolean} paused - a boolean for determining whether the queue is\n * in a paused state.\n * @property {Function} pause - a function that pauses the processing of tasks\n * until `resume()` is called. Invoke with `queue.pause()`.\n * @property {Function} resume - a function that resumes the processing of\n * queued tasks when the queue is paused. Invoke with `queue.resume()`.\n * @property {Function} kill - a function that removes the `drain` callback and\n * empties remaining tasks from the queue forcing it to go idle. No more tasks\n * should be pushed to the queue after calling this function. Invoke with `queue.kill()`.\n *\n * @example\n * const q = aync.queue(worker, 2)\n * q.push(item1)\n * q.push(item2)\n * q.push(item3)\n * // queues are iterable, spread into an array to inspect\n * const items = [...q] // [item1, item2, item3]\n * // or use for of\n * for (let item of q) {\n *     console.log(item)\n * }\n *\n * q.drain(() => {\n *     console.log('all done')\n * })\n * // or\n * await q.drain()\n */\n\n/**\n * Creates a `queue` object with the specified `concurrency`. Tasks added to the\n * `queue` are processed in parallel (up to the `concurrency` limit). If all\n * `worker`s are in progress, the task is queued until one becomes available.\n * Once a `worker` completes a `task`, that `task`'s callback is called.\n *\n * @name queue\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @category Control Flow\n * @param {AsyncFunction} worker - An async function for processing a queued task.\n * If you want to handle errors from an individual task, pass a callback to\n * `q.push()`. Invoked with (task, callback).\n * @param {number} [concurrency=1] - An `integer` for determining how many\n * `worker` functions should be run in parallel.  If omitted, the concurrency\n * defaults to `1`.  If the concurrency is `0`, an error is thrown.\n * @returns {module:ControlFlow.QueueObject} A queue object to manage the tasks. Callbacks can be\n * attached as certain properties to listen for specific events during the\n * lifecycle of the queue.\n * @example\n *\n * // create a queue object with concurrency 2\n * var q = async.queue(function(task, callback) {\n *     console.log('hello ' + task.name);\n *     callback();\n * }, 2);\n *\n * // assign a callback\n * q.drain(function() {\n *     console.log('all items have been processed');\n * });\n * // or await the end\n * await q.drain()\n *\n * // assign an error callback\n * q.error(function(err, task) {\n *     console.error('task experienced an error');\n * });\n *\n * // add some items to the queue\n * q.push({name: 'foo'}, function(err) {\n *     console.log('finished processing foo');\n * });\n * // callback is optional\n * q.push({name: 'bar'});\n *\n * // add some items to the queue (batch-wise)\n * q.push([{name: 'baz'},{name: 'bay'},{name: 'bax'}], function(err) {\n *     console.log('finished processing item');\n * });\n *\n * // add some items to the front of the queue\n * q.unshift({name: 'bar'}, function (err) {\n *     console.log('finished processing bar');\n * });\n */\nfunction queue$1 (worker, concurrency) {\n    var _worker = wrapAsync(worker);\n    return queue((items, cb) => {\n        _worker(items[0], cb);\n    }, concurrency, 1);\n}\n\n// Binary min-heap implementation used for priority queue.\n// Implementation is stable, i.e. push time is considered for equal priorities\nclass Heap {\n    constructor() {\n        this.heap = [];\n        this.pushCount = Number.MIN_SAFE_INTEGER;\n    }\n\n    get length() {\n        return this.heap.length;\n    }\n\n    empty () {\n        this.heap = [];\n        return this;\n    }\n\n    percUp(index) {\n        let p;\n\n        while (index > 0 && smaller(this.heap[index], this.heap[p=parent(index)])) {\n            let t = this.heap[index];\n            this.heap[index] = this.heap[p];\n            this.heap[p] = t;\n\n            index = p;\n        }\n    }\n\n    percDown(index) {\n        let l;\n\n        while ((l=leftChi(index)) < this.heap.length) {\n            if (l+1 < this.heap.length && smaller(this.heap[l+1], this.heap[l])) {\n                l = l+1;\n            }\n\n            if (smaller(this.heap[index], this.heap[l])) {\n                break;\n            }\n\n            let t = this.heap[index];\n            this.heap[index] = this.heap[l];\n            this.heap[l] = t;\n\n            index = l;\n        }\n    }\n\n    push(node) {\n        node.pushCount = ++this.pushCount;\n        this.heap.push(node);\n        this.percUp(this.heap.length-1);\n    }\n\n    unshift(node) {\n        return this.heap.push(node);\n    }\n\n    shift() {\n        let [top] = this.heap;\n\n        this.heap[0] = this.heap[this.heap.length-1];\n        this.heap.pop();\n        this.percDown(0);\n\n        return top;\n    }\n\n    toArray() {\n        return [...this];\n    }\n\n    *[Symbol.iterator] () {\n        for (let i = 0; i < this.heap.length; i++) {\n            yield this.heap[i].data;\n        }\n    }\n\n    remove (testFn) {\n        let j = 0;\n        for (let i = 0; i < this.heap.length; i++) {\n            if (!testFn(this.heap[i])) {\n                this.heap[j] = this.heap[i];\n                j++;\n            }\n        }\n\n        this.heap.splice(j);\n\n        for (let i = parent(this.heap.length-1); i >= 0; i--) {\n            this.percDown(i);\n        }\n\n        return this;\n    }\n}\n\nfunction leftChi(i) {\n    return (i<<1)+1;\n}\n\nfunction parent(i) {\n    return ((i+1)>>1)-1;\n}\n\nfunction smaller(x, y) {\n    if (x.priority !== y.priority) {\n        return x.priority < y.priority;\n    }\n    else {\n        return x.pushCount < y.pushCount;\n    }\n}\n\n/**\n * The same as [async.queue]{@link module:ControlFlow.queue} only tasks are assigned a priority and\n * completed in ascending priority order.\n *\n * @name priorityQueue\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @see [async.queue]{@link module:ControlFlow.queue}\n * @category Control Flow\n * @param {AsyncFunction} worker - An async function for processing a queued task.\n * If you want to handle errors from an individual task, pass a callback to\n * `q.push()`.\n * Invoked with (task, callback).\n * @param {number} concurrency - An `integer` for determining how many `worker`\n * functions should be run in parallel.  If omitted, the concurrency defaults to\n * `1`.  If the concurrency is `0`, an error is thrown.\n * @returns {module:ControlFlow.QueueObject} A priorityQueue object to manage the tasks. There are two\n * differences between `queue` and `priorityQueue` objects:\n * * `push(task, priority, [callback])` - `priority` should be a number. If an\n *   array of `tasks` is given, all tasks will be assigned the same priority.\n * * The `unshift` method was removed.\n */\nfunction priorityQueue(worker, concurrency) {\n    // Start with a normal queue\n    var q = queue$1(worker, concurrency);\n\n    q._tasks = new Heap();\n\n    // Override push to accept second parameter representing priority\n    q.push = function(data, priority = 0, callback = () => {}) {\n        if (typeof callback !== 'function') {\n            throw new Error('task callback must be a function');\n        }\n        q.started = true;\n        if (!Array.isArray(data)) {\n            data = [data];\n        }\n        if (data.length === 0 && q.idle()) {\n            // call drain immediately if there are no tasks\n            return setImmediate$1(() => q.drain());\n        }\n\n        for (var i = 0, l = data.length; i < l; i++) {\n            var item = {\n                data: data[i],\n                priority,\n                callback\n            };\n\n            q._tasks.push(item);\n        }\n\n        setImmediate$1(q.process);\n    };\n\n    // Remove unshift function\n    delete q.unshift;\n\n    return q;\n}\n\n/**\n * Runs the `tasks` array of functions in parallel, without waiting until the\n * previous function has completed. Once any of the `tasks` complete or pass an\n * error to its callback, the main `callback` is immediately called. It's\n * equivalent to `Promise.race()`.\n *\n * @name race\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @category Control Flow\n * @param {Array} tasks - An array containing [async functions]{@link AsyncFunction}\n * to run. Each function can complete with an optional `result` value.\n * @param {Function} callback - A callback to run once any of the functions have\n * completed. This function gets an error or result from the first function that\n * completed. Invoked with (err, result).\n * @returns undefined\n * @example\n *\n * async.race([\n *     function(callback) {\n *         setTimeout(function() {\n *             callback(null, 'one');\n *         }, 200);\n *     },\n *     function(callback) {\n *         setTimeout(function() {\n *             callback(null, 'two');\n *         }, 100);\n *     }\n * ],\n * // main callback\n * function(err, result) {\n *     // the result will be equal to 'two' as it finishes earlier\n * });\n */\nfunction race(tasks, callback) {\n    callback = once(callback);\n    if (!Array.isArray(tasks)) return callback(new TypeError('First argument to race must be an array of functions'));\n    if (!tasks.length) return callback();\n    for (var i = 0, l = tasks.length; i < l; i++) {\n        wrapAsync(tasks[i])(callback);\n    }\n}\n\nvar race$1 = awaitify(race, 2);\n\n/**\n * Same as [`reduce`]{@link module:Collections.reduce}, only operates on `array` in reverse order.\n *\n * @name reduceRight\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.reduce]{@link module:Collections.reduce}\n * @alias foldr\n * @category Collection\n * @param {Array} array - A collection to iterate over.\n * @param {*} memo - The initial state of the reduction.\n * @param {AsyncFunction} iteratee - A function applied to each item in the\n * array to produce the next step in the reduction.\n * The `iteratee` should complete with the next state of the reduction.\n * If the iteratee complete with an error, the reduction is stopped and the\n * main `callback` is immediately called with the error.\n * Invoked with (memo, item, callback).\n * @param {Function} [callback] - A callback which is called after all the\n * `iteratee` functions have finished. Result is the reduced value. Invoked with\n * (err, result).\n * @returns {Promise} a promise, if no callback is passed\n */\nfunction reduceRight (array, memo, iteratee, callback) {\n    var reversed = [...array].reverse();\n    return reduce$1(reversed, memo, iteratee, callback);\n}\n\n/**\n * Wraps the async function in another function that always completes with a\n * result object, even when it errors.\n *\n * The result object has either the property `error` or `value`.\n *\n * @name reflect\n * @static\n * @memberOf module:Utils\n * @method\n * @category Util\n * @param {AsyncFunction} fn - The async function you want to wrap\n * @returns {Function} - A function that always passes null to it's callback as\n * the error. The second argument to the callback will be an `object` with\n * either an `error` or a `value` property.\n * @example\n *\n * async.parallel([\n *     async.reflect(function(callback) {\n *         // do some stuff ...\n *         callback(null, 'one');\n *     }),\n *     async.reflect(function(callback) {\n *         // do some more stuff but error ...\n *         callback('bad stuff happened');\n *     }),\n *     async.reflect(function(callback) {\n *         // do some more stuff ...\n *         callback(null, 'two');\n *     })\n * ],\n * // optional callback\n * function(err, results) {\n *     // values\n *     // results[0].value = 'one'\n *     // results[1].error = 'bad stuff happened'\n *     // results[2].value = 'two'\n * });\n */\nfunction reflect(fn) {\n    var _fn = wrapAsync(fn);\n    return initialParams(function reflectOn(args, reflectCallback) {\n        args.push((error, ...cbArgs) => {\n            let retVal = {};\n            if (error) {\n                retVal.error = error;\n            }\n            if (cbArgs.length > 0){\n                var value = cbArgs;\n                if (cbArgs.length <= 1) {\n                    [value] = cbArgs;\n                }\n                retVal.value = value;\n            }\n            reflectCallback(null, retVal);\n        });\n\n        return _fn.apply(this, args);\n    });\n}\n\n/**\n * A helper function that wraps an array or an object of functions with `reflect`.\n *\n * @name reflectAll\n * @static\n * @memberOf module:Utils\n * @method\n * @see [async.reflect]{@link module:Utils.reflect}\n * @category Util\n * @param {Array|Object|Iterable} tasks - The collection of\n * [async functions]{@link AsyncFunction} to wrap in `async.reflect`.\n * @returns {Array} Returns an array of async functions, each wrapped in\n * `async.reflect`\n * @example\n *\n * let tasks = [\n *     function(callback) {\n *         setTimeout(function() {\n *             callback(null, 'one');\n *         }, 200);\n *     },\n *     function(callback) {\n *         // do some more stuff but error ...\n *         callback(new Error('bad stuff happened'));\n *     },\n *     function(callback) {\n *         setTimeout(function() {\n *             callback(null, 'two');\n *         }, 100);\n *     }\n * ];\n *\n * async.parallel(async.reflectAll(tasks),\n * // optional callback\n * function(err, results) {\n *     // values\n *     // results[0].value = 'one'\n *     // results[1].error = Error('bad stuff happened')\n *     // results[2].value = 'two'\n * });\n *\n * // an example using an object instead of an array\n * let tasks = {\n *     one: function(callback) {\n *         setTimeout(function() {\n *             callback(null, 'one');\n *         }, 200);\n *     },\n *     two: function(callback) {\n *         callback('two');\n *     },\n *     three: function(callback) {\n *         setTimeout(function() {\n *             callback(null, 'three');\n *         }, 100);\n *     }\n * };\n *\n * async.parallel(async.reflectAll(tasks),\n * // optional callback\n * function(err, results) {\n *     // values\n *     // results.one.value = 'one'\n *     // results.two.error = 'two'\n *     // results.three.value = 'three'\n * });\n */\nfunction reflectAll(tasks) {\n    var results;\n    if (Array.isArray(tasks)) {\n        results = tasks.map(reflect);\n    } else {\n        results = {};\n        Object.keys(tasks).forEach(key => {\n            results[key] = reflect.call(this, tasks[key]);\n        });\n    }\n    return results;\n}\n\nfunction reject(eachfn, arr, _iteratee, callback) {\n    const iteratee = wrapAsync(_iteratee);\n    return _filter(eachfn, arr, (value, cb) => {\n        iteratee(value, (err, v) => {\n            cb(err, !v);\n        });\n    }, callback);\n}\n\n/**\n * The opposite of [`filter`]{@link module:Collections.filter}. Removes values that pass an `async` truth test.\n *\n * @name reject\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.filter]{@link module:Collections.filter}\n * @category Collection\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {Function} iteratee - An async truth test to apply to each item in\n * `coll`.\n * The should complete with a boolean value as its `result`.\n * Invoked with (item, callback).\n * @param {Function} [callback] - A callback which is called after all the\n * `iteratee` functions have finished. Invoked with (err, results).\n * @returns {Promise} a promise, if no callback is passed\n * @example\n *\n * async.reject(['file1','file2','file3'], function(filePath, callback) {\n *     fs.access(filePath, function(err) {\n *         callback(null, !err)\n *     });\n * }, function(err, results) {\n *     // results now equals an array of missing files\n *     createFiles(results);\n * });\n */\nfunction reject$1 (coll, iteratee, callback) {\n    return reject(eachOf$1, coll, iteratee, callback)\n}\nvar reject$2 = awaitify(reject$1, 3);\n\n/**\n * The same as [`reject`]{@link module:Collections.reject} but runs a maximum of `limit` async operations at a\n * time.\n *\n * @name rejectLimit\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.reject]{@link module:Collections.reject}\n * @category Collection\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {number} limit - The maximum number of async operations at a time.\n * @param {Function} iteratee - An async truth test to apply to each item in\n * `coll`.\n * The should complete with a boolean value as its `result`.\n * Invoked with (item, callback).\n * @param {Function} [callback] - A callback which is called after all the\n * `iteratee` functions have finished. Invoked with (err, results).\n * @returns {Promise} a promise, if no callback is passed\n */\nfunction rejectLimit (coll, limit, iteratee, callback) {\n    return reject(eachOfLimit(limit), coll, iteratee, callback)\n}\nvar rejectLimit$1 = awaitify(rejectLimit, 4);\n\n/**\n * The same as [`reject`]{@link module:Collections.reject} but runs only a single async operation at a time.\n *\n * @name rejectSeries\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.reject]{@link module:Collections.reject}\n * @category Collection\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {Function} iteratee - An async truth test to apply to each item in\n * `coll`.\n * The should complete with a boolean value as its `result`.\n * Invoked with (item, callback).\n * @param {Function} [callback] - A callback which is called after all the\n * `iteratee` functions have finished. Invoked with (err, results).\n * @returns {Promise} a promise, if no callback is passed\n */\nfunction rejectSeries (coll, iteratee, callback) {\n    return reject(eachOfSeries$1, coll, iteratee, callback)\n}\nvar rejectSeries$1 = awaitify(rejectSeries, 3);\n\nfunction constant$1(value) {\n    return function () {\n        return value;\n    }\n}\n\n/**\n * Attempts to get a successful response from `task` no more than `times` times\n * before returning an error. If the task is successful, the `callback` will be\n * passed the result of the successful task. If all attempts fail, the callback\n * will be passed the error and result (if any) of the final attempt.\n *\n * @name retry\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @category Control Flow\n * @see [async.retryable]{@link module:ControlFlow.retryable}\n * @param {Object|number} [opts = {times: 5, interval: 0}| 5] - Can be either an\n * object with `times` and `interval` or a number.\n * * `times` - The number of attempts to make before giving up.  The default\n *   is `5`.\n * * `interval` - The time to wait between retries, in milliseconds.  The\n *   default is `0`. The interval may also be specified as a function of the\n *   retry count (see example).\n * * `errorFilter` - An optional synchronous function that is invoked on\n *   erroneous result. If it returns `true` the retry attempts will continue;\n *   if the function returns `false` the retry flow is aborted with the current\n *   attempt's error and result being returned to the final callback.\n *   Invoked with (err).\n * * If `opts` is a number, the number specifies the number of times to retry,\n *   with the default interval of `0`.\n * @param {AsyncFunction} task - An async function to retry.\n * Invoked with (callback).\n * @param {Function} [callback] - An optional callback which is called when the\n * task has succeeded, or after the final failed attempt. It receives the `err`\n * and `result` arguments of the last attempt at completing the `task`. Invoked\n * with (err, results).\n * @returns {Promise} a promise if no callback provided\n *\n * @example\n *\n * // The `retry` function can be used as a stand-alone control flow by passing\n * // a callback, as shown below:\n *\n * // try calling apiMethod 3 times\n * async.retry(3, apiMethod, function(err, result) {\n *     // do something with the result\n * });\n *\n * // try calling apiMethod 3 times, waiting 200 ms between each retry\n * async.retry({times: 3, interval: 200}, apiMethod, function(err, result) {\n *     // do something with the result\n * });\n *\n * // try calling apiMethod 10 times with exponential backoff\n * // (i.e. intervals of 100, 200, 400, 800, 1600, ... milliseconds)\n * async.retry({\n *   times: 10,\n *   interval: function(retryCount) {\n *     return 50 * Math.pow(2, retryCount);\n *   }\n * }, apiMethod, function(err, result) {\n *     // do something with the result\n * });\n *\n * // try calling apiMethod the default 5 times no delay between each retry\n * async.retry(apiMethod, function(err, result) {\n *     // do something with the result\n * });\n *\n * // try calling apiMethod only when error condition satisfies, all other\n * // errors will abort the retry control flow and return to final callback\n * async.retry({\n *   errorFilter: function(err) {\n *     return err.message === 'Temporary error'; // only retry on a specific error\n *   }\n * }, apiMethod, function(err, result) {\n *     // do something with the result\n * });\n *\n * // to retry individual methods that are not as reliable within other\n * // control flow functions, use the `retryable` wrapper:\n * async.auto({\n *     users: api.getUsers.bind(api),\n *     payments: async.retryable(3, api.getPayments.bind(api))\n * }, function(err, results) {\n *     // do something with the results\n * });\n *\n */\nconst DEFAULT_TIMES = 5;\nconst DEFAULT_INTERVAL = 0;\n\nfunction retry(opts, task, callback) {\n    var options = {\n        times: DEFAULT_TIMES,\n        intervalFunc: constant$1(DEFAULT_INTERVAL)\n    };\n\n    if (arguments.length < 3 && typeof opts === 'function') {\n        callback = task || promiseCallback();\n        task = opts;\n    } else {\n        parseTimes(options, opts);\n        callback = callback || promiseCallback();\n    }\n\n    if (typeof task !== 'function') {\n        throw new Error(\"Invalid arguments for async.retry\");\n    }\n\n    var _task = wrapAsync(task);\n\n    var attempt = 1;\n    function retryAttempt() {\n        _task((err, ...args) => {\n            if (err === false) return\n            if (err && attempt++ < options.times &&\n                (typeof options.errorFilter != 'function' ||\n                    options.errorFilter(err))) {\n                setTimeout(retryAttempt, options.intervalFunc(attempt - 1));\n            } else {\n                callback(err, ...args);\n            }\n        });\n    }\n\n    retryAttempt();\n    return callback[PROMISE_SYMBOL]\n}\n\nfunction parseTimes(acc, t) {\n    if (typeof t === 'object') {\n        acc.times = +t.times || DEFAULT_TIMES;\n\n        acc.intervalFunc = typeof t.interval === 'function' ?\n            t.interval :\n            constant$1(+t.interval || DEFAULT_INTERVAL);\n\n        acc.errorFilter = t.errorFilter;\n    } else if (typeof t === 'number' || typeof t === 'string') {\n        acc.times = +t || DEFAULT_TIMES;\n    } else {\n        throw new Error(\"Invalid arguments for async.retry\");\n    }\n}\n\n/**\n * A close relative of [`retry`]{@link module:ControlFlow.retry}.  This method\n * wraps a task and makes it retryable, rather than immediately calling it\n * with retries.\n *\n * @name retryable\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @see [async.retry]{@link module:ControlFlow.retry}\n * @category Control Flow\n * @param {Object|number} [opts = {times: 5, interval: 0}| 5] - optional\n * options, exactly the same as from `retry`, except for a `opts.arity` that\n * is the arity of the `task` function, defaulting to `task.length`\n * @param {AsyncFunction} task - the asynchronous function to wrap.\n * This function will be passed any arguments passed to the returned wrapper.\n * Invoked with (...args, callback).\n * @returns {AsyncFunction} The wrapped function, which when invoked, will\n * retry on an error, based on the parameters specified in `opts`.\n * This function will accept the same parameters as `task`.\n * @example\n *\n * async.auto({\n *     dep1: async.retryable(3, getFromFlakyService),\n *     process: [\"dep1\", async.retryable(3, function (results, cb) {\n *         maybeProcessData(results.dep1, cb);\n *     })]\n * }, callback);\n */\nfunction retryable (opts, task) {\n    if (!task) {\n        task = opts;\n        opts = null;\n    }\n    let arity = (opts && opts.arity) || task.length;\n    if (isAsync(task)) {\n        arity += 1;\n    }\n    var _task = wrapAsync(task);\n    return initialParams((args, callback) => {\n        if (args.length < arity - 1 || callback == null) {\n            args.push(callback);\n            callback = promiseCallback();\n        }\n        function taskFn(cb) {\n            _task(...args, cb);\n        }\n\n        if (opts) retry(opts, taskFn, callback);\n        else retry(taskFn, callback);\n\n        return callback[PROMISE_SYMBOL]\n    });\n}\n\n/**\n * Run the functions in the `tasks` collection in series, each one running once\n * the previous function has completed. If any functions in the series pass an\n * error to its callback, no more functions are run, and `callback` is\n * immediately called with the value of the error. Otherwise, `callback`\n * receives an array of results when `tasks` have completed.\n *\n * It is also possible to use an object instead of an array. Each property will\n * be run as a function, and the results will be passed to the final `callback`\n * as an object instead of an array. This can be a more readable way of handling\n *  results from {@link async.series}.\n *\n * **Note** that while many implementations preserve the order of object\n * properties, the [ECMAScript Language Specification](http://www.ecma-international.org/ecma-262/5.1/#sec-8.6)\n * explicitly states that\n *\n * > The mechanics and order of enumerating the properties is not specified.\n *\n * So if you rely on the order in which your series of functions are executed,\n * and want this to work on all platforms, consider using an array.\n *\n * @name series\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @category Control Flow\n * @param {Array|Iterable|AsyncIterable|Object} tasks - A collection containing\n * [async functions]{@link AsyncFunction} to run in series.\n * Each function can complete with any number of optional `result` values.\n * @param {Function} [callback] - An optional callback to run once all the\n * functions have completed. This function gets a results array (or object)\n * containing all the result arguments passed to the `task` callbacks. Invoked\n * with (err, result).\n * @return {Promise} a promise, if no callback is passed\n * @example\n * async.series([\n *     function(callback) {\n *         // do some stuff ...\n *         callback(null, 'one');\n *     },\n *     function(callback) {\n *         // do some more stuff ...\n *         callback(null, 'two');\n *     }\n * ],\n * // optional callback\n * function(err, results) {\n *     // results is now equal to ['one', 'two']\n * });\n *\n * async.series({\n *     one: function(callback) {\n *         setTimeout(function() {\n *             callback(null, 1);\n *         }, 200);\n *     },\n *     two: function(callback){\n *         setTimeout(function() {\n *             callback(null, 2);\n *         }, 100);\n *     }\n * }, function(err, results) {\n *     // results is now equal to: {one: 1, two: 2}\n * });\n */\nfunction series(tasks, callback) {\n    return _parallel(eachOfSeries$1, tasks, callback);\n}\n\n/**\n * Returns `true` if at least one element in the `coll` satisfies an async test.\n * If any iteratee call returns `true`, the main `callback` is immediately\n * called.\n *\n * @name some\n * @static\n * @memberOf module:Collections\n * @method\n * @alias any\n * @category Collection\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {AsyncFunction} iteratee - An async truth test to apply to each item\n * in the collections in parallel.\n * The iteratee should complete with a boolean `result` value.\n * Invoked with (item, callback).\n * @param {Function} [callback] - A callback which is called as soon as any\n * iteratee returns `true`, or after all the iteratee functions have finished.\n * Result will be either `true` or `false` depending on the values of the async\n * tests. Invoked with (err, result).\n * @returns {Promise} a promise, if no callback provided\n * @example\n *\n * async.some(['file1','file2','file3'], function(filePath, callback) {\n *     fs.access(filePath, function(err) {\n *         callback(null, !err)\n *     });\n * }, function(err, result) {\n *     // if result is true then at least one of the files exists\n * });\n */\nfunction some(coll, iteratee, callback) {\n    return _createTester(Boolean, res => res)(eachOf$1, coll, iteratee, callback)\n}\nvar some$1 = awaitify(some, 3);\n\n/**\n * The same as [`some`]{@link module:Collections.some} but runs a maximum of `limit` async operations at a time.\n *\n * @name someLimit\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.some]{@link module:Collections.some}\n * @alias anyLimit\n * @category Collection\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {number} limit - The maximum number of async operations at a time.\n * @param {AsyncFunction} iteratee - An async truth test to apply to each item\n * in the collections in parallel.\n * The iteratee should complete with a boolean `result` value.\n * Invoked with (item, callback).\n * @param {Function} [callback] - A callback which is called as soon as any\n * iteratee returns `true`, or after all the iteratee functions have finished.\n * Result will be either `true` or `false` depending on the values of the async\n * tests. Invoked with (err, result).\n * @returns {Promise} a promise, if no callback provided\n */\nfunction someLimit(coll, limit, iteratee, callback) {\n    return _createTester(Boolean, res => res)(eachOfLimit(limit), coll, iteratee, callback)\n}\nvar someLimit$1 = awaitify(someLimit, 4);\n\n/**\n * The same as [`some`]{@link module:Collections.some} but runs only a single async operation at a time.\n *\n * @name someSeries\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.some]{@link module:Collections.some}\n * @alias anySeries\n * @category Collection\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {AsyncFunction} iteratee - An async truth test to apply to each item\n * in the collections in series.\n * The iteratee should complete with a boolean `result` value.\n * Invoked with (item, callback).\n * @param {Function} [callback] - A callback which is called as soon as any\n * iteratee returns `true`, or after all the iteratee functions have finished.\n * Result will be either `true` or `false` depending on the values of the async\n * tests. Invoked with (err, result).\n * @returns {Promise} a promise, if no callback provided\n */\nfunction someSeries(coll, iteratee, callback) {\n    return _createTester(Boolean, res => res)(eachOfSeries$1, coll, iteratee, callback)\n}\nvar someSeries$1 = awaitify(someSeries, 3);\n\n/**\n * Sorts a list by the results of running each `coll` value through an async\n * `iteratee`.\n *\n * @name sortBy\n * @static\n * @memberOf module:Collections\n * @method\n * @category Collection\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {AsyncFunction} iteratee - An async function to apply to each item in\n * `coll`.\n * The iteratee should complete with a value to use as the sort criteria as\n * its `result`.\n * Invoked with (item, callback).\n * @param {Function} callback - A callback which is called after all the\n * `iteratee` functions have finished, or an error occurs. Results is the items\n * from the original `coll` sorted by the values returned by the `iteratee`\n * calls. Invoked with (err, results).\n * @returns {Promise} a promise, if no callback passed\n * @example\n *\n * async.sortBy(['file1','file2','file3'], function(file, callback) {\n *     fs.stat(file, function(err, stats) {\n *         callback(err, stats.mtime);\n *     });\n * }, function(err, results) {\n *     // results is now the original array of files sorted by\n *     // modified date\n * });\n *\n * // By modifying the callback parameter the\n * // sorting order can be influenced:\n *\n * // ascending order\n * async.sortBy([1,9,3,5], function(x, callback) {\n *     callback(null, x);\n * }, function(err,result) {\n *     // result callback\n * });\n *\n * // descending order\n * async.sortBy([1,9,3,5], function(x, callback) {\n *     callback(null, x*-1);    //<- x*-1 instead of x, turns the order around\n * }, function(err,result) {\n *     // result callback\n * });\n */\nfunction sortBy (coll, iteratee, callback) {\n    var _iteratee = wrapAsync(iteratee);\n    return map$1(coll, (x, iterCb) => {\n        _iteratee(x, (err, criteria) => {\n            if (err) return iterCb(err);\n            iterCb(err, {value: x, criteria});\n        });\n    }, (err, results) => {\n        if (err) return callback(err);\n        callback(null, results.sort(comparator).map(v => v.value));\n    });\n\n    function comparator(left, right) {\n        var a = left.criteria, b = right.criteria;\n        return a < b ? -1 : a > b ? 1 : 0;\n    }\n}\nvar sortBy$1 = awaitify(sortBy, 3);\n\n/**\n * Sets a time limit on an asynchronous function. If the function does not call\n * its callback within the specified milliseconds, it will be called with a\n * timeout error. The code property for the error object will be `'ETIMEDOUT'`.\n *\n * @name timeout\n * @static\n * @memberOf module:Utils\n * @method\n * @category Util\n * @param {AsyncFunction} asyncFn - The async function to limit in time.\n * @param {number} milliseconds - The specified time limit.\n * @param {*} [info] - Any variable you want attached (`string`, `object`, etc)\n * to timeout Error for more information..\n * @returns {AsyncFunction} Returns a wrapped function that can be used with any\n * of the control flow functions.\n * Invoke this function with the same parameters as you would `asyncFunc`.\n * @example\n *\n * function myFunction(foo, callback) {\n *     doAsyncTask(foo, function(err, data) {\n *         // handle errors\n *         if (err) return callback(err);\n *\n *         // do some stuff ...\n *\n *         // return processed data\n *         return callback(null, data);\n *     });\n * }\n *\n * var wrapped = async.timeout(myFunction, 1000);\n *\n * // call `wrapped` as you would `myFunction`\n * wrapped({ bar: 'bar' }, function(err, data) {\n *     // if `myFunction` takes < 1000 ms to execute, `err`\n *     // and `data` will have their expected values\n *\n *     // else `err` will be an Error with the code 'ETIMEDOUT'\n * });\n */\nfunction timeout(asyncFn, milliseconds, info) {\n    var fn = wrapAsync(asyncFn);\n\n    return initialParams((args, callback) => {\n        var timedOut = false;\n        var timer;\n\n        function timeoutCallback() {\n            var name = asyncFn.name || 'anonymous';\n            var error  = new Error('Callback function \"' + name + '\" timed out.');\n            error.code = 'ETIMEDOUT';\n            if (info) {\n                error.info = info;\n            }\n            timedOut = true;\n            callback(error);\n        }\n\n        args.push((...cbArgs) => {\n            if (!timedOut) {\n                callback(...cbArgs);\n                clearTimeout(timer);\n            }\n        });\n\n        // setup timer and call original function\n        timer = setTimeout(timeoutCallback, milliseconds);\n        fn(...args);\n    });\n}\n\nfunction range(size) {\n    var result = Array(size);\n    while (size--) {\n        result[size] = size;\n    }\n    return result;\n}\n\n/**\n * The same as [times]{@link module:ControlFlow.times} but runs a maximum of `limit` async operations at a\n * time.\n *\n * @name timesLimit\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @see [async.times]{@link module:ControlFlow.times}\n * @category Control Flow\n * @param {number} count - The number of times to run the function.\n * @param {number} limit - The maximum number of async operations at a time.\n * @param {AsyncFunction} iteratee - The async function to call `n` times.\n * Invoked with the iteration index and a callback: (n, next).\n * @param {Function} callback - see [async.map]{@link module:Collections.map}.\n * @returns {Promise} a promise, if no callback is provided\n */\nfunction timesLimit(count, limit, iteratee, callback) {\n    var _iteratee = wrapAsync(iteratee);\n    return mapLimit$1(range(count), limit, _iteratee, callback);\n}\n\n/**\n * Calls the `iteratee` function `n` times, and accumulates results in the same\n * manner you would use with [map]{@link module:Collections.map}.\n *\n * @name times\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @see [async.map]{@link module:Collections.map}\n * @category Control Flow\n * @param {number} n - The number of times to run the function.\n * @param {AsyncFunction} iteratee - The async function to call `n` times.\n * Invoked with the iteration index and a callback: (n, next).\n * @param {Function} callback - see {@link module:Collections.map}.\n * @returns {Promise} a promise, if no callback is provided\n * @example\n *\n * // Pretend this is some complicated async factory\n * var createUser = function(id, callback) {\n *     callback(null, {\n *         id: 'user' + id\n *     });\n * };\n *\n * // generate 5 users\n * async.times(5, function(n, next) {\n *     createUser(n, function(err, user) {\n *         next(err, user);\n *     });\n * }, function(err, users) {\n *     // we should now have 5 users\n * });\n */\nfunction times (n, iteratee, callback) {\n    return timesLimit(n, Infinity, iteratee, callback)\n}\n\n/**\n * The same as [times]{@link module:ControlFlow.times} but runs only a single async operation at a time.\n *\n * @name timesSeries\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @see [async.times]{@link module:ControlFlow.times}\n * @category Control Flow\n * @param {number} n - The number of times to run the function.\n * @param {AsyncFunction} iteratee - The async function to call `n` times.\n * Invoked with the iteration index and a callback: (n, next).\n * @param {Function} callback - see {@link module:Collections.map}.\n * @returns {Promise} a promise, if no callback is provided\n */\nfunction timesSeries (n, iteratee, callback) {\n    return timesLimit(n, 1, iteratee, callback)\n}\n\n/**\n * A relative of `reduce`.  Takes an Object or Array, and iterates over each\n * element in parallel, each step potentially mutating an `accumulator` value.\n * The type of the accumulator defaults to the type of collection passed in.\n *\n * @name transform\n * @static\n * @memberOf module:Collections\n * @method\n * @category Collection\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {*} [accumulator] - The initial state of the transform.  If omitted,\n * it will default to an empty Object or Array, depending on the type of `coll`\n * @param {AsyncFunction} iteratee - A function applied to each item in the\n * collection that potentially modifies the accumulator.\n * Invoked with (accumulator, item, key, callback).\n * @param {Function} [callback] - A callback which is called after all the\n * `iteratee` functions have finished. Result is the transformed accumulator.\n * Invoked with (err, result).\n * @returns {Promise} a promise, if no callback provided\n * @example\n *\n * async.transform([1,2,3], function(acc, item, index, callback) {\n *     // pointless async:\n *     process.nextTick(function() {\n *         acc[index] = item * 2\n *         callback(null)\n *     });\n * }, function(err, result) {\n *     // result is now equal to [2, 4, 6]\n * });\n *\n * @example\n *\n * async.transform({a: 1, b: 2, c: 3}, function (obj, val, key, callback) {\n *     setImmediate(function () {\n *         obj[key] = val * 2;\n *         callback();\n *     })\n * }, function (err, result) {\n *     // result is equal to {a: 2, b: 4, c: 6}\n * })\n */\nfunction transform (coll, accumulator, iteratee, callback) {\n    if (arguments.length <= 3 && typeof accumulator === 'function') {\n        callback = iteratee;\n        iteratee = accumulator;\n        accumulator = Array.isArray(coll) ? [] : {};\n    }\n    callback = once(callback || promiseCallback());\n    var _iteratee = wrapAsync(iteratee);\n\n    eachOf$1(coll, (v, k, cb) => {\n        _iteratee(accumulator, v, k, cb);\n    }, err => callback(err, accumulator));\n    return callback[PROMISE_SYMBOL]\n}\n\n/**\n * It runs each task in series but stops whenever any of the functions were\n * successful. If one of the tasks were successful, the `callback` will be\n * passed the result of the successful task. If all tasks fail, the callback\n * will be passed the error and result (if any) of the final attempt.\n *\n * @name tryEach\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @category Control Flow\n * @param {Array|Iterable|AsyncIterable|Object} tasks - A collection containing functions to\n * run, each function is passed a `callback(err, result)` it must call on\n * completion with an error `err` (which can be `null`) and an optional `result`\n * value.\n * @param {Function} [callback] - An optional callback which is called when one\n * of the tasks has succeeded, or all have failed. It receives the `err` and\n * `result` arguments of the last attempt at completing the `task`. Invoked with\n * (err, results).\n * @returns {Promise} a promise, if no callback is passed\n * @example\n * async.tryEach([\n *     function getDataFromFirstWebsite(callback) {\n *         // Try getting the data from the first website\n *         callback(err, data);\n *     },\n *     function getDataFromSecondWebsite(callback) {\n *         // First website failed,\n *         // Try getting the data from the backup website\n *         callback(err, data);\n *     }\n * ],\n * // optional callback\n * function(err, results) {\n *     Now do something with the data.\n * });\n *\n */\nfunction tryEach(tasks, callback) {\n    var error = null;\n    var result;\n    return eachSeries$1(tasks, (task, taskCb) => {\n        wrapAsync(task)((err, ...args) => {\n            if (err === false) return taskCb(err);\n\n            if (args.length < 2) {\n                [result] = args;\n            } else {\n                result = args;\n            }\n            error = err;\n            taskCb(err ? null : {});\n        });\n    }, () => callback(error, result));\n}\n\nvar tryEach$1 = awaitify(tryEach);\n\n/**\n * Undoes a [memoize]{@link module:Utils.memoize}d function, reverting it to the original,\n * unmemoized form. Handy for testing.\n *\n * @name unmemoize\n * @static\n * @memberOf module:Utils\n * @method\n * @see [async.memoize]{@link module:Utils.memoize}\n * @category Util\n * @param {AsyncFunction} fn - the memoized function\n * @returns {AsyncFunction} a function that calls the original unmemoized function\n */\nfunction unmemoize(fn) {\n    return (...args) => {\n        return (fn.unmemoized || fn)(...args);\n    };\n}\n\n/**\n * Repeatedly call `iteratee`, while `test` returns `true`. Calls `callback` when\n * stopped, or an error occurs.\n *\n * @name whilst\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @category Control Flow\n * @param {AsyncFunction} test - asynchronous truth test to perform before each\n * execution of `iteratee`. Invoked with ().\n * @param {AsyncFunction} iteratee - An async function which is called each time\n * `test` passes. Invoked with (callback).\n * @param {Function} [callback] - A callback which is called after the test\n * function has failed and repeated execution of `iteratee` has stopped. `callback`\n * will be passed an error and any arguments passed to the final `iteratee`'s\n * callback. Invoked with (err, [results]);\n * @returns {Promise} a promise, if no callback is passed\n * @example\n *\n * var count = 0;\n * async.whilst(\n *     function test(cb) { cb(null, count < 5); },\n *     function iter(callback) {\n *         count++;\n *         setTimeout(function() {\n *             callback(null, count);\n *         }, 1000);\n *     },\n *     function (err, n) {\n *         // 5 seconds have passed, n = 5\n *     }\n * );\n */\nfunction whilst(test, iteratee, callback) {\n    callback = onlyOnce(callback);\n    var _fn = wrapAsync(iteratee);\n    var _test = wrapAsync(test);\n    var results = [];\n\n    function next(err, ...rest) {\n        if (err) return callback(err);\n        results = rest;\n        if (err === false) return;\n        _test(check);\n    }\n\n    function check(err, truth) {\n        if (err) return callback(err);\n        if (err === false) return;\n        if (!truth) return callback(null, ...results);\n        _fn(next);\n    }\n\n    return _test(check);\n}\nvar whilst$1 = awaitify(whilst, 3);\n\n/**\n * Repeatedly call `iteratee` until `test` returns `true`. Calls `callback` when\n * stopped, or an error occurs. `callback` will be passed an error and any\n * arguments passed to the final `iteratee`'s callback.\n *\n * The inverse of [whilst]{@link module:ControlFlow.whilst}.\n *\n * @name until\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @see [async.whilst]{@link module:ControlFlow.whilst}\n * @category Control Flow\n * @param {AsyncFunction} test - asynchronous truth test to perform before each\n * execution of `iteratee`. Invoked with (callback).\n * @param {AsyncFunction} iteratee - An async function which is called each time\n * `test` fails. Invoked with (callback).\n * @param {Function} [callback] - A callback which is called after the test\n * function has passed and repeated execution of `iteratee` has stopped. `callback`\n * will be passed an error and any arguments passed to the final `iteratee`'s\n * callback. Invoked with (err, [results]);\n * @returns {Promise} a promise, if a callback is not passed\n *\n * @example\n * const results = []\n * let finished = false\n * async.until(function test(page, cb) {\n *     cb(null, finished)\n * }, function iter(next) {\n *     fetchPage(url, (err, body) => {\n *         if (err) return next(err)\n *         results = results.concat(body.objects)\n *         finished = !!body.next\n *         next(err)\n *     })\n * }, function done (err) {\n *     // all pages have been fetched\n * })\n */\nfunction until(test, iteratee, callback) {\n    const _test = wrapAsync(test);\n    return whilst$1((cb) => _test((err, truth) => cb (err, !truth)), iteratee, callback);\n}\n\n/**\n * Runs the `tasks` array of functions in series, each passing their results to\n * the next in the array. However, if any of the `tasks` pass an error to their\n * own callback, the next function is not executed, and the main `callback` is\n * immediately called with the error.\n *\n * @name waterfall\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @category Control Flow\n * @param {Array} tasks - An array of [async functions]{@link AsyncFunction}\n * to run.\n * Each function should complete with any number of `result` values.\n * The `result` values will be passed as arguments, in order, to the next task.\n * @param {Function} [callback] - An optional callback to run once all the\n * functions have completed. This will be passed the results of the last task's\n * callback. Invoked with (err, [results]).\n * @returns undefined\n * @example\n *\n * async.waterfall([\n *     function(callback) {\n *         callback(null, 'one', 'two');\n *     },\n *     function(arg1, arg2, callback) {\n *         // arg1 now equals 'one' and arg2 now equals 'two'\n *         callback(null, 'three');\n *     },\n *     function(arg1, callback) {\n *         // arg1 now equals 'three'\n *         callback(null, 'done');\n *     }\n * ], function (err, result) {\n *     // result now equals 'done'\n * });\n *\n * // Or, with named functions:\n * async.waterfall([\n *     myFirstFunction,\n *     mySecondFunction,\n *     myLastFunction,\n * ], function (err, result) {\n *     // result now equals 'done'\n * });\n * function myFirstFunction(callback) {\n *     callback(null, 'one', 'two');\n * }\n * function mySecondFunction(arg1, arg2, callback) {\n *     // arg1 now equals 'one' and arg2 now equals 'two'\n *     callback(null, 'three');\n * }\n * function myLastFunction(arg1, callback) {\n *     // arg1 now equals 'three'\n *     callback(null, 'done');\n * }\n */\nfunction waterfall (tasks, callback) {\n    callback = once(callback);\n    if (!Array.isArray(tasks)) return callback(new Error('First argument to waterfall must be an array of functions'));\n    if (!tasks.length) return callback();\n    var taskIndex = 0;\n\n    function nextTask(args) {\n        var task = wrapAsync(tasks[taskIndex++]);\n        task(...args, onlyOnce(next));\n    }\n\n    function next(err, ...args) {\n        if (err === false) return\n        if (err || taskIndex === tasks.length) {\n            return callback(err, ...args);\n        }\n        nextTask(args);\n    }\n\n    nextTask([]);\n}\n\nvar waterfall$1 = awaitify(waterfall);\n\n/**\n * An \"async function\" in the context of Async is an asynchronous function with\n * a variable number of parameters, with the final parameter being a callback.\n * (`function (arg1, arg2, ..., callback) {}`)\n * The final callback is of the form `callback(err, results...)`, which must be\n * called once the function is completed.  The callback should be called with a\n * Error as its first argument to signal that an error occurred.\n * Otherwise, if no error occurred, it should be called with `null` as the first\n * argument, and any additional `result` arguments that may apply, to signal\n * successful completion.\n * The callback must be called exactly once, ideally on a later tick of the\n * JavaScript event loop.\n *\n * This type of function is also referred to as a \"Node-style async function\",\n * or a \"continuation passing-style function\" (CPS). Most of the methods of this\n * library are themselves CPS/Node-style async functions, or functions that\n * return CPS/Node-style async functions.\n *\n * Wherever we accept a Node-style async function, we also directly accept an\n * [ES2017 `async` function]{@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/async_function}.\n * In this case, the `async` function will not be passed a final callback\n * argument, and any thrown error will be used as the `err` argument of the\n * implicit callback, and the return value will be used as the `result` value.\n * (i.e. a `rejected` of the returned Promise becomes the `err` callback\n * argument, and a `resolved` value becomes the `result`.)\n *\n * Note, due to JavaScript limitations, we can only detect native `async`\n * functions and not transpilied implementations.\n * Your environment must have `async`/`await` support for this to work.\n * (e.g. Node > v7.6, or a recent version of a modern browser).\n * If you are using `async` functions through a transpiler (e.g. Babel), you\n * must still wrap the function with [asyncify]{@link module:Utils.asyncify},\n * because the `async function` will be compiled to an ordinary function that\n * returns a promise.\n *\n * @typedef {Function} AsyncFunction\n * @static\n */\n\nvar index = {\n    apply,\n    applyEach: applyEach$1,\n    applyEachSeries,\n    asyncify,\n    auto,\n    autoInject,\n    cargo,\n    cargoQueue: cargo$1,\n    compose,\n    concat: concat$1,\n    concatLimit: concatLimit$1,\n    concatSeries: concatSeries$1,\n    constant,\n    detect: detect$1,\n    detectLimit: detectLimit$1,\n    detectSeries: detectSeries$1,\n    dir,\n    doUntil,\n    doWhilst: doWhilst$1,\n    each,\n    eachLimit: eachLimit$2,\n    eachOf: eachOf$1,\n    eachOfLimit: eachOfLimit$2,\n    eachOfSeries: eachOfSeries$1,\n    eachSeries: eachSeries$1,\n    ensureAsync,\n    every: every$1,\n    everyLimit: everyLimit$1,\n    everySeries: everySeries$1,\n    filter: filter$1,\n    filterLimit: filterLimit$1,\n    filterSeries: filterSeries$1,\n    forever: forever$1,\n    groupBy,\n    groupByLimit: groupByLimit$1,\n    groupBySeries,\n    log,\n    map: map$1,\n    mapLimit: mapLimit$1,\n    mapSeries: mapSeries$1,\n    mapValues,\n    mapValuesLimit: mapValuesLimit$1,\n    mapValuesSeries,\n    memoize,\n    nextTick,\n    parallel,\n    parallelLimit,\n    priorityQueue,\n    queue: queue$1,\n    race: race$1,\n    reduce: reduce$1,\n    reduceRight,\n    reflect,\n    reflectAll,\n    reject: reject$2,\n    rejectLimit: rejectLimit$1,\n    rejectSeries: rejectSeries$1,\n    retry,\n    retryable,\n    seq,\n    series,\n    setImmediate: setImmediate$1,\n    some: some$1,\n    someLimit: someLimit$1,\n    someSeries: someSeries$1,\n    sortBy: sortBy$1,\n    timeout,\n    times,\n    timesLimit,\n    timesSeries,\n    transform,\n    tryEach: tryEach$1,\n    unmemoize,\n    until,\n    waterfall: waterfall$1,\n    whilst: whilst$1,\n\n    // aliases\n    all: every$1,\n    allLimit: everyLimit$1,\n    allSeries: everySeries$1,\n    any: some$1,\n    anyLimit: someLimit$1,\n    anySeries: someSeries$1,\n    find: detect$1,\n    findLimit: detectLimit$1,\n    findSeries: detectSeries$1,\n    flatMap: concat$1,\n    flatMapLimit: concatLimit$1,\n    flatMapSeries: concatSeries$1,\n    forEach: each,\n    forEachSeries: eachSeries$1,\n    forEachLimit: eachLimit$2,\n    forEachOf: eachOf$1,\n    forEachOfSeries: eachOfSeries$1,\n    forEachOfLimit: eachOfLimit$2,\n    inject: reduce$1,\n    foldl: reduce$1,\n    foldr: reduceRight,\n    select: filter$1,\n    selectLimit: filterLimit$1,\n    selectSeries: filterSeries$1,\n    wrapSync: asyncify,\n    during: whilst$1,\n    doDuring: doWhilst$1\n};\n\nexport default index;\nexport { apply, applyEach$1 as applyEach, applyEachSeries, asyncify, auto, autoInject, cargo, cargo$1 as cargoQueue, compose, concat$1 as concat, concatLimit$1 as concatLimit, concatSeries$1 as concatSeries, constant, detect$1 as detect, detectLimit$1 as detectLimit, detectSeries$1 as detectSeries, dir, doUntil, doWhilst$1 as doWhilst, each, eachLimit$2 as eachLimit, eachOf$1 as eachOf, eachOfLimit$2 as eachOfLimit, eachOfSeries$1 as eachOfSeries, eachSeries$1 as eachSeries, ensureAsync, every$1 as every, everyLimit$1 as everyLimit, everySeries$1 as everySeries, filter$1 as filter, filterLimit$1 as filterLimit, filterSeries$1 as filterSeries, forever$1 as forever, groupBy, groupByLimit$1 as groupByLimit, groupBySeries, log, map$1 as map, mapLimit$1 as mapLimit, mapSeries$1 as mapSeries, mapValues, mapValuesLimit$1 as mapValuesLimit, mapValuesSeries, memoize, nextTick, parallel, parallelLimit, priorityQueue, queue$1 as queue, race$1 as race, reduce$1 as reduce, reduceRight, reflect, reflectAll, reject$2 as reject, rejectLimit$1 as rejectLimit, rejectSeries$1 as rejectSeries, retry, retryable, seq, series, setImmediate$1 as setImmediate, some$1 as some, someLimit$1 as someLimit, someSeries$1 as someSeries, sortBy$1 as sortBy, timeout, times, timesLimit, timesSeries, transform, tryEach$1 as tryEach, unmemoize, until, waterfall$1 as waterfall, whilst$1 as whilst, every$1 as all, everyLimit$1 as allLimit, everySeries$1 as allSeries, some$1 as any, someLimit$1 as anyLimit, someSeries$1 as anySeries, detect$1 as find, detectLimit$1 as findLimit, detectSeries$1 as findSeries, concat$1 as flatMap, concatLimit$1 as flatMapLimit, concatSeries$1 as flatMapSeries, each as forEach, eachSeries$1 as forEachSeries, eachLimit$2 as forEachLimit, eachOf$1 as forEachOf, eachOfSeries$1 as forEachOfSeries, eachOfLimit$2 as forEachOfLimit, reduce$1 as inject, reduce$1 as foldl, reduceRight as foldr, filter$1 as select, filterLimit$1 as selectLimit, filterSeries$1 as selectSeries, asyncify as wrapSync, whilst$1 as during, doWhilst$1 as doDuring };\n","/** @module cacheManager/multiCaching */\nvar async = require('async');\nvar CallbackFiller = require('./callback_filler');\nvar utils = require('./utils');\nvar isObject = utils.isObject;\nvar parseWrapArguments = utils.parseWrapArguments;\n\n/**\n * Module that lets you specify a hierarchy of caches.\n *\n * @param {array} caches - Array of caching objects.\n * @param {object} [options]\n * @param {function} [options.isCacheableValue] - A callback function which is called\n *   with every value returned from cache or from a wrapped function. This lets you specify\n *   which values should and should not be cached. If the function returns true, it will be\n *   stored in cache. By default it caches everything except undefined.\n *\n *   If an underlying cache specifies its own isCacheableValue function, that function will\n *   be used instead of the multiCaching's _isCacheableValue function.\n */\nvar multiCaching = function(caches, options) {\n    var self = {};\n    options = options || {};\n\n    var Promise = options.promiseDependency || global.Promise;\n\n    if (!Array.isArray(caches)) {\n        throw new Error('multiCaching requires an array of caches');\n    }\n\n    var callbackFiller = new CallbackFiller();\n    var backgroundQueue = new Set();\n\n    if (typeof options.isCacheableValue === 'function') {\n        self._isCacheableValue = options.isCacheableValue;\n    } else {\n        self._isCacheableValue = function(value) {\n            return value !== undefined;\n        };\n    }\n\n    /**\n     * If the underlying cache specifies its own isCacheableValue function (such\n     * as how node-cache-manager-redis does), use that function, otherwise use\n     * self._isCacheableValue function.\n     */\n    function getIsCacheableValueFunction(cache) {\n        if (cache.store && typeof cache.store.isCacheableValue === 'function') {\n            return cache.store.isCacheableValue.bind(cache.store);\n        } else {\n            return self._isCacheableValue;\n        }\n    }\n\n    function getFromHighestPriorityCachePromise() {\n        var args = Array.prototype.slice.apply(arguments).filter(function(v) {\n            return typeof v !== 'undefined';\n        });\n\n        return new Promise(function(resolve, reject) {\n            var cb = function(err, result) {\n                if (err) {\n                    return reject(err);\n                }\n                resolve(result);\n            };\n            args.push(cb);\n            getFromHighestPriorityCache.apply(null, args);\n        });\n    }\n\n    function getFromHighestPriorityCache() {\n        var args = Array.prototype.slice.apply(arguments).filter(function(v) {\n            return typeof v !== 'undefined';\n        });\n        var cb;\n        var options = {};\n\n        if (typeof args[args.length - 1] === 'function') {\n            cb = args.pop();\n        }\n\n        if (!cb) {\n            return getFromHighestPriorityCachePromise.apply(this, args);\n        }\n\n        if (isObject(args[args.length - 1])) {\n            options = args.pop();\n        }\n\n        /**\n         * Keep a copy of the keys to retrieve\n         */\n        var keys = Array.prototype.slice.apply(args);\n        var multi = keys.length > 1;\n\n        /**\n         * Then put back the options in the args Array\n         */\n        args.push(options);\n\n        if (multi) {\n            /**\n             * Keep track of the keys left to fetch accross the caches\n             */\n            var keysToFetch = Array.prototype.slice.apply(keys);\n\n            /**\n             * Hash to save our multi keys result\n             */\n            var mapResult = {};\n        }\n\n        var i = 0;\n        async.eachSeries(caches, function(cache, next) {\n            var callback = function(err, result) {\n                if (err) {\n                    return next(err);\n                }\n\n                var _isCacheableValue = getIsCacheableValueFunction(cache);\n\n                if (multi) {\n                    addResultToMap(result, _isCacheableValue);\n\n                    if (keysToFetch.length === 0 || i === caches.length - 1) {\n                        // Return an Array with the values merged from all the caches\n                        return cb(null, keys.map(function(k) {\n                            return mapResult[k] || undefined;\n                        }), i);\n                    }\n                } else if (_isCacheableValue(result)) {\n                    // break out of async loop.\n                    return cb(err, result, i);\n                }\n\n                i += 1;\n                next();\n            };\n\n            if (multi) {\n                if (typeof cache.store.mget !== 'function') {\n                    /**\n                     * Silently fail for store that don't support mget()\n                     */\n                    return callback(null, []);\n                }\n                var _args = Array.prototype.slice.apply(keysToFetch);\n                _args.push(options);\n                _args.push(callback);\n                cache.store.mget.apply(cache.store, _args);\n            } else {\n                try {\n                    cache.store.get(args[0], options, callback);\n                } catch (err) {\n                    callback(err);\n                }\n            }\n        }, function(err, result) {\n            return cb(err, result);\n        });\n\n        function addResultToMap(result, isCacheable) {\n            var key;\n            var diff = 0;\n\n            /**\n             * We loop through the result and if the value\n             * is cacheable we add it to the mapResult hash\n             * and remove the key to fetch from the \"keysToFetch\" array\n             */\n            result.forEach(function(res, i) {\n                if (isCacheable(res)) {\n                    key = keysToFetch[i - diff];\n\n                    // Add the result to our map\n                    mapResult[key] = res;\n\n                    // delete key from our keysToFetch array\n                    keysToFetch.splice(i - diff, 1);\n                    diff += 1;\n                }\n            });\n        }\n    }\n\n    function setInMultipleCachesPromise() {\n        var args = Array.prototype.slice.apply(arguments);\n\n        return new Promise(function(resolve, reject) {\n            var cb = function(err, result) {\n                if (err) {\n                    return reject(err);\n                }\n                resolve(result);\n            };\n            args.push(cb);\n            setInMultipleCaches.apply(null, args);\n        });\n    }\n\n    function setInMultipleCaches() {\n        var args = Array.prototype.slice.apply(arguments);\n        var _caches = Array.isArray(args[0]) ? args.shift() : caches;\n\n        var cb;\n        var options = {};\n\n        if (typeof args[args.length - 1] === 'function') {\n            cb = args.pop();\n        }\n\n        if (!cb) {\n            return setInMultipleCachesPromise.apply(this, args);\n        }\n\n        if (args.length % 2 > 0 && isObject(args[args.length - 1])) {\n            options = args.pop();\n        }\n\n        var length = args.length;\n        var multi = length > 2;\n        var i;\n\n        async.each(_caches, function(cache, next) {\n            var _isCacheableValue = getIsCacheableValueFunction(cache);\n            var keysValues = Array.prototype.slice.apply(args);\n\n            /**\n             * We filter out the keys *not* cacheable\n             */\n            for (i = 0; i < length; i += 2) {\n                if (!_isCacheableValue(keysValues[i + 1])) {\n                    keysValues.splice(i, 2);\n                }\n            }\n\n            if (keysValues.length === 0) {\n                return next();\n            }\n\n            var cacheOptions = options;\n            if (typeof options.ttl === 'function') {\n                /**\n                 * Dynamically set the ttl by context depending of the store\n                 */\n                cacheOptions = {};\n                cacheOptions.ttl = options.ttl(keysValues, cache.store.name);\n            }\n\n            if (multi) {\n                if (typeof cache.store.mset !== 'function') {\n                    /**\n                     * Silently fail for store that don't support mset()\n                     */\n                    return next();\n                }\n                keysValues.push(cacheOptions);\n                keysValues.push(next);\n\n                cache.store.mset.apply(cache.store, keysValues);\n            } else {\n                cache.store.set(keysValues[0], keysValues[1], cacheOptions, next);\n            }\n        }, function(err, result) {\n            cb(err, result);\n        });\n    }\n\n    function getAndPassUpPromise(key) {\n        return new Promise(function(resolve, reject) {\n            self.getAndPassUp(key, function(err, result) {\n                if (err) {\n                    return reject(err);\n                }\n                resolve(result);\n            });\n        });\n    }\n\n    /**\n     * Looks for an item in cache tiers.\n     * When a key is found in a lower cache, all higher levels are updated.\n     *\n     * @param {string} key\n     * @param {function} cb\n     */\n    self.getAndPassUp = function(key, cb) {\n        if (!cb) {\n            return getAndPassUpPromise(key);\n        }\n\n        getFromHighestPriorityCache(key, function(err, result, index) {\n            if (err) {\n                return cb(err);\n            }\n\n            if (index) {\n                var cachesToUpdate = caches.slice(0, index);\n                async.each(cachesToUpdate, function(cache, next) {\n                    var _isCacheableValue = getIsCacheableValueFunction(cache);\n                    if (_isCacheableValue(result)) {\n                        // We rely on the cache module's default TTL\n                        cache.set(key, result, next);\n                    }\n                });\n            }\n\n            return cb(err, result);\n        });\n    };\n\n    function wrapPromise(key, promise, options) {\n        return new Promise(function(resolve, reject) {\n            self.wrap(key, function(cb) {\n                Promise.resolve()\n                    .then(promise)\n                    .then(function(result) {\n                        cb(null, result);\n                    })\n                    .catch(cb);\n            }, options, function(err, result) {\n                if (err) {\n                    return reject(err);\n                }\n                resolve(result);\n            });\n        });\n    }\n\n    function handleBackgroundRefresh(caches, index, key, work, options) {\n        if (caches[index].refreshThreshold && !backgroundQueue.has(key)) {\n            backgroundQueue.add(key);\n            caches[index].checkRefreshThreshold(key, function(err, isExpiring) {\n                if (err) {\n                    backgroundQueue.delete(key);\n                    return;\n                }\n                if (isExpiring) {\n                    work(function(workErr, workData) {\n                        if (workErr || !self._isCacheableValue(workData)) {\n                            backgroundQueue.delete(key);\n                            return;\n                        }\n                        var args = [caches, key, workData, options, function() {\n                            backgroundQueue.delete(key);\n                        }];\n                        setInMultipleCaches.apply(null, args);\n                    });\n                } else {\n                    backgroundQueue.delete(key);\n                }\n            });\n        }\n    }\n\n    /**\n     * Wraps a function in one or more caches.\n     * Has same API as regular caching module.\n     *\n     * If a key doesn't exist in any cache, it gets set in all caches.\n     * If a key exists in a high-priority (e.g., first) cache, it gets returned immediately\n     * without getting set in other lower-priority caches.\n     * If a key doesn't exist in a higher-priority cache but exists in a lower-priority\n     * cache, it gets set in all higher-priority caches.\n     * You can pass any number of keys as long as the wrapped function returns\n     * an array with the same number of values and in the same order.\n     *\n     * @function\n     * @name wrap\n     *\n     * @param {string} key - The cache key to use in cache operations. Can be one or many.\n     * @param {function} work - The function to wrap\n     * @param {object} [options] - options passed to `set` function\n     * @param {function} cb\n     */\n    self.wrap = function() {\n        var parsedArgs = parseWrapArguments(Array.prototype.slice.apply(arguments));\n        var keys = parsedArgs.keys;\n        var work = parsedArgs.work;\n        var options = parsedArgs.options;\n        var cb = parsedArgs.cb;\n\n        if (!cb) {\n            keys.push(work);\n            keys.push(options);\n            return wrapPromise.apply(this, keys);\n        }\n\n        if (keys.length > 1) {\n            /**\n             * Handle more than 1 key\n             */\n            return wrapMultiple(keys, work, options, cb);\n        }\n\n        var key = keys[0];\n\n        var hasKey = callbackFiller.has(key);\n        callbackFiller.add(key, {cb: cb});\n        if (hasKey) { return; }\n\n        getFromHighestPriorityCache(key, function(err, result, index) {\n            if (err) {\n                return callbackFiller.fill(key, err);\n            } else if (self._isCacheableValue(result)) {\n                handleBackgroundRefresh(caches, index, key, work, options);\n                var cachesToUpdate = caches.slice(0, index);\n                var args = [cachesToUpdate, key, result, options, function(err) {\n                    callbackFiller.fill(key, err, result);\n                }];\n\n                setInMultipleCaches.apply(null, args);\n            } else {\n                work(function(err, data) {\n                    if (err) {\n                        return callbackFiller.fill(key, err);\n                    }\n\n                    if (!self._isCacheableValue(data)) {\n                        return callbackFiller.fill(key, err, data);\n                    }\n\n                    var args = [caches, key, data, options, function(err) {\n                        callbackFiller.fill(key, err, data);\n                    }];\n\n                    setInMultipleCaches.apply(null, args);\n                });\n            }\n        });\n    };\n\n    function wrapMultiple(keys, work, options, cb) {\n        /**\n         * We create a unique key for the multiple keys\n         * by concatenating them\n         */\n        var combinedKey = keys.reduce(function(acc, k) {\n            return acc + k;\n        }, '');\n\n        var hasKey = callbackFiller.has(combinedKey);\n        callbackFiller.add(combinedKey, {cb: cb});\n        if (hasKey) { return; }\n\n        keys.push(options);\n        keys.push(onResult);\n\n        /**\n         * Get from all the caches. If multiple keys have been passed,\n         * we'll go through all the caches and merge the result\n         */\n        getFromHighestPriorityCache.apply(this, keys);\n\n        function onResult(err, result, index) {\n            if (err) {\n                return done(err);\n            }\n\n            /**\n             * If all the values returned are cacheable we don't need\n             * to call our \"work\" method and the values returned by the cache\n             * are valid. If one or more of the values is not cacheable\n             * the cache result is not valid.\n             */\n            var cacheOK = result.filter(function(_result) {\n                return self._isCacheableValue(_result);\n            }).length === result.length;\n\n            if (!cacheOK) {\n                /**\n                 * We need to fetch the data first\n                 */\n                return work(workCallback);\n            }\n\n            var cachesToUpdate = caches.slice(0, index);\n\n            /**\n             * Prepare arguments to set the values in\n             * higher priority caches\n             */\n            var _args = [cachesToUpdate];\n\n            /**\n             * Add the {key, value} pair\n             */\n            result.forEach(function(value, i) {\n                _args.push(keys[i]);\n                _args.push(value);\n            });\n\n            /**\n             * Add options and final callback\n             */\n            _args.push(options);\n            _args.push(function(err) {\n                done(err, result);\n            });\n\n            return setInMultipleCaches.apply(null, _args);\n\n            /**\n             * Wrapped function callback\n             */\n            function workCallback(err, data) {\n                if (err) {\n                    return done(err);\n                }\n\n                /**\n                 * Prepare arguments for \"setInMultipleCaches\"\n                 */\n                var _args;\n\n                _args = [];\n                data.forEach(function(value, i) {\n                    /**\n                     * Add the {key, value} pair to the args\n                     * array that we will send to mset()\n                     */\n                    if (self._isCacheableValue(value)) {\n                        _args.push(keys[i]);\n                        _args.push(value);\n                    }\n                });\n                // If no key,value --> exit\n                if (_args.length === 0) {\n                    return done(null);\n                }\n\n                /**\n                 * Add options and final callback\n                 */\n                _args.push(options);\n                _args.push(function(err) {\n                    done(err, data);\n                });\n\n                setInMultipleCaches.apply(null, _args);\n            }\n\n            /**\n             * Final callback\n             */\n            function done(err, data) {\n                callbackFiller.fill(combinedKey, err, data);\n            }\n        }\n    }\n\n    /**\n     * Set value in all caches\n     *\n     * @function\n     * @name set\n     *\n     * @param {string} key\n     * @param {*} value\n     * @param {object} [options] to pass to underlying set function.\n     * @param {function} [cb]\n     */\n    self.set = setInMultipleCaches;\n\n    /**\n     * Set multiple values in all caches\n     * Accepts an unlimited pair of {key, value}\n     *\n     * @function\n     * @name mset\n     *\n     * @param {string} key\n     * @param {*} value\n     * @param {string} [key2]\n     * @param {*} [value2]\n     * @param {object} [options] to pass to underlying set function.\n     * @param {function} [cb]\n     */\n    self.mset = setInMultipleCaches;\n\n    /**\n     * Get value from highest level cache that has stored it.\n     *\n     * @function\n     * @name get\n     *\n     * @param {string} key\n     * @param {object} [options] to pass to underlying get function.\n     * @param {function} cb\n     */\n    self.get = getFromHighestPriorityCache;\n\n    /**\n     * Get multiple value from highest level cache that has stored it.\n     * If some values are not found, the next highest cache is used\n     * until either all keys are found or all caches have been fetched.\n     * Accepts an unlimited number of keys.\n     *\n     * @function\n     * @name mget\n     *\n     * @param {string} key key to get (any number)\n     * @param {object} [options] to pass to underlying get function.\n     * @param {function} cb optional callback\n     */\n    self.mget = getFromHighestPriorityCache;\n\n    /**\n     * Delete value from all caches.\n     *\n     * @function\n     * @name del\n     *\n     * @param {string} key\n     * @param {object} [options] to pass to underlying del function.\n     * @param {function} cb\n     */\n    self.del = function() {\n        var args = Array.prototype.slice.apply(arguments);\n        var cb;\n        var options = {};\n\n        if (typeof args[args.length - 1] === 'function') {\n            cb = args.pop();\n        }\n\n        if (isObject(args[args.length - 1])) {\n            options = args.pop();\n        }\n\n        args.push(options);\n        async.each(caches, function(cache, next) {\n            var _args = Array.prototype.slice.apply(args);\n            _args.push(next);\n            cache.store.del.apply(cache.store, _args);\n        }, cb);\n    };\n\n    /**\n     * Reset all caches.\n     *\n     * @function\n     * @name reset\n     *\n     * @param {function} cb\n     */\n    self.reset = function(cb) {\n        async.each(caches, function(cache, next) {\n            cache.store.reset(next);\n        }, cb);\n    };\n\n    return self;\n};\n\nmodule.exports = multiCaching;\n","/** @namespace cacheManager */\nvar cacheManager = {\n    caching: require('./caching'),\n    multiCaching: require('./multi_caching')\n};\n\nmodule.exports = cacheManager;\n","module.exports = require('./lib');\n","/*\n * Nest @common\n * Copyright(c) 2017 - 2021 Kamil Mysliwiec\n * https://nestjs.com\n * MIT Licensed\n */\nimport 'reflect-metadata';\n\nexport * from './cache';\nexport * from './decorators';\nexport * from './enums';\nexport * from './exceptions';\nexport * from './file-stream';\nexport * from './http';\nexport {\n  Abstract,\n  ArgumentMetadata,\n  ArgumentsHost,\n  BeforeApplicationShutdown,\n  CallHandler,\n  CanActivate,\n  ClassProvider,\n  ContextType,\n  DynamicModule,\n  ExceptionFilter,\n  ExecutionContext,\n  ExistingProvider,\n  FactoryProvider,\n  ForwardReference,\n  HttpServer,\n  INestApplication,\n  INestApplicationContext,\n  INestMicroservice,\n  InjectionToken,\n  IntrospectionResult,\n  MessageEvent,\n  MiddlewareConsumer,\n  ModuleMetadata,\n  NestApplicationOptions,\n  NestHybridApplicationOptions,\n  NestInterceptor,\n  NestMiddleware,\n  NestModule,\n  OnApplicationBootstrap,\n  OnApplicationShutdown,\n  OnModuleDestroy,\n  OnModuleInit,\n  OptionalFactoryDependency,\n  Paramtype,\n  PipeTransform,\n  Provider,\n  RpcExceptionFilter,\n  Scope,\n  ScopeOptions,\n  Type,\n  ValidationError,\n  ValueProvider,\n  VersioningOptions,\n  VERSION_NEUTRAL,\n  WebSocketAdapter,\n  WsExceptionFilter,\n  WsMessageHandler,\n} from './interfaces';\nexport * from './pipes';\nexport * from './serializer';\nexport * from './services';\nexport * from './utils';\n","export * from './cache.constants';\nexport * from './cache.module';\nexport * from './decorators';\nexport * from './interceptors';\nexport * from './interfaces';\n","export const CACHE_MANAGER = 'CACHE_MANAGER';\nexport const CACHE_MODULE_OPTIONS = 'CACHE_MODULE_OPTIONS';\nexport const CACHE_KEY_METADATA = 'cache_module:cache_key';\nexport const CACHE_TTL_METADATA = 'cache_module:cache_ttl';\n","import { Module } from '../decorators';\nimport { DynamicModule, Provider } from '../interfaces';\nimport { CACHE_MANAGER, CACHE_MODULE_OPTIONS } from './cache.constants';\nimport { createCacheManager } from './cache.providers';\nimport {\n  CacheModuleAsyncOptions,\n  CacheModuleOptions,\n  CacheOptionsFactory,\n} from './interfaces/cache-module.interface';\n\n/**\n * Module that provides Nest cache-manager.\n *\n * @see [Caching](https://docs.nestjs.com/techniques/caching)\n *\n * @publicApi\n */\n@Module({\n  providers: [createCacheManager()],\n  exports: [CACHE_MANAGER],\n})\nexport class CacheModule {\n  /**\n   * Configure the cache manager statically.\n   *\n   * @param options options to configure the cache manager\n   *\n   * @see [Customize caching](https://docs.nestjs.com/techniques/caching#customize-caching)\n   */\n  static register<StoreConfig extends Record<any, any> = Record<string, any>>(\n    options: CacheModuleOptions<StoreConfig> = {} as any,\n  ): DynamicModule {\n    return {\n      module: CacheModule,\n      global: options.isGlobal,\n      providers: [{ provide: CACHE_MODULE_OPTIONS, useValue: options }],\n    };\n  }\n\n  /**\n   * Configure the cache manager dynamically.\n   *\n   * @param options method for dynamically supplying cache manager configuration\n   * options\n   *\n   * @see [Async configuration](https://docs.nestjs.com/techniques/caching#async-configuration)\n   */\n  static registerAsync<\n    StoreConfig extends Record<any, any> = Record<string, any>,\n  >(options: CacheModuleAsyncOptions<StoreConfig>): DynamicModule {\n    return {\n      module: CacheModule,\n      global: options.isGlobal,\n      imports: options.imports,\n      providers: [\n        ...this.createAsyncProviders<StoreConfig>(options),\n        ...(options.extraProviders || []),\n      ],\n    };\n  }\n\n  private static createAsyncProviders<StoreConfig extends Record<any, any>>(\n    options: CacheModuleAsyncOptions<StoreConfig>,\n  ): Provider[] {\n    if (options.useExisting || options.useFactory) {\n      return [this.createAsyncOptionsProvider(options)];\n    }\n    return [\n      this.createAsyncOptionsProvider(options),\n      {\n        provide: options.useClass,\n        useClass: options.useClass,\n      },\n    ];\n  }\n\n  private static createAsyncOptionsProvider<\n    StoreConfig extends Record<any, any>,\n  >(options: CacheModuleAsyncOptions<StoreConfig>): Provider {\n    if (options.useFactory) {\n      return {\n        provide: CACHE_MODULE_OPTIONS,\n        useFactory: options.useFactory,\n        inject: options.inject || [],\n      };\n    }\n    return {\n      provide: CACHE_MODULE_OPTIONS,\n      useFactory: async (optionsFactory: CacheOptionsFactory<StoreConfig>) =>\n        optionsFactory.createCacheOptions(),\n      inject: [options.useExisting || options.useClass],\n    };\n  }\n}\n","export * from './core';\nexport * from './modules';\nexport * from './http';\n","export * from './bind.decorator';\nexport * from './catch.decorator';\nexport * from './controller.decorator';\nexport * from './dependencies.decorator';\nexport * from './exception-filters.decorator';\nexport * from './inject.decorator';\nexport * from './injectable.decorator';\nexport * from './optional.decorator';\nexport * from './set-metadata.decorator';\nexport * from './use-guards.decorator';\nexport * from './use-interceptors.decorator';\nexport * from './use-pipes.decorator';\nexport * from './apply-decorators';\nexport * from './version.decorator';\n","/**\n * Decorator that binds *parameter decorators* to the method that follows.\n *\n * Useful when the language doesn't provide a 'Parameter Decorator' feature\n * (i.e., vanilla JavaScript).\n *\n * @param decorators one or more parameter decorators (e.g., `Req()`)\n *\n * @publicApi\n */\nexport function Bind(...decorators: any[]): MethodDecorator {\n  return <T>(\n    target: object,\n    key: string | symbol,\n    descriptor: TypedPropertyDescriptor<T>,\n  ) => {\n    decorators.forEach((fn, index) => fn(target, key, index));\n    return descriptor;\n  };\n}\n","import { CATCH_WATERMARK, FILTER_CATCH_EXCEPTIONS } from '../../constants';\nimport { Type, Abstract } from '../../interfaces';\n\n/**\n * Decorator that marks a class as a Nest exception filter. An exception filter\n * handles exceptions thrown by or not handled by your application code.\n *\n * The decorated class must implement the `ExceptionFilter` interface.\n *\n * @param exceptions one or more exception *types* specifying\n * the exceptions to be caught and handled by this filter.\n *\n * @see [Exception Filters](https://docs.nestjs.com/exception-filters)\n *\n * @usageNotes\n * Exception filters are applied using the `@UseFilters()` decorator, or (globally)\n * with `app.useGlobalFilters()`.\n *\n * @publicApi\n */\nexport function Catch(\n  ...exceptions: Array<Type<any> | Abstract<any>>\n): ClassDecorator {\n  return (target: object) => {\n    Reflect.defineMetadata(CATCH_WATERMARK, true, target);\n    Reflect.defineMetadata(FILTER_CATCH_EXCEPTIONS, exceptions, target);\n  };\n}\n","export const MODULE_METADATA = {\n  IMPORTS: 'imports',\n  PROVIDERS: 'providers',\n  CONTROLLERS: 'controllers',\n  EXPORTS: 'exports',\n};\nexport const GLOBAL_MODULE_METADATA = '__module:global__';\nexport const HOST_METADATA = 'host';\nexport const PATH_METADATA = 'path';\nexport const PARAMTYPES_METADATA = 'design:paramtypes';\nexport const SELF_DECLARED_DEPS_METADATA = 'self:paramtypes';\nexport const OPTIONAL_DEPS_METADATA = 'optional:paramtypes';\nexport const PROPERTY_DEPS_METADATA = 'self:properties_metadata';\nexport const OPTIONAL_PROPERTY_DEPS_METADATA = 'optional:properties_metadata';\nexport const SCOPE_OPTIONS_METADATA = 'scope:options';\nexport const METHOD_METADATA = 'method';\nexport const ROUTE_ARGS_METADATA = '__routeArguments__';\nexport const CUSTOM_ROUTE_AGRS_METADATA = '__customRouteArgs__';\nexport const EXCEPTION_FILTERS_METADATA = '__exceptionFilters__';\nexport const FILTER_CATCH_EXCEPTIONS = '__filterCatchExceptions__';\nexport const PIPES_METADATA = '__pipes__';\nexport const GUARDS_METADATA = '__guards__';\nexport const RENDER_METADATA = '__renderTemplate__';\nexport const INTERCEPTORS_METADATA = '__interceptors__';\nexport const HTTP_CODE_METADATA = '__httpCode__';\nexport const MODULE_PATH = '__module_path__';\nexport const HEADERS_METADATA = '__headers__';\nexport const REDIRECT_METADATA = '__redirect__';\nexport const RESPONSE_PASSTHROUGH_METADATA = '__responsePassthrough__';\nexport const SSE_METADATA = '__sse__';\nexport const VERSION_METADATA = '__version__';\nexport const INJECTABLE_WATERMARK = '__injectable__';\nexport const CONTROLLER_WATERMARK = '__controller__';\nexport const CATCH_WATERMARK = '__catch__';\n","import {\n  CONTROLLER_WATERMARK,\n  HOST_METADATA,\n  PATH_METADATA,\n  SCOPE_OPTIONS_METADATA,\n  VERSION_METADATA,\n} from '../../constants';\nimport { ScopeOptions } from '../../interfaces/scope-options.interface';\nimport { VersionOptions } from '../../interfaces/version-options.interface';\nimport { isString, isUndefined } from '../../utils/shared.utils';\n\n/**\n * Interface defining options that can be passed to `@Controller()` decorator\n *\n * @publicApi\n */\nexport interface ControllerOptions extends ScopeOptions, VersionOptions {\n  /**\n   * Specifies an optional `route path prefix`.  The prefix is pre-pended to the\n   * path specified in any request decorator in the class.\n   *\n   * Supported only by HTTP-based applications (does not apply to non-HTTP microservices).\n   *\n   * @see [Routing](https://docs.nestjs.com/controllers#routing)\n   */\n  path?: string | string[];\n\n  /**\n   * Specifies an optional HTTP Request host filter.  When configured, methods\n   * within the controller will only be routed if the request host matches the\n   * specified value.\n   *\n   * @see [Routing](https://docs.nestjs.com/controllers#routing)\n   */\n  host?: string | RegExp | Array<string | RegExp>;\n}\n\n/**\n * Decorator that marks a class as a Nest controller that can receive inbound\n * requests and produce responses.\n *\n * An HTTP Controller responds to inbound HTTP Requests and produces HTTP Responses.\n * It defines a class that provides the context for one or more related route\n * handlers that correspond to HTTP request methods and associated routes\n * for example `GET /api/profile`, `POST /users/resume`.\n *\n * A Microservice Controller responds to requests as well as events, running over\n * a variety of transports [(read more here)](https://docs.nestjs.com/microservices/basics).\n * It defines a class that provides a context for one or more message or event\n * handlers.\n *\n * @see [Controllers](https://docs.nestjs.com/controllers)\n * @see [Microservices](https://docs.nestjs.com/microservices/basics#request-response)\n *\n * @publicApi\n */\nexport function Controller(): ClassDecorator;\n\n/**\n * Decorator that marks a class as a Nest controller that can receive inbound\n * requests and produce responses.\n *\n * An HTTP Controller responds to inbound HTTP Requests and produces HTTP Responses.\n * It defines a class that provides the context for one or more related route\n * handlers that correspond to HTTP request methods and associated routes\n * for example `GET /api/profile`, `POST /users/resume`.\n *\n * A Microservice Controller responds to requests as well as events, running over\n * a variety of transports [(read more here)](https://docs.nestjs.com/microservices/basics).\n * It defines a class that provides a context for one or more message or event\n * handlers.\n *\n * @param {string, Array} prefix string that defines a `route path prefix`.  The prefix\n * is pre-pended to the path specified in any request decorator in the class.\n *\n * @see [Routing](https://docs.nestjs.com/controllers#routing)\n * @see [Controllers](https://docs.nestjs.com/controllers)\n * @see [Microservices](https://docs.nestjs.com/microservices/basics#request-response)\n *\n * @publicApi\n */\nexport function Controller(prefix: string | string[]): ClassDecorator;\n\n/**\n * Decorator that marks a class as a Nest controller that can receive inbound\n * requests and produce responses.\n *\n * An HTTP Controller responds to inbound HTTP Requests and produces HTTP Responses.\n * It defines a class that provides the context for one or more related route\n * handlers that correspond to HTTP request methods and associated routes\n * for example `GET /api/profile`, `POST /users/resume`.\n *\n * A Microservice Controller responds to requests as well as events, running over\n * a variety of transports [(read more here)](https://docs.nestjs.com/microservices/basics).\n * It defines a class that provides a context for one or more message or event\n * handlers.\n *\n * @param {object} options configuration object specifying:\n *\n * - `scope` - symbol that determines the lifetime of a Controller instance.\n * [See Scope](https://docs.nestjs.com/fundamentals/injection-scopes#usage) for\n * more details.\n * - `prefix` - string that defines a `route path prefix`.  The prefix\n * is pre-pended to the path specified in any request decorator in the class.\n * - `version` - string, array of strings, or Symbol that defines the version\n * of all routes in the class. [See Versioning](https://docs.nestjs.com/techniques/versioning)\n * for more details.\n *\n * @see [Routing](https://docs.nestjs.com/controllers#routing)\n * @see [Controllers](https://docs.nestjs.com/controllers)\n * @see [Microservices](https://docs.nestjs.com/microservices/basics#request-response)\n * @see [Versioning](https://docs.nestjs.com/techniques/versioning)\n *\n * @publicApi\n */\nexport function Controller(options: ControllerOptions): ClassDecorator;\n\n/**\n * Decorator that marks a class as a Nest controller that can receive inbound\n * requests and produce responses.\n *\n * An HTTP Controller responds to inbound HTTP Requests and produces HTTP Responses.\n * It defines a class that provides the context for one or more related route\n * handlers that correspond to HTTP request methods and associated routes\n * for example `GET /api/profile`, `POST /users/resume`\n *\n * A Microservice Controller responds to requests as well as events, running over\n * a variety of transports [(read more here)](https://docs.nestjs.com/microservices/basics).\n * It defines a class that provides a context for one or more message or event\n * handlers.\n *\n * @param prefixOrOptions a `route path prefix` or a `ControllerOptions` object.\n * A `route path prefix` is pre-pended to the path specified in any request decorator\n * in the class. `ControllerOptions` is an options configuration object specifying:\n * - `scope` - symbol that determines the lifetime of a Controller instance.\n * [See Scope](https://docs.nestjs.com/fundamentals/injection-scopes#usage) for\n * more details.\n * - `prefix` - string that defines a `route path prefix`.  The prefix\n * is pre-pended to the path specified in any request decorator in the class.\n * - `version` - string, array of strings, or Symbol that defines the version\n * of all routes in the class. [See Versioning](https://docs.nestjs.com/techniques/versioning)\n * for more details.\n *\n * @see [Routing](https://docs.nestjs.com/controllers#routing)\n * @see [Controllers](https://docs.nestjs.com/controllers)\n * @see [Microservices](https://docs.nestjs.com/microservices/basics#request-response)\n * @see [Scope](https://docs.nestjs.com/fundamentals/injection-scopes#usage)\n * @see [Versioning](https://docs.nestjs.com/techniques/versioning)\n *\n * @publicApi\n */\nexport function Controller(\n  prefixOrOptions?: string | string[] | ControllerOptions,\n): ClassDecorator {\n  const defaultPath = '/';\n\n  const [path, host, scopeOptions, versionOptions] = isUndefined(\n    prefixOrOptions,\n  )\n    ? [defaultPath, undefined, undefined, undefined]\n    : isString(prefixOrOptions) || Array.isArray(prefixOrOptions)\n    ? [prefixOrOptions, undefined, undefined, undefined]\n    : [\n        prefixOrOptions.path || defaultPath,\n        prefixOrOptions.host,\n        { scope: prefixOrOptions.scope },\n        Array.isArray(prefixOrOptions.version)\n          ? Array.from(new Set(prefixOrOptions.version))\n          : prefixOrOptions.version,\n      ];\n\n  return (target: object) => {\n    Reflect.defineMetadata(CONTROLLER_WATERMARK, true, target);\n    Reflect.defineMetadata(PATH_METADATA, path, target);\n    Reflect.defineMetadata(HOST_METADATA, host, target);\n    Reflect.defineMetadata(SCOPE_OPTIONS_METADATA, scopeOptions, target);\n    Reflect.defineMetadata(VERSION_METADATA, versionOptions, target);\n  };\n}\n","/* eslint-disable @typescript-eslint/no-use-before-define */\nexport const isUndefined = (obj: any): obj is undefined =>\n  typeof obj === 'undefined';\n\nexport const isObject = (fn: any): fn is object =>\n  !isNil(fn) && typeof fn === 'object';\n\nexport const isPlainObject = (fn: any): fn is object => {\n  if (!isObject(fn)) {\n    return false;\n  }\n  const proto = Object.getPrototypeOf(fn);\n  if (proto === null) {\n    return true;\n  }\n  const ctor =\n    Object.prototype.hasOwnProperty.call(proto, 'constructor') &&\n    proto.constructor;\n  return (\n    typeof ctor === 'function' &&\n    ctor instanceof ctor &&\n    Function.prototype.toString.call(ctor) ===\n      Function.prototype.toString.call(Object)\n  );\n};\n\nexport const addLeadingSlash = (path?: string): string =>\n  path && typeof path === 'string'\n    ? path.charAt(0) !== '/'\n      ? '/' + path\n      : path\n    : '';\n\n/**\n * Deprecated. Use the \"addLeadingSlash\" function instead.\n * @deprecated\n */\nexport const validatePath = addLeadingSlash;\n\nexport const normalizePath = (path?: string): string =>\n  path\n    ? path.startsWith('/')\n      ? ('/' + path.replace(/\\/+$/, '')).replace(/\\/+/g, '/')\n      : '/' + path.replace(/\\/+$/, '')\n    : '/';\n\nexport const stripEndSlash = (path: string) =>\n  path[path.length - 1] === '/' ? path.slice(0, path.length - 1) : path;\n\nexport const isFunction = (val: any): boolean => typeof val === 'function';\nexport const isString = (val: any): val is string => typeof val === 'string';\nexport const isNumber = (val: any): val is number => typeof val === 'number';\nexport const isConstructor = (val: any): boolean => val === 'constructor';\nexport const isNil = (val: any): val is null | undefined =>\n  isUndefined(val) || val === null;\nexport const isEmpty = (array: any): boolean => !(array && array.length > 0);\nexport const isSymbol = (val: any): val is symbol => typeof val === 'symbol';\n","import { PARAMTYPES_METADATA } from '../../constants';\n\nexport function flatten<T extends Array<unknown> = any>(\n  arr: T,\n): T extends Array<infer R> ? R : never {\n  const flat = [].concat(...arr);\n  return flat.some(Array.isArray) ? flatten(flat) : flat;\n}\n\n/**\n * Decorator that sets required dependencies (required with a vanilla JavaScript objects)\n */\nexport const Dependencies = (\n  ...dependencies: Array<unknown>\n): ClassDecorator => {\n  const flattenDeps = flatten(dependencies);\n  return (target: object) => {\n    Reflect.defineMetadata(PARAMTYPES_METADATA, flattenDeps, target);\n  };\n};\n","/* eslint-disable @typescript-eslint/no-use-before-define */\nimport { EXCEPTION_FILTERS_METADATA } from '../../constants';\nimport { ExceptionFilter } from '../../index';\nimport { extendArrayMetadata } from '../../utils/extend-metadata.util';\nimport { isFunction } from '../../utils/shared.utils';\nimport { validateEach } from '../../utils/validate-each.util';\n\n/**\n * Decorator that binds exception filters to the scope of the controller or\n * method, depending on its context.\n *\n * When `@UseFilters` is used at the controller level, the filter will be\n * applied to every handler (method) in the controller.\n *\n * When `@UseFilters` is used at the individual handler level, the filter\n * will apply only to that specific method.\n *\n * @param filters exception filter instance or class, or a list of exception\n * filter instances or classes.\n *\n * @see [Exception filters](https://docs.nestjs.com/exception-filters)\n *\n * @usageNotes\n * Exception filters can also be set up globally for all controllers and routes\n * using `app.useGlobalFilters()`.  [See here for details](https://docs.nestjs.com/exception-filters#binding-filters)\n *\n * @publicApi\n */\n\nexport const UseFilters = (...filters: (ExceptionFilter | Function)[]) =>\n  addExceptionFiltersMetadata(...filters);\n\nfunction addExceptionFiltersMetadata(\n  ...filters: (Function | ExceptionFilter)[]\n): MethodDecorator & ClassDecorator {\n  return (\n    target: any,\n    key?: string | symbol,\n    descriptor?: TypedPropertyDescriptor<any>,\n  ) => {\n    const isFilterValid = <T extends Function | Record<string, any>>(\n      filter: T,\n    ) =>\n      filter &&\n      (isFunction(filter) || isFunction((filter as Record<string, any>).catch));\n\n    if (descriptor) {\n      validateEach(\n        target.constructor,\n        filters,\n        isFilterValid,\n        '@UseFilters',\n        'filter',\n      );\n      extendArrayMetadata(\n        EXCEPTION_FILTERS_METADATA,\n        filters,\n        descriptor.value,\n      );\n      return descriptor;\n    }\n    validateEach(target, filters, isFilterValid, '@UseFilters', 'filter');\n    extendArrayMetadata(EXCEPTION_FILTERS_METADATA, filters, target);\n    return target;\n  };\n}\n","export function extendArrayMetadata<T extends Array<unknown>>(\n  key: string,\n  metadata: T,\n  target: Function,\n) {\n  const previousValue = Reflect.getMetadata(key, target) || [];\n  const value = [...previousValue, ...metadata];\n  Reflect.defineMetadata(key, value, target);\n}\n","export class InvalidDecoratorItemException extends Error {\n  private readonly msg: string;\n\n  constructor(decorator: string, item: string, context: string) {\n    const message = `Invalid ${item} passed to ${decorator}() decorator (${context}).`;\n    super(message);\n\n    this.msg = message;\n  }\n\n  public what(): string {\n    return this.msg;\n  }\n}\n\nexport function validateEach(\n  context: { name: string },\n  arr: any[],\n  predicate: Function,\n  decorator: string,\n  item: string,\n): boolean {\n  if (!context || !context.name) {\n    return true;\n  }\n  const errors = arr.some(str => !predicate(str));\n  if (errors) {\n    throw new InvalidDecoratorItemException(decorator, item, context.name);\n  }\n  return true;\n}\n","import {\n  PROPERTY_DEPS_METADATA,\n  SELF_DECLARED_DEPS_METADATA,\n} from '../../constants';\nimport { isUndefined } from '../../utils/shared.utils';\n\n/**\n * Decorator that marks a constructor parameter as a target for\n * [Dependency Injection (DI)](https://docs.nestjs.com/providers#dependency-injection).\n *\n * Any injected provider must be visible within the module scope (loosely\n * speaking, the containing module) of the class it is being injected into. This\n * can be done by:\n *\n * - defining the provider in the same module scope\n * - exporting the provider from one module scope and importing that module into the\n *   module scope of the class being injected into\n * - exporting the provider from a module that is marked as global using the\n *   `@Global()` decorator\n *\n * #### Injection tokens\n * Can be *types* (class names), *strings* or *symbols*. This depends on how the\n * provider with which it is associated was defined. Providers defined with the\n * `@Injectable()` decorator use the class name. Custom Providers may use strings\n * or symbols as the injection token.\n *\n * @param token lookup key for the provider to be injected (assigned to the constructor\n * parameter).\n *\n * @see [Providers](https://docs.nestjs.com/providers)\n * @see [Custom Providers](https://docs.nestjs.com/fundamentals/custom-providers)\n * @see [Injection Scopes](https://docs.nestjs.com/fundamentals/injection-scopes)\n *\n * @publicApi\n */\nexport function Inject<T = any>(token?: T) {\n  return (target: object, key: string | symbol, index?: number) => {\n    const type = token || Reflect.getMetadata('design:type', target, key);\n\n    if (!isUndefined(index)) {\n      let dependencies =\n        Reflect.getMetadata(SELF_DECLARED_DEPS_METADATA, target) || [];\n\n      dependencies = [...dependencies, { index, param: type }];\n      Reflect.defineMetadata(SELF_DECLARED_DEPS_METADATA, dependencies, target);\n      return;\n    }\n    let properties =\n      Reflect.getMetadata(PROPERTY_DEPS_METADATA, target.constructor) || [];\n\n    properties = [...properties, { key, type }];\n    Reflect.defineMetadata(\n      PROPERTY_DEPS_METADATA,\n      properties,\n      target.constructor,\n    );\n  };\n}\n","import { v4 as uuid } from 'uuid';\nimport { INJECTABLE_WATERMARK, SCOPE_OPTIONS_METADATA } from '../../constants';\nimport { ScopeOptions } from '../../interfaces/scope-options.interface';\nimport { Type } from '../../interfaces/type.interface';\n\n/**\n * Defines the injection scope.\n *\n * @see [Injection Scopes](https://docs.nestjs.com/fundamentals/injection-scopes)\n *\n * @publicApi\n */\nexport type InjectableOptions = ScopeOptions;\n\n/**\n * Decorator that marks a class as a [provider](https://docs.nestjs.com/providers).\n * Providers can be injected into other classes via constructor parameter injection\n * using Nest's built-in [Dependency Injection (DI)](https://docs.nestjs.com/providers#dependency-injection)\n * system.\n *\n * When injecting a provider, it must be visible within the module scope (loosely\n * speaking, the containing module) of the class it is being injected into. This\n * can be done by:\n *\n * - defining the provider in the same module scope\n * - exporting the provider from one module scope and importing that module into the\n *   module scope of the class being injected into\n * - exporting the provider from a module that is marked as global using the\n *   `@Global()` decorator\n *\n * Providers can also be defined in a more explicit and imperative form using\n * various [custom provider](https://docs.nestjs.com/fundamentals/custom-providers) techniques that expose\n * more capabilities of the DI system.\n *\n * @param options options specifying scope of injectable\n *\n * @see [Providers](https://docs.nestjs.com/providers)\n * @see [Custom Providers](https://docs.nestjs.com/fundamentals/custom-providers)\n * @see [Injection Scopes](https://docs.nestjs.com/fundamentals/injection-scopes)\n *\n * @publicApi\n */\nexport function Injectable(options?: InjectableOptions): ClassDecorator {\n  return (target: object) => {\n    Reflect.defineMetadata(INJECTABLE_WATERMARK, true, target);\n    Reflect.defineMetadata(SCOPE_OPTIONS_METADATA, options, target);\n  };\n}\n\nexport function mixin<T>(mixinClass: Type<T>) {\n  Object.defineProperty(mixinClass, 'name', {\n    value: uuid(),\n  });\n  Injectable()(mixinClass);\n  return mixinClass;\n}\n","import {\n  OPTIONAL_DEPS_METADATA,\n  OPTIONAL_PROPERTY_DEPS_METADATA,\n} from '../../constants';\nimport { isUndefined } from '../../utils/shared.utils';\n\n/**\n * Parameter decorator for an injected dependency marking the\n * dependency as optional.\n *\n * For example:\n * ```typescript\n * constructor(@Optional() @Inject('HTTP_OPTIONS')private readonly httpClient: T) {}\n * ```\n *\n * @see [Optional providers](https://docs.nestjs.com/providers#optional-providers)\n *\n * @publicApi\n */\nexport function Optional() {\n  return (target: object, key: string | symbol, index?: number) => {\n    if (!isUndefined(index)) {\n      const args = Reflect.getMetadata(OPTIONAL_DEPS_METADATA, target) || [];\n      Reflect.defineMetadata(OPTIONAL_DEPS_METADATA, [...args, index], target);\n      return;\n    }\n    const properties =\n      Reflect.getMetadata(\n        OPTIONAL_PROPERTY_DEPS_METADATA,\n        target.constructor,\n      ) || [];\n    Reflect.defineMetadata(\n      OPTIONAL_PROPERTY_DEPS_METADATA,\n      [...properties, key],\n      target.constructor,\n    );\n  };\n}\n","export type CustomDecorator<TKey = string> = MethodDecorator &\n  ClassDecorator & {\n    KEY: TKey;\n  };\n\n/**\n * Decorator that assigns metadata to the class/function using the\n * specified `key`.\n *\n * Requires two parameters:\n * - `key` - a value defining the key under which the metadata is stored\n * - `value` - metadata to be associated with `key`\n *\n * This metadata can be reflected using the `Reflector` class.\n *\n * Example: `@SetMetadata('roles', ['admin'])`\n *\n * @see [Reflection](https://docs.nestjs.com/guards#reflection)\n *\n * @publicApi\n */\nexport const SetMetadata = <K = string, V = any>(\n  metadataKey: K,\n  metadataValue: V,\n): CustomDecorator<K> => {\n  const decoratorFactory = (target: object, key?: any, descriptor?: any) => {\n    if (descriptor) {\n      Reflect.defineMetadata(metadataKey, metadataValue, descriptor.value);\n      return descriptor;\n    }\n    Reflect.defineMetadata(metadataKey, metadataValue, target);\n    return target;\n  };\n  decoratorFactory.KEY = metadataKey;\n  return decoratorFactory;\n};\n","import { GUARDS_METADATA } from '../../constants';\nimport { CanActivate } from '../../interfaces';\nimport { extendArrayMetadata } from '../../utils/extend-metadata.util';\nimport { isFunction } from '../../utils/shared.utils';\nimport { validateEach } from '../../utils/validate-each.util';\n\n/**\n * Decorator that binds guards to the scope of the controller or method,\n * depending on its context.\n *\n * When `@UseGuards` is used at the controller level, the guard will be\n * applied to every handler (method) in the controller.\n *\n * When `@UseGuards` is used at the individual handler level, the guard\n * will apply only to that specific method.\n *\n * @param guards a single guard instance or class, or a list of guard instances\n * or classes.\n *\n * @see [Guards](https://docs.nestjs.com/guards)\n *\n * @usageNotes\n * Guards can also be set up globally for all controllers and routes\n * using `app.useGlobalGuards()`.  [See here for details](https://docs.nestjs.com/guards#binding-guards)\n *\n * @publicApi\n */\nexport function UseGuards(\n  ...guards: (CanActivate | Function)[]\n): MethodDecorator & ClassDecorator {\n  return (\n    target: any,\n    key?: string | symbol,\n    descriptor?: TypedPropertyDescriptor<any>,\n  ) => {\n    const isGuardValid = <T extends Function | Record<string, any>>(guard: T) =>\n      guard &&\n      (isFunction(guard) ||\n        isFunction((guard as Record<string, any>).canActivate));\n\n    if (descriptor) {\n      validateEach(\n        target.constructor,\n        guards,\n        isGuardValid,\n        '@UseGuards',\n        'guard',\n      );\n      extendArrayMetadata(GUARDS_METADATA, guards, descriptor.value);\n      return descriptor;\n    }\n    validateEach(target, guards, isGuardValid, '@UseGuards', 'guard');\n    extendArrayMetadata(GUARDS_METADATA, guards, target);\n    return target;\n  };\n}\n","import { INTERCEPTORS_METADATA } from '../../constants';\nimport { NestInterceptor } from '../../interfaces';\nimport { extendArrayMetadata } from '../../utils/extend-metadata.util';\nimport { isFunction } from '../../utils/shared.utils';\nimport { validateEach } from '../../utils/validate-each.util';\n\n/**\n * Decorator that binds interceptors to the scope of the controller or method,\n * depending on its context.\n *\n * When `@UseInterceptors` is used at the controller level, the interceptor will\n * be applied to every handler (method) in the controller.\n *\n * When `@UseInterceptors` is used at the individual handler level, the interceptor\n * will apply only to that specific method.\n *\n * @param interceptors a single interceptor instance or class, or a list of\n * interceptor instances or classes.\n *\n * @see [Interceptors](https://docs.nestjs.com/interceptors)\n *\n * @usageNotes\n * Interceptors can also be set up globally for all controllers and routes\n * using `app.useGlobalInterceptors()`.  [See here for details](https://docs.nestjs.com/interceptors#binding-interceptors)\n *\n * @publicApi\n */\nexport function UseInterceptors(\n  ...interceptors: (NestInterceptor | Function)[]\n): MethodDecorator & ClassDecorator {\n  return (\n    target: any,\n    key?: string | symbol,\n    descriptor?: TypedPropertyDescriptor<any>,\n  ) => {\n    const isInterceptorValid = <T extends Function | Record<string, any>>(\n      interceptor: T,\n    ) =>\n      interceptor &&\n      (isFunction(interceptor) ||\n        isFunction((interceptor as Record<string, any>).intercept));\n\n    if (descriptor) {\n      validateEach(\n        target.constructor,\n        interceptors,\n        isInterceptorValid,\n        '@UseInterceptors',\n        'interceptor',\n      );\n      extendArrayMetadata(\n        INTERCEPTORS_METADATA,\n        interceptors,\n        descriptor.value,\n      );\n      return descriptor;\n    }\n    validateEach(\n      target,\n      interceptors,\n      isInterceptorValid,\n      '@UseInterceptors',\n      'interceptor',\n    );\n    extendArrayMetadata(INTERCEPTORS_METADATA, interceptors, target);\n    return target;\n  };\n}\n","import { PIPES_METADATA } from '../../constants';\nimport { PipeTransform } from '../../interfaces/index';\nimport { extendArrayMetadata } from '../../utils/extend-metadata.util';\nimport { isFunction } from '../../utils/shared.utils';\nimport { validateEach } from '../../utils/validate-each.util';\n\n/**\n * Decorator that binds pipes to the scope of the controller or method,\n * depending on its context.\n *\n * When `@UsePipes` is used at the controller level, the pipe will be\n * applied to every handler (method) in the controller.\n *\n * When `@UsePipes` is used at the individual handler level, the pipe\n * will apply only to that specific method.\n *\n * @param pipes a single pipe instance or class, or a list of pipe instances or\n * classes.\n *\n * @see [Pipes](https://docs.nestjs.com/pipes)\n *\n * @usageNotes\n * Pipes can also be set up globally for all controllers and routes\n * using `app.useGlobalPipes()`.  [See here for details](https://docs.nestjs.com/pipes#class-validator)\n *\n * @publicApi\n */\n\nexport function UsePipes(\n  ...pipes: (PipeTransform | Function)[]\n): ClassDecorator & MethodDecorator {\n  return (\n    target: any,\n    key?: string | symbol,\n    descriptor?: TypedPropertyDescriptor<any>,\n  ) => {\n    const isPipeValid = <T extends Function | Record<string, any>>(pipe: T) =>\n      pipe &&\n      (isFunction(pipe) || isFunction((pipe as Record<string, any>).transform));\n\n    if (descriptor) {\n      extendArrayMetadata(PIPES_METADATA, pipes, descriptor.value);\n      return descriptor;\n    }\n    validateEach(target, pipes, isPipeValid, '@UsePipes', 'pipe');\n    extendArrayMetadata(PIPES_METADATA, pipes, target);\n    return target;\n  };\n}\n","/**\n * Function that returns a new decorator that applies all decorators provided by param\n *\n * Useful to build new decorators (or a decorator factory) encapsulating multiple decorators related with the same feature\n *\n * @param decorators one or more decorators (e.g., `ApplyGuard(...)`)\n *\n * @publicApi\n */\nexport function applyDecorators(\n  ...decorators: Array<ClassDecorator | MethodDecorator | PropertyDecorator>\n) {\n  return <TFunction extends Function, Y>(\n    target: TFunction | object,\n    propertyKey?: string | symbol,\n    descriptor?: TypedPropertyDescriptor<Y>,\n  ) => {\n    for (const decorator of decorators) {\n      if (target instanceof Function && !descriptor) {\n        (decorator as ClassDecorator)(target);\n        continue;\n      }\n      (decorator as MethodDecorator | PropertyDecorator)(\n        target,\n        propertyKey,\n        descriptor,\n      );\n    }\n  };\n}\n","import { VERSION_METADATA } from '../../constants';\nimport { VersionValue } from '../../interfaces/version-options.interface';\n\n/**\n * Sets the version of the endpoint to the passed version\n *\n * @publicApi\n */\nexport function Version(version: VersionValue): MethodDecorator {\n  if (Array.isArray(version)) {\n    // Drop duplicated versions\n    version = Array.from(new Set(version));\n  }\n\n  return (\n    target: any,\n    key: string | symbol,\n    descriptor: TypedPropertyDescriptor<any>,\n  ) => {\n    Reflect.defineMetadata(VERSION_METADATA, version, descriptor.value);\n    return descriptor;\n  };\n}\n","export * from './global.decorator';\nexport * from './module.decorator';\n","import { GLOBAL_MODULE_METADATA } from '../../constants';\n\n/**\n * Decorator that makes a module global-scoped.\n *\n * Once imported into any module, a global-scoped module will be visible\n * in all modules. Thereafter, modules that wish to inject a service exported\n * from a global module do not need to import the provider module.\n *\n * @see [Global modules](https://docs.nestjs.com/modules#global-modules)\n *\n * @publicApi\n */\nexport function Global(): ClassDecorator {\n  return (target: Function) => {\n    Reflect.defineMetadata(GLOBAL_MODULE_METADATA, true, target);\n  };\n}\n","import { ModuleMetadata } from '../../interfaces/modules/module-metadata.interface';\nimport { validateModuleKeys } from '../../utils/validate-module-keys.util';\n\n/**\n * Decorator that marks a class as a [module](https://docs.nestjs.com/modules).\n *\n * Modules are used by Nest to organize the application structure into scopes. Controllers\n * and Providers are scoped by the module they are declared in. Modules and their\n * classes (Controllers and Providers) form a graph that determines how Nest\n * performs [Dependency Injection (DI)](https://docs.nestjs.com/providers#dependency-injection).\n *\n * @param metadata module configuration metadata\n *\n * @see [Modules](https://docs.nestjs.com/modules)\n *\n * @publicApi\n */\nexport function Module(metadata: ModuleMetadata): ClassDecorator {\n  const propsKeys = Object.keys(metadata);\n  validateModuleKeys(propsKeys);\n\n  return (target: Function) => {\n    for (const property in metadata) {\n      if (metadata.hasOwnProperty(property)) {\n        Reflect.defineMetadata(property, (metadata as any)[property], target);\n      }\n    }\n  };\n}\n","import { MODULE_METADATA as metadataConstants } from '../constants';\n\nexport const INVALID_MODULE_CONFIG_MESSAGE = (\n  text: TemplateStringsArray,\n  property: string,\n) => `Invalid property '${property}' passed into the @Module() decorator.`;\n\nconst metadataKeys = [\n  metadataConstants.IMPORTS,\n  metadataConstants.EXPORTS,\n  metadataConstants.CONTROLLERS,\n  metadataConstants.PROVIDERS,\n];\n\nexport function validateModuleKeys(keys: string[]) {\n  const validateKey = (key: string) => {\n    if (metadataKeys.includes(key)) {\n      return;\n    }\n    throw new Error(INVALID_MODULE_CONFIG_MESSAGE`${key}`);\n  };\n  keys.forEach(validateKey);\n}\n","export * from './request-mapping.decorator';\nexport * from './route-params.decorator';\nexport * from './http-code.decorator';\nexport * from './create-route-param-metadata.decorator';\nexport * from './render.decorator';\nexport * from './header.decorator';\nexport * from './redirect.decorator';\nexport * from './sse.decorator';\n","import { METHOD_METADATA, PATH_METADATA } from '../../constants';\nimport { RequestMethod } from '../../enums/request-method.enum';\n\nexport interface RequestMappingMetadata {\n  path?: string | string[];\n  method?: RequestMethod;\n}\n\nconst defaultMetadata = {\n  [PATH_METADATA]: '/',\n  [METHOD_METADATA]: RequestMethod.GET,\n};\n\nexport const RequestMapping = (\n  metadata: RequestMappingMetadata = defaultMetadata,\n): MethodDecorator => {\n  const pathMetadata = metadata[PATH_METADATA];\n  const path = pathMetadata && pathMetadata.length ? pathMetadata : '/';\n  const requestMethod = metadata[METHOD_METADATA] || RequestMethod.GET;\n\n  return (\n    target: object,\n    key: string | symbol,\n    descriptor: TypedPropertyDescriptor<any>,\n  ) => {\n    Reflect.defineMetadata(PATH_METADATA, path, descriptor.value);\n    Reflect.defineMetadata(METHOD_METADATA, requestMethod, descriptor.value);\n    return descriptor;\n  };\n};\n\nconst createMappingDecorator =\n  (method: RequestMethod) =>\n  (path?: string | string[]): MethodDecorator => {\n    return RequestMapping({\n      [PATH_METADATA]: path,\n      [METHOD_METADATA]: method,\n    });\n  };\n\n/**\n * Route handler (method) Decorator. Routes HTTP POST requests to the specified path.\n *\n * @see [Routing](https://docs.nestjs.com/controllers#routing)\n *\n * @publicApi\n */\nexport const Post = createMappingDecorator(RequestMethod.POST);\n\n/**\n * Route handler (method) Decorator. Routes HTTP GET requests to the specified path.\n *\n * @see [Routing](https://docs.nestjs.com/controllers#routing)\n *\n * @publicApi\n */\nexport const Get = createMappingDecorator(RequestMethod.GET);\n\n/**\n * Route handler (method) Decorator. Routes HTTP DELETE requests to the specified path.\n *\n * @see [Routing](https://docs.nestjs.com/controllers#routing)\n *\n * @publicApi\n */\nexport const Delete = createMappingDecorator(RequestMethod.DELETE);\n\n/**\n * Route handler (method) Decorator. Routes HTTP PUT requests to the specified path.\n *\n * @see [Routing](https://docs.nestjs.com/controllers#routing)\n *\n * @publicApi\n */\nexport const Put = createMappingDecorator(RequestMethod.PUT);\n\n/**\n * Route handler (method) Decorator. Routes HTTP PATCH requests to the specified path.\n *\n * @see [Routing](https://docs.nestjs.com/controllers#routing)\n *\n * @publicApi\n */\nexport const Patch = createMappingDecorator(RequestMethod.PATCH);\n\n/**\n * Route handler (method) Decorator. Routes HTTP OPTIONS requests to the specified path.\n *\n * @see [Routing](https://docs.nestjs.com/controllers#routing)\n *\n * @publicApi\n */\nexport const Options = createMappingDecorator(RequestMethod.OPTIONS);\n\n/**\n * Route handler (method) Decorator. Routes HTTP HEAD requests to the specified path.\n *\n * @see [Routing](https://docs.nestjs.com/controllers#routing)\n *\n * @publicApi\n */\nexport const Head = createMappingDecorator(RequestMethod.HEAD);\n\n/**\n * Route handler (method) Decorator. Routes all HTTP requests to the specified path.\n *\n * @see [Routing](https://docs.nestjs.com/controllers#routing)\n *\n * @publicApi\n */\nexport const All = createMappingDecorator(RequestMethod.ALL);\n","export enum RequestMethod {\n  GET = 0,\n  POST,\n  PUT,\n  DELETE,\n  PATCH,\n  ALL,\n  OPTIONS,\n  HEAD,\n}\n","import {\n  RESPONSE_PASSTHROUGH_METADATA,\n  ROUTE_ARGS_METADATA,\n} from '../../constants';\nimport { RouteParamtypes } from '../../enums/route-paramtypes.enum';\nimport { PipeTransform } from '../../index';\nimport { Type } from '../../interfaces';\nimport { isNil, isString } from '../../utils/shared.utils';\n\n/**\n * The `@Response()`/`@Res` parameter decorator options.\n */\nexport interface ResponseDecoratorOptions {\n  /**\n   * Determines whether the response will be sent manually within the route handler,\n   * with the use of native response handling methods exposed by the platform-specific response object,\n   * or if it should passthrough Nest response processing pipeline.\n   *\n   * @default false\n   */\n  passthrough: boolean;\n}\n\nexport type ParamData = object | string | number;\nexport interface RouteParamMetadata {\n  index: number;\n  data?: ParamData;\n}\n\nexport function assignMetadata<TParamtype = any, TArgs = any>(\n  args: TArgs,\n  paramtype: TParamtype,\n  index: number,\n  data?: ParamData,\n  ...pipes: (Type<PipeTransform> | PipeTransform)[]\n) {\n  return {\n    ...args,\n    [`${paramtype}:${index}`]: {\n      index,\n      data,\n      pipes,\n    },\n  };\n}\n\nfunction createRouteParamDecorator(paramtype: RouteParamtypes) {\n  return (data?: ParamData): ParameterDecorator =>\n    (target, key, index) => {\n      const args =\n        Reflect.getMetadata(ROUTE_ARGS_METADATA, target.constructor, key) || {};\n      Reflect.defineMetadata(\n        ROUTE_ARGS_METADATA,\n        assignMetadata<RouteParamtypes, Record<number, RouteParamMetadata>>(\n          args,\n          paramtype,\n          index,\n          data,\n        ),\n        target.constructor,\n        key,\n      );\n    };\n}\n\nconst createPipesRouteParamDecorator =\n  (paramtype: RouteParamtypes) =>\n  (\n    data?: any,\n    ...pipes: (Type<PipeTransform> | PipeTransform)[]\n  ): ParameterDecorator =>\n  (target, key, index) => {\n    const args =\n      Reflect.getMetadata(ROUTE_ARGS_METADATA, target.constructor, key) || {};\n    const hasParamData = isNil(data) || isString(data);\n    const paramData = hasParamData ? data : undefined;\n    const paramPipes = hasParamData ? pipes : [data, ...pipes];\n\n    Reflect.defineMetadata(\n      ROUTE_ARGS_METADATA,\n      assignMetadata(args, paramtype, index, paramData, ...paramPipes),\n      target.constructor,\n      key,\n    );\n  };\n\n/**\n * Route handler parameter decorator. Extracts the `Request`\n * object from the underlying platform and populates the decorated\n * parameter with the value of `Request`.\n *\n * Example: `logout(@Request() req)`\n *\n * @see [Request object](https://docs.nestjs.com/controllers#request-object)\n *\n * @publicApi\n */\nexport const Request: () => ParameterDecorator = createRouteParamDecorator(\n  RouteParamtypes.REQUEST,\n);\n\n/**\n * Route handler parameter decorator. Extracts the `Response`\n * object from the underlying platform and populates the decorated\n * parameter with the value of `Response`.\n *\n * Example: `logout(@Response() res)`\n *\n * @publicApi\n */\nexport const Response: (\n  options?: ResponseDecoratorOptions,\n) => ParameterDecorator =\n  (options?: ResponseDecoratorOptions) => (target, key, index) => {\n    if (options?.passthrough) {\n      Reflect.defineMetadata(\n        RESPONSE_PASSTHROUGH_METADATA,\n        options?.passthrough,\n        target.constructor,\n        key,\n      );\n    }\n    return createRouteParamDecorator(RouteParamtypes.RESPONSE)()(\n      target,\n      key,\n      index,\n    );\n  };\n\n/**\n * Route handler parameter decorator. Extracts reference to the `Next` function\n * from the underlying platform and populates the decorated\n * parameter with the value of `Next`.\n *\n * @publicApi\n */\nexport const Next: () => ParameterDecorator = createRouteParamDecorator(\n  RouteParamtypes.NEXT,\n);\n\n/**\n * Route handler parameter decorator. Extracts the `Ip` property\n * from the `req` object and populates the decorated\n * parameter with the value of `ip`.\n *\n * @see [Request object](https://docs.nestjs.com/controllers#request-object)\n *\n * @publicApi\n */\nexport const Ip: () => ParameterDecorator = createRouteParamDecorator(\n  RouteParamtypes.IP,\n);\n\n/**\n * Route handler parameter decorator. Extracts the `Session` object\n * from the underlying platform and populates the decorated\n * parameter with the value of `Session`.\n *\n * @see [Request object](https://docs.nestjs.com/controllers#request-object)\n *\n * @publicApi\n */\nexport const Session: () => ParameterDecorator = createRouteParamDecorator(\n  RouteParamtypes.SESSION,\n);\n\n/**\n * Route handler parameter decorator. Extracts the `file` object\n * and populates the decorated parameter with the value of `file`.\n * Used in conjunction with\n * [multer middleware](https://github.com/expressjs/multer) for Express-based applications.\n *\n * For example:\n * ```typescript\n * uploadFile(@UploadedFile() file) {\n *   console.log(file);\n * }\n * ```\n * @see [Request object](https://docs.nestjs.com/techniques/file-upload)\n *\n * @publicApi\n */\nexport function UploadedFile(): ParameterDecorator;\n/**\n * Route handler parameter decorator. Extracts the `file` object\n * and populates the decorated parameter with the value of `file`.\n * Used in conjunction with\n * [multer middleware](https://github.com/expressjs/multer) for Express-based applications.\n *\n * For example:\n * ```typescript\n * uploadFile(@UploadedFile() file) {\n *   console.log(file);\n * }\n * ```\n * @see [Request object](https://docs.nestjs.com/techniques/file-upload)\n *\n * @publicApi\n */\nexport function UploadedFile(\n  ...pipes: (Type<PipeTransform> | PipeTransform)[]\n): ParameterDecorator;\n\n/**\n * Route handler parameter decorator. Extracts the `file` object\n * and populates the decorated parameter with the value of `file`.\n * Used in conjunction with\n * [multer middleware](https://github.com/expressjs/multer) for Express-based applications.\n *\n * For example:\n * ```typescript\n * uploadFile(@UploadedFile() file) {\n *   console.log(file);\n * }\n * ```\n * @see [Request object](https://docs.nestjs.com/techniques/file-upload)\n *\n * @publicApi\n */\nexport function UploadedFile(\n  fileKey?: string,\n  ...pipes: (Type<PipeTransform> | PipeTransform)[]\n): ParameterDecorator;\n/**\n * Route handler parameter decorator. Extracts the `file` object\n * and populates the decorated parameter with the value of `file`.\n * Used in conjunction with\n * [multer middleware](https://github.com/expressjs/multer) for Express-based applications.\n *\n * For example:\n * ```typescript\n * uploadFile(@UploadedFile() file) {\n *   console.log(file);\n * }\n * ```\n * @see [Request object](https://docs.nestjs.com/techniques/file-upload)\n *\n * @publicApi\n */\nexport function UploadedFile(\n  fileKey?: string | (Type<PipeTransform> | PipeTransform),\n  ...pipes: (Type<PipeTransform> | PipeTransform)[]\n): ParameterDecorator {\n  return createPipesRouteParamDecorator(RouteParamtypes.FILE)(\n    fileKey,\n    ...pipes,\n  );\n}\n\n/**\n * Route handler parameter decorator. Extracts the `files` object\n * and populates the decorated parameter with the value of `files`.\n * Used in conjunction with\n * [multer middleware](https://github.com/expressjs/multer) for Express-based applications.\n *\n * For example:\n * ```typescript\n * uploadFile(@UploadedFiles() files) {\n *   console.log(files);\n * }\n * ```\n * @see [Request object](https://docs.nestjs.com/techniques/file-upload)\n *\n * @publicApi\n */\nexport function UploadedFiles(): ParameterDecorator;\n/**\n * Route handler parameter decorator. Extracts the `files` object\n * and populates the decorated parameter with the value of `files`.\n * Used in conjunction with\n * [multer middleware](https://github.com/expressjs/multer) for Express-based applications.\n *\n * For example:\n * ```typescript\n * uploadFile(@UploadedFiles() files) {\n *   console.log(files);\n * }\n * ```\n * @see [Request object](https://docs.nestjs.com/techniques/file-upload)\n *\n * @publicApi\n */\nexport function UploadedFiles(\n  ...pipes: (Type<PipeTransform> | PipeTransform)[]\n): ParameterDecorator;\n/**\n * Route handler parameter decorator. Extracts the `files` object\n * and populates the decorated parameter with the value of `files`.\n * Used in conjunction with\n * [multer middleware](https://github.com/expressjs/multer) for Express-based applications.\n *\n * For example:\n * ```typescript\n * uploadFile(@UploadedFiles() files) {\n *   console.log(files);\n * }\n * ```\n * @see [Request object](https://docs.nestjs.com/techniques/file-upload)\n *\n * @publicApi\n */\nexport function UploadedFiles(\n  ...pipes: (Type<PipeTransform> | PipeTransform)[]\n): ParameterDecorator {\n  return createPipesRouteParamDecorator(RouteParamtypes.FILES)(\n    undefined,\n    ...pipes,\n  );\n}\n\n/**\n * Route handler parameter decorator. Extracts the `headers`\n * property from the `req` object and populates the decorated\n * parameter with the value of `headers`.\n *\n * For example: `async update(@Headers('Cache-Control') cacheControl: string)`\n *\n * @param property name of single header property to extract.\n *\n * @see [Request object](https://docs.nestjs.com/controllers#request-object)\n *\n * @publicApi\n */\nexport const Headers: (property?: string) => ParameterDecorator =\n  createRouteParamDecorator(RouteParamtypes.HEADERS);\n\n/**\n * Route handler parameter decorator. Extracts the `query`\n * property from the `req` object and populates the decorated\n * parameter with the value of `query`. May also apply pipes to the bound\n * query parameter.\n *\n * For example:\n * ```typescript\n * async find(@Query('user') user: string)\n * ```\n *\n * @param property name of single property to extract from the `query` object\n * @param pipes one or more pipes to apply to the bound query parameter\n *\n * @see [Request object](https://docs.nestjs.com/controllers#request-object)\n *\n * @publicApi\n */\nexport function Query(): ParameterDecorator;\n/**\n * Route handler parameter decorator. Extracts the `query`\n * property from the `req` object and populates the decorated\n * parameter with the value of `query`. May also apply pipes to the bound\n * query parameter.\n *\n * For example:\n * ```typescript\n * async find(@Query('user') user: string)\n * ```\n *\n * @param property name of single property to extract from the `query` object\n * @param pipes one or more pipes to apply to the bound query parameter\n *\n * @see [Request object](https://docs.nestjs.com/controllers#request-object)\n *\n * @publicApi\n */\nexport function Query(\n  ...pipes: (Type<PipeTransform> | PipeTransform)[]\n): ParameterDecorator;\n/**\n * Route handler parameter decorator. Extracts the `query`\n * property from the `req` object and populates the decorated\n * parameter with the value of `query`. May also apply pipes to the bound\n * query parameter.\n *\n * For example:\n * ```typescript\n * async find(@Query('user') user: string)\n * ```\n *\n * @param property name of single property to extract from the `query` object\n * @param pipes one or more pipes to apply to the bound query parameter\n *\n * @see [Request object](https://docs.nestjs.com/controllers#request-object)\n *\n * @publicApi\n */\nexport function Query(\n  property: string,\n  ...pipes: (Type<PipeTransform> | PipeTransform)[]\n): ParameterDecorator;\n/**\n * Route handler parameter decorator. Extracts the `query`\n * property from the `req` object and populates the decorated\n * parameter with the value of `query`. May also apply pipes to the bound\n * query parameter.\n *\n * For example:\n * ```typescript\n * async find(@Query('user') user: string)\n * ```\n *\n * @param property name of single property to extract from the `query` object\n * @param pipes one or more pipes to apply to the bound query parameter\n *\n * @see [Request object](https://docs.nestjs.com/controllers#request-object)\n *\n * @publicApi\n */\nexport function Query(\n  property?: string | (Type<PipeTransform> | PipeTransform),\n  ...pipes: (Type<PipeTransform> | PipeTransform)[]\n): ParameterDecorator {\n  return createPipesRouteParamDecorator(RouteParamtypes.QUERY)(\n    property,\n    ...pipes,\n  );\n}\n\n/**\n * Route handler parameter decorator. Extracts the entire `body`\n * object from the `req` object and populates the decorated\n * parameter with the value of `body`.\n *\n * For example:\n * ```typescript\n * async create(@Body() createDto: CreateCatDto)\n * ```\n *\n * @see [Request object](https://docs.nestjs.com/controllers#request-object)\n *\n * @publicApi\n */\nexport function Body(): ParameterDecorator;\n\n/**\n * Route handler parameter decorator. Extracts the entire `body`\n * object from the `req` object and populates the decorated\n * parameter with the value of `body`. Also applies the specified\n * pipes to that parameter.\n *\n * For example:\n * ```typescript\n * async create(@Body(new ValidationPipe()) createDto: CreateCatDto)\n * ```\n *\n * @param pipes one or more pipes - either instances or classes - to apply to\n * the bound body parameter.\n *\n * @see [Request object](https://docs.nestjs.com/controllers#request-object)\n * @see [Working with pipes](https://docs.nestjs.com/custom-decorators#working-with-pipes)\n *\n * @publicApi\n */\nexport function Body(\n  ...pipes: (Type<PipeTransform> | PipeTransform)[]\n): ParameterDecorator;\n\n/**\n * Route handler parameter decorator. Extracts a single property from\n * the `body` object property of the `req` object and populates the decorated\n * parameter with the value of that property. Also applies pipes to the bound\n * body parameter.\n *\n * For example:\n * ```typescript\n * async create(@Body('role', new ValidationPipe()) role: string)\n * ```\n *\n * @param property name of single property to extract from the `body` object\n * @param pipes one or more pipes - either instances or classes - to apply to\n * the bound body parameter.\n *\n * @see [Request object](https://docs.nestjs.com/controllers#request-object)\n * @see [Working with pipes](https://docs.nestjs.com/custom-decorators#working-with-pipes)\n *\n * @publicApi\n */\nexport function Body(\n  property: string,\n  ...pipes: (Type<PipeTransform> | PipeTransform)[]\n): ParameterDecorator;\n\n/**\n * Route handler parameter decorator. Extracts the entire `body` object\n * property, or optionally a named property of the `body` object, from\n * the `req` object and populates the decorated parameter with that value.\n * Also applies pipes to the bound body parameter.\n *\n * For example:\n * ```typescript\n * async create(@Body('role', new ValidationPipe()) role: string)\n * ```\n *\n * @param property name of single property to extract from the `body` object\n * @param pipes one or more pipes - either instances or classes - to apply to\n * the bound body parameter.\n *\n * @see [Request object](https://docs.nestjs.com/controllers#request-object)\n * @see [Working with pipes](https://docs.nestjs.com/custom-decorators#working-with-pipes)\n *\n * @publicApi\n */\nexport function Body(\n  property?: string | (Type<PipeTransform> | PipeTransform),\n  ...pipes: (Type<PipeTransform> | PipeTransform)[]\n): ParameterDecorator {\n  return createPipesRouteParamDecorator(RouteParamtypes.BODY)(\n    property,\n    ...pipes,\n  );\n}\n\n/**\n * Route handler parameter decorator. Extracts the `params`\n * property from the `req` object and populates the decorated\n * parameter with the value of `params`. May also apply pipes to the bound\n * parameter.\n *\n * For example, extracting all params:\n * ```typescript\n * findOne(@Param() params: string[])\n * ```\n *\n * For example, extracting a single param:\n * ```typescript\n * findOne(@Param('id') id: string)\n * ```\n * @param property name of single property to extract from the `req` object\n * @param pipes one or more pipes - either instances or classes - to apply to\n * the bound parameter.\n *\n * @see [Request object](https://docs.nestjs.com/controllers#request-object)\n * @see [Working with pipes](https://docs.nestjs.com/custom-decorators#working-with-pipes)\n *\n * @publicApi\n */\nexport function Param(): ParameterDecorator;\n/**\n * Route handler parameter decorator. Extracts the `params`\n * property from the `req` object and populates the decorated\n * parameter with the value of `params`. May also apply pipes to the bound\n * parameter.\n *\n * For example, extracting all params:\n * ```typescript\n * findOne(@Param() params: string[])\n * ```\n *\n * For example, extracting a single param:\n * ```typescript\n * findOne(@Param('id') id: string)\n * ```\n * @param property name of single property to extract from the `req` object\n * @param pipes one or more pipes - either instances or classes - to apply to\n * the bound parameter.\n *\n * @see [Request object](https://docs.nestjs.com/controllers#request-object)\n * @see [Working with pipes](https://docs.nestjs.com/custom-decorators#working-with-pipes)\n *\n * @publicApi\n */\nexport function Param(\n  ...pipes: (Type<PipeTransform> | PipeTransform)[]\n): ParameterDecorator;\n/**\n * Route handler parameter decorator. Extracts the `params`\n * property from the `req` object and populates the decorated\n * parameter with the value of `params`. May also apply pipes to the bound\n * parameter.\n *\n * For example, extracting all params:\n * ```typescript\n * findOne(@Param() params: string[])\n * ```\n *\n * For example, extracting a single param:\n * ```typescript\n * findOne(@Param('id') id: string)\n * ```\n * @param property name of single property to extract from the `req` object\n * @param pipes one or more pipes - either instances or classes - to apply to\n * the bound parameter.\n *\n * @see [Request object](https://docs.nestjs.com/controllers#request-object)\n * @see [Working with pipes](https://docs.nestjs.com/custom-decorators#working-with-pipes)\n *\n * @publicApi\n */\nexport function Param(\n  property: string,\n  ...pipes: (Type<PipeTransform> | PipeTransform)[]\n): ParameterDecorator;\n/**\n * Route handler parameter decorator. Extracts the `params`\n * property from the `req` object and populates the decorated\n * parameter with the value of `params`. May also apply pipes to the bound\n * parameter.\n *\n * For example, extracting all params:\n * ```typescript\n * findOne(@Param() params: string[])\n * ```\n *\n * For example, extracting a single param:\n * ```typescript\n * findOne(@Param('id') id: string)\n * ```\n * @param property name of single property to extract from the `req` object\n * @param pipes one or more pipes - either instances or classes - to apply to\n * the bound parameter.\n *\n * @see [Request object](https://docs.nestjs.com/controllers#request-object)\n * @see [Working with pipes](https://docs.nestjs.com/custom-decorators#working-with-pipes)\n *\n * @publicApi\n */\nexport function Param(\n  property?: string | (Type<PipeTransform> | PipeTransform),\n  ...pipes: (Type<PipeTransform> | PipeTransform)[]\n): ParameterDecorator {\n  return createPipesRouteParamDecorator(RouteParamtypes.PARAM)(\n    property,\n    ...pipes,\n  );\n}\n\n/**\n * Route handler parameter decorator. Extracts the `hosts`\n * property from the `req` object and populates the decorated\n * parameter with the value of `hosts`. May also apply pipes to the bound\n * parameter.\n *\n * For example, extracting all params:\n * ```typescript\n * findOne(@HostParam() params: string[])\n * ```\n *\n * For example, extracting a single param:\n * ```typescript\n * findOne(@HostParam('id') id: string)\n * ```\n * @param property name of single property to extract from the `req` object\n *\n * @see [Request object](https://docs.nestjs.com/controllers#request-object)\n *\n * @publicApi\n */\nexport function HostParam(): ParameterDecorator;\n/**\n * Route handler parameter decorator. Extracts the `hosts`\n * property from the `req` object and populates the decorated\n * parameter with the value of `hosts`. May also apply pipes to the bound\n * parameter.\n *\n * For example, extracting all params:\n * ```typescript\n * findOne(@HostParam() params: string[])\n * ```\n *\n * For example, extracting a single param:\n * ```typescript\n * findOne(@HostParam('id') id: string)\n * ```\n * @param property name of single property to extract from the `req` object\n *\n * @see [Request object](https://docs.nestjs.com/controllers#request-object)\n *\n * @publicApi\n */\nexport function HostParam(property: string): ParameterDecorator;\n/**\n * Route handler parameter decorator. Extracts the `hosts`\n * property from the `req` object and populates the decorated\n * parameter with the value of `params`. May also apply pipes to the bound\n * parameter.\n *\n * For example, extracting all params:\n * ```typescript\n * findOne(@HostParam() params: string[])\n * ```\n *\n * For example, extracting a single param:\n * ```typescript\n * findOne(@HostParam('id') id: string)\n * ```\n * @param property name of single property to extract from the `req` object\n *\n * @see [Request object](https://docs.nestjs.com/controllers#request-object)\n *\n * @publicApi\n */\nexport function HostParam(\n  property?: string | (Type<PipeTransform> | PipeTransform),\n): ParameterDecorator {\n  return createRouteParamDecorator(RouteParamtypes.HOST)(property);\n}\n\nexport const Req = Request;\nexport const Res = Response;\n","export enum RouteParamtypes {\n  REQUEST,\n  RESPONSE,\n  NEXT,\n  BODY,\n  QUERY,\n  PARAM,\n  HEADERS,\n  SESSION,\n  FILE,\n  FILES,\n  HOST,\n  IP,\n}\n","import { HTTP_CODE_METADATA } from '../../constants';\n\n/**\n * Request method Decorator.  Defines the HTTP response status code.  Overrides\n * default status code for the decorated request method.\n *\n * @param statusCode HTTP response code to be returned by route handler.\n *\n * @see [Http Status Codes](https://docs.nestjs.com/controllers#status-code)\n *\n * @publicApi\n */\nexport function HttpCode(statusCode: number): MethodDecorator {\n  return (\n    target: object,\n    key: string | symbol,\n    descriptor: TypedPropertyDescriptor<any>,\n  ) => {\n    Reflect.defineMetadata(HTTP_CODE_METADATA, statusCode, descriptor.value);\n    return descriptor;\n  };\n}\n","import { v4 as uuid } from 'uuid';\nimport { ROUTE_ARGS_METADATA } from '../../constants';\nimport { PipeTransform } from '../../index';\nimport { Type } from '../../interfaces';\nimport { CustomParamFactory } from '../../interfaces/features/custom-route-param-factory.interface';\nimport { assignCustomParameterMetadata } from '../../utils/assign-custom-metadata.util';\nimport { isFunction, isNil } from '../../utils/shared.utils';\n\nexport type ParamDecoratorEnhancer = ParameterDecorator;\n\n/**\n * Defines HTTP route param decorator\n *\n * @param factory\n */\nexport function createParamDecorator<\n  FactoryData = any,\n  FactoryInput = any,\n  FactoryOutput = any,\n>(\n  factory: CustomParamFactory<FactoryData, FactoryInput, FactoryOutput>,\n  enhancers: ParamDecoratorEnhancer[] = [],\n): (\n  ...dataOrPipes: (Type<PipeTransform> | PipeTransform | FactoryData)[]\n) => ParameterDecorator {\n  const paramtype = uuid();\n  return (\n      data?,\n      ...pipes: (Type<PipeTransform> | PipeTransform | FactoryData)[]\n    ): ParameterDecorator =>\n    (target, key, index) => {\n      const args =\n        Reflect.getMetadata(ROUTE_ARGS_METADATA, target.constructor, key) || {};\n\n      const isPipe = (pipe: any) =>\n        pipe &&\n        ((isFunction(pipe) &&\n          pipe.prototype &&\n          isFunction(pipe.prototype.transform)) ||\n          isFunction(pipe.transform));\n\n      const hasParamData = isNil(data) || !isPipe(data);\n      const paramData = hasParamData ? (data as any) : undefined;\n      const paramPipes = hasParamData ? pipes : [data, ...pipes];\n\n      Reflect.defineMetadata(\n        ROUTE_ARGS_METADATA,\n        assignCustomParameterMetadata(\n          args,\n          paramtype,\n          index,\n          factory,\n          paramData,\n          ...(paramPipes as PipeTransform[]),\n        ),\n        target.constructor,\n        key,\n      );\n      enhancers.forEach(fn => fn(target, key, index));\n    };\n}\n","import { CUSTOM_ROUTE_AGRS_METADATA } from '../constants';\nimport {\n  ParamData,\n  RouteParamMetadata,\n} from '../decorators/http/route-params.decorator';\nimport { PipeTransform, Type } from '../interfaces';\nimport { CustomParamFactory } from '../interfaces/features/custom-route-param-factory.interface';\n\nexport function assignCustomParameterMetadata(\n  args: Record<number, RouteParamMetadata>,\n  paramtype: number | string,\n  index: number,\n  factory: CustomParamFactory,\n  data?: ParamData,\n  ...pipes: (Type<PipeTransform> | PipeTransform)[]\n) {\n  return {\n    ...args,\n    [`${paramtype}${CUSTOM_ROUTE_AGRS_METADATA}:${index}`]: {\n      index,\n      factory,\n      data,\n      pipes,\n    },\n  };\n}\n","import { RENDER_METADATA } from '../../constants';\n\n/**\n * Route handler method Decorator.  Defines a template to be rendered by the controller.\n *\n * For example: `@Render('index')`\n *\n * @param template name of the render engine template file\n *\n * @see [Model-View-Controller](https://docs.nestjs.com/techniques.mvc)\n *\n * @publicApi\n */\nexport function Render(template: string): MethodDecorator {\n  return (\n    target: object,\n    key: string | symbol,\n    descriptor: TypedPropertyDescriptor<any>,\n  ) => {\n    Reflect.defineMetadata(RENDER_METADATA, template, descriptor.value);\n    return descriptor;\n  };\n}\n","import { HEADERS_METADATA } from '../../constants';\nimport { extendArrayMetadata } from '../../utils/extend-metadata.util';\n\n/**\n * Request method Decorator.  Sets a response header.\n *\n * For example:\n * `@Header('Cache-Control', 'none')`\n *\n * @param name string to be used for header name\n * @param value string to be used for header value\n *\n * @see [Headers](https://docs.nestjs.com/controllers#headers)\n *\n * @publicApi\n */\nexport function Header(name: string, value: string): MethodDecorator {\n  return (\n    target: object,\n    key: string | symbol,\n    descriptor: TypedPropertyDescriptor<any>,\n  ) => {\n    extendArrayMetadata(HEADERS_METADATA, [{ name, value }], descriptor.value);\n    return descriptor;\n  };\n}\n","import { REDIRECT_METADATA } from '../../constants';\n\n/**\n * Redirects request to the specified URL.\n *\n * @publicApi\n */\nexport function Redirect(url = '', statusCode?: number): MethodDecorator {\n  return (\n    target: object,\n    key: string | symbol,\n    descriptor: TypedPropertyDescriptor<any>,\n  ) => {\n    Reflect.defineMetadata(\n      REDIRECT_METADATA,\n      { statusCode, url },\n      descriptor.value,\n    );\n    return descriptor;\n  };\n}\n","import { METHOD_METADATA, PATH_METADATA, SSE_METADATA } from '../../constants';\nimport { RequestMethod } from '../../enums/request-method.enum';\n\n/**\n * Declares this route as a Server-Sent-Events endpoint\n *\n * @publicApi\n */\nexport function Sse(path?: string): MethodDecorator {\n  return (\n    target: object,\n    key: string | symbol,\n    descriptor: TypedPropertyDescriptor<any>,\n  ) => {\n    path = path && path.length ? path : '/';\n\n    Reflect.defineMetadata(PATH_METADATA, path, descriptor.value);\n    Reflect.defineMetadata(\n      METHOD_METADATA,\n      RequestMethod.GET,\n      descriptor.value,\n    );\n    Reflect.defineMetadata(SSE_METADATA, true, descriptor.value);\n    return descriptor;\n  };\n}\n","import { Provider } from '../interfaces';\nimport { loadPackage } from '../utils/load-package.util';\nimport { CACHE_MANAGER, CACHE_MODULE_OPTIONS } from './cache.constants';\nimport { defaultCacheOptions } from './default-options';\nimport { CacheManagerOptions } from './interfaces/cache-manager.interface';\n\n/**\n * Creates a CacheManager Provider.\n *\n * @publicApi\n */\nexport function createCacheManager(): Provider {\n  return {\n    provide: CACHE_MANAGER,\n    useFactory: (options: CacheManagerOptions) => {\n      const cacheManager = loadPackage('cache-manager', 'CacheModule', () =>\n        require('cache-manager'),\n      );\n\n      return Array.isArray(options)\n        ? cacheManager.multiCaching(\n            options.map(store =>\n              cacheManager.caching({\n                ...defaultCacheOptions,\n                ...(store || {}),\n              }),\n            ),\n          )\n        : cacheManager.caching({\n            ...defaultCacheOptions,\n            ...(options || {}),\n          });\n    },\n    inject: [CACHE_MODULE_OPTIONS],\n  };\n}\n","import { Logger } from '../services/logger.service';\n\nconst MISSING_REQUIRED_DEPENDENCY = (name: string, reason: string) =>\n  `The \"${name}\" package is missing. Please, make sure to install this library ($ npm install ${name}) to take advantage of ${reason}.`;\n\nconst logger = new Logger('PackageLoader');\n\nexport function loadPackage(\n  packageName: string,\n  context: string,\n  loaderFn?: Function,\n) {\n  try {\n    return loaderFn ? loaderFn() : require(packageName);\n  } catch (e) {\n    logger.error(MISSING_REQUIRED_DEPENDENCY(packageName, context));\n    Logger.flush();\n    process.exit(1);\n  }\n}\n","import { Injectable } from '../decorators/core/injectable.decorator';\nimport { Optional } from '../decorators/core/optional.decorator';\nimport { isObject } from '../utils/shared.utils';\nimport { ConsoleLogger } from './console-logger.service';\nimport { isLogLevelEnabled } from './utils';\n\nexport type LogLevel = 'log' | 'error' | 'warn' | 'debug' | 'verbose';\n\nexport interface LoggerService {\n  /**\n   * Write a 'log' level log.\n   */\n  log(message: any, ...optionalParams: any[]): any;\n\n  /**\n   * Write an 'error' level log.\n   */\n  error(message: any, ...optionalParams: any[]): any;\n\n  /**\n   * Write a 'warn' level log.\n   */\n  warn(message: any, ...optionalParams: any[]): any;\n\n  /**\n   * Write a 'debug' level log.\n   */\n  debug?(message: any, ...optionalParams: any[]): any;\n\n  /**\n   * Write a 'verbose' level log.\n   */\n  verbose?(message: any, ...optionalParams: any[]): any;\n\n  /**\n   * Set log levels.\n   * @param levels log levels\n   */\n  setLogLevels?(levels: LogLevel[]): any;\n}\n\ninterface LogBufferRecord {\n  /**\n   * Method to execute.\n   */\n  methodRef: Function;\n\n  /**\n   * Arguments to pass to the method.\n   */\n  arguments: unknown[];\n}\n\nconst DEFAULT_LOGGER = new ConsoleLogger();\n\n@Injectable()\nexport class Logger implements LoggerService {\n  protected static logBuffer = new Array<LogBufferRecord>();\n  protected static staticInstanceRef?: LoggerService = DEFAULT_LOGGER;\n  protected static logLevels?: LogLevel[];\n  private static isBufferAttached: boolean;\n\n  protected localInstanceRef?: LoggerService;\n\n  private static WrapBuffer: MethodDecorator = (\n    target: object,\n    propertyKey: string | symbol,\n    descriptor: TypedPropertyDescriptor<any>,\n  ) => {\n    const originalFn = descriptor.value;\n    descriptor.value = function (...args: unknown[]) {\n      if (Logger.isBufferAttached) {\n        Logger.logBuffer.push({\n          methodRef: originalFn.bind(this),\n          arguments: args,\n        });\n        return;\n      }\n      return originalFn.call(this, ...args);\n    };\n  };\n\n  constructor();\n  constructor(context: string);\n  constructor(context: string, options?: { timestamp?: boolean });\n  constructor(\n    @Optional() protected context?: string,\n    @Optional() protected options: { timestamp?: boolean } = {},\n  ) {}\n\n  get localInstance(): LoggerService {\n    if (Logger.staticInstanceRef === DEFAULT_LOGGER) {\n      return this.registerLocalInstanceRef();\n    } else if (Logger.staticInstanceRef instanceof Logger) {\n      const prototype = Object.getPrototypeOf(Logger.staticInstanceRef);\n      if (prototype.constructor === Logger) {\n        return this.registerLocalInstanceRef();\n      }\n    }\n    return Logger.staticInstanceRef;\n  }\n\n  /**\n   * Write an 'error' level log.\n   */\n  error(message: any, stack?: string, context?: string): void;\n  error(message: any, ...optionalParams: [...any, string?, string?]): void;\n  @Logger.WrapBuffer\n  error(message: any, ...optionalParams: any[]) {\n    optionalParams = this.context\n      ? optionalParams.concat(this.context)\n      : optionalParams;\n\n    this.localInstance?.error(message, ...optionalParams);\n  }\n\n  /**\n   * Write a 'log' level log.\n   */\n  log(message: any, context?: string): void;\n  log(message: any, ...optionalParams: [...any, string?]): void;\n  @Logger.WrapBuffer\n  log(message: any, ...optionalParams: any[]) {\n    optionalParams = this.context\n      ? optionalParams.concat(this.context)\n      : optionalParams;\n    this.localInstance?.log(message, ...optionalParams);\n  }\n\n  /**\n   * Write a 'warn' level log.\n   */\n  warn(message: any, context?: string): void;\n  warn(message: any, ...optionalParams: [...any, string?]): void;\n  @Logger.WrapBuffer\n  warn(message: any, ...optionalParams: any[]) {\n    optionalParams = this.context\n      ? optionalParams.concat(this.context)\n      : optionalParams;\n    this.localInstance?.warn(message, ...optionalParams);\n  }\n\n  /**\n   * Write a 'debug' level log.\n   */\n  debug(message: any, context?: string): void;\n  debug(message: any, ...optionalParams: [...any, string?]): void;\n  @Logger.WrapBuffer\n  debug(message: any, ...optionalParams: any[]) {\n    optionalParams = this.context\n      ? optionalParams.concat(this.context)\n      : optionalParams;\n    this.localInstance?.debug?.(message, ...optionalParams);\n  }\n\n  /**\n   * Write a 'verbose' level log.\n   */\n  verbose(message: any, context?: string): void;\n  verbose(message: any, ...optionalParams: [...any, string?]): void;\n  @Logger.WrapBuffer\n  verbose(message: any, ...optionalParams: any[]) {\n    optionalParams = this.context\n      ? optionalParams.concat(this.context)\n      : optionalParams;\n    this.localInstance?.verbose?.(message, ...optionalParams);\n  }\n\n  /**\n   * Write an 'error' level log.\n   */\n  static error(message: any, context?: string): void;\n  static error(message: any, stack?: string, context?: string): void;\n  static error(\n    message: any,\n    ...optionalParams: [...any, string?, string?]\n  ): void;\n  @Logger.WrapBuffer\n  static error(message: any, ...optionalParams: any[]) {\n    this.staticInstanceRef?.error(message, ...optionalParams);\n  }\n\n  /**\n   * Write a 'log' level log.\n   */\n  static log(message: any, context?: string): void;\n  static log(message: any, ...optionalParams: [...any, string?]): void;\n  @Logger.WrapBuffer\n  static log(message: any, ...optionalParams: any[]) {\n    this.staticInstanceRef?.log(message, ...optionalParams);\n  }\n\n  /**\n   * Write a 'warn' level log.\n   */\n  static warn(message: any, context?: string): void;\n  static warn(message: any, ...optionalParams: [...any, string?]): void;\n  @Logger.WrapBuffer\n  static warn(message: any, ...optionalParams: any[]) {\n    this.staticInstanceRef?.warn(message, ...optionalParams);\n  }\n\n  /**\n   * Write a 'debug' level log, if the configured level allows for it.\n   * Prints to `stdout` with newline.\n   */\n  static debug(message: any, context?: string): void;\n  static debug(message: any, ...optionalParams: [...any, string?]): void;\n  @Logger.WrapBuffer\n  static debug(message: any, ...optionalParams: any[]) {\n    this.staticInstanceRef?.debug?.(message, ...optionalParams);\n  }\n\n  /**\n   * Write a 'verbose' level log.\n   */\n  static verbose(message: any, context?: string): void;\n  static verbose(message: any, ...optionalParams: [...any, string?]): void;\n  @Logger.WrapBuffer\n  static verbose(message: any, ...optionalParams: any[]) {\n    this.staticInstanceRef?.verbose?.(message, ...optionalParams);\n  }\n\n  /**\n   * Print buffered logs and detach buffer.\n   */\n  static flush() {\n    this.isBufferAttached = false;\n    this.logBuffer.forEach(item =>\n      item.methodRef(...(item.arguments as [string])),\n    );\n    this.logBuffer = [];\n  }\n\n  /**\n   * Attach buffer.\n   * Turns on initialisation logs buffering.\n   */\n  static attachBuffer() {\n    this.isBufferAttached = true;\n  }\n\n  /**\n   * Detach buffer.\n   * Turns off initialisation logs buffering.\n   */\n  static detachBuffer() {\n    this.isBufferAttached = false;\n  }\n\n  static getTimestamp() {\n    const localeStringOptions = {\n      year: 'numeric',\n      hour: 'numeric',\n      minute: 'numeric',\n      second: 'numeric',\n      day: '2-digit',\n      month: '2-digit',\n    };\n    return new Date(Date.now()).toLocaleString(\n      undefined,\n      localeStringOptions as Intl.DateTimeFormatOptions,\n    );\n  }\n\n  static overrideLogger(logger: LoggerService | LogLevel[] | boolean) {\n    if (Array.isArray(logger)) {\n      Logger.logLevels = logger;\n      return this.staticInstanceRef?.setLogLevels(logger);\n    }\n    if (isObject(logger)) {\n      if (logger instanceof Logger && logger.constructor !== Logger) {\n        const errorMessage = `Using the \"extends Logger\" instruction is not allowed in Nest v8. Please, use \"extends ConsoleLogger\" instead.`;\n        this.staticInstanceRef.error(errorMessage);\n        throw new Error(errorMessage);\n      }\n      this.staticInstanceRef = logger as LoggerService;\n    } else {\n      this.staticInstanceRef = undefined;\n    }\n  }\n\n  static isLevelEnabled(level: LogLevel): boolean {\n    const logLevels = Logger.logLevels;\n    return isLogLevelEnabled(level, logLevels);\n  }\n\n  private registerLocalInstanceRef() {\n    if (this.localInstanceRef) {\n      return this.localInstanceRef;\n    }\n    this.localInstanceRef = new ConsoleLogger(this.context, {\n      timestamp: this.options?.timestamp,\n      logLevels: Logger.logLevels,\n    });\n    return this.localInstanceRef;\n  }\n}\n","import { Injectable } from '../decorators/core/injectable.decorator';\nimport { Optional } from '../decorators/core/optional.decorator';\nimport { clc, yellow } from '../utils/cli-colors.util';\nimport { isPlainObject, isString } from '../utils/shared.utils';\nimport { LoggerService, LogLevel } from './logger.service';\nimport { isLogLevelEnabled } from './utils';\n\nexport interface ConsoleLoggerOptions {\n  /**\n   * Enabled log levels.\n   */\n  logLevels?: LogLevel[];\n  /**\n   * If enabled, will print timestamp (time difference) between current and previous log message.\n   */\n  timestamp?: boolean;\n}\n\nconst DEFAULT_LOG_LEVELS: LogLevel[] = [\n  'log',\n  'error',\n  'warn',\n  'debug',\n  'verbose',\n];\n\n@Injectable()\nexport class ConsoleLogger implements LoggerService {\n  private static lastTimestampAt?: number;\n  private originalContext?: string;\n\n  constructor();\n  constructor(context: string);\n  constructor(context: string, options: ConsoleLoggerOptions);\n  constructor(\n    @Optional()\n    protected context?: string,\n    @Optional()\n    protected options: ConsoleLoggerOptions = {},\n  ) {\n    if (!options.logLevels) {\n      options.logLevels = DEFAULT_LOG_LEVELS;\n    }\n    if (context) {\n      this.originalContext = context;\n    }\n  }\n\n  /**\n   * Write a 'log' level log, if the configured level allows for it.\n   * Prints to `stdout` with newline.\n   */\n  log(message: any, context?: string): void;\n  log(message: any, ...optionalParams: [...any, string?]): void;\n  log(message: any, ...optionalParams: any[]) {\n    if (!this.isLevelEnabled('log')) {\n      return;\n    }\n    const { messages, context } = this.getContextAndMessagesToPrint([\n      message,\n      ...optionalParams,\n    ]);\n    this.printMessages(messages, context, 'log');\n  }\n\n  /**\n   * Write an 'error' level log, if the configured level allows for it.\n   * Prints to `stderr` with newline.\n   */\n  error(message: any, stack?: string, context?: string): void;\n  error(message: any, ...optionalParams: [...any, string?, string?]): void;\n  error(message: any, ...optionalParams: any[]) {\n    if (!this.isLevelEnabled('error')) {\n      return;\n    }\n    const { messages, context, stack } =\n      this.getContextAndStackAndMessagesToPrint([message, ...optionalParams]);\n\n    this.printMessages(messages, context, 'error', 'stderr');\n    this.printStackTrace(stack);\n  }\n\n  /**\n   * Write a 'warn' level log, if the configured level allows for it.\n   * Prints to `stdout` with newline.\n   */\n  warn(message: any, context?: string): void;\n  warn(message: any, ...optionalParams: [...any, string?]): void;\n  warn(message: any, ...optionalParams: any[]) {\n    if (!this.isLevelEnabled('warn')) {\n      return;\n    }\n    const { messages, context } = this.getContextAndMessagesToPrint([\n      message,\n      ...optionalParams,\n    ]);\n    this.printMessages(messages, context, 'warn');\n  }\n\n  /**\n   * Write a 'debug' level log, if the configured level allows for it.\n   * Prints to `stdout` with newline.\n   */\n  debug(message: any, context?: string): void;\n  debug(message: any, ...optionalParams: [...any, string?]): void;\n  debug(message: any, ...optionalParams: any[]) {\n    if (!this.isLevelEnabled('debug')) {\n      return;\n    }\n    const { messages, context } = this.getContextAndMessagesToPrint([\n      message,\n      ...optionalParams,\n    ]);\n    this.printMessages(messages, context, 'debug');\n  }\n\n  /**\n   * Write a 'verbose' level log, if the configured level allows for it.\n   * Prints to `stdout` with newline.\n   */\n  verbose(message: any, context?: string): void;\n  verbose(message: any, ...optionalParams: [...any, string?]): void;\n  verbose(message: any, ...optionalParams: any[]) {\n    if (!this.isLevelEnabled('verbose')) {\n      return;\n    }\n    const { messages, context } = this.getContextAndMessagesToPrint([\n      message,\n      ...optionalParams,\n    ]);\n    this.printMessages(messages, context, 'verbose');\n  }\n\n  /**\n   * Set log levels\n   * @param levels log levels\n   */\n  setLogLevels(levels: LogLevel[]) {\n    if (!this.options) {\n      this.options = {};\n    }\n    this.options.logLevels = levels;\n  }\n\n  /**\n   * Set logger context\n   * @param context context\n   */\n  setContext(context: string) {\n    this.context = context;\n  }\n\n  /**\n   * Resets the logger context to the value that was passed in the constructor.\n   */\n  resetContext() {\n    this.context = this.originalContext;\n  }\n\n  isLevelEnabled(level: LogLevel): boolean {\n    const logLevels = this.options?.logLevels;\n    return isLogLevelEnabled(level, logLevels);\n  }\n\n  protected getTimestamp(): string {\n    const localeStringOptions = {\n      year: 'numeric',\n      hour: 'numeric',\n      minute: 'numeric',\n      second: 'numeric',\n      day: '2-digit',\n      month: '2-digit',\n    };\n    return new Date(Date.now()).toLocaleString(\n      undefined,\n      localeStringOptions as Intl.DateTimeFormatOptions,\n    );\n  }\n\n  protected printMessages(\n    messages: unknown[],\n    context = '',\n    logLevel: LogLevel = 'log',\n    writeStreamType?: 'stdout' | 'stderr',\n  ) {\n    messages.forEach(message => {\n      const pidMessage = this.formatPid(process.pid);\n      const contextMessage = context ? yellow(`[${context}] `) : '';\n      const timestampDiff = this.updateAndGetTimestampDiff();\n      const formattedLogLevel = logLevel.toUpperCase().padStart(7, ' ');\n      const formatedMessage = this.formatMessage(\n        logLevel,\n        message,\n        pidMessage,\n        formattedLogLevel,\n        contextMessage,\n        timestampDiff,\n      );\n\n      process[writeStreamType ?? 'stdout'].write(formatedMessage);\n    });\n  }\n\n  protected formatPid(pid: number) {\n    return `[Nest] ${pid}  - `;\n  }\n\n  protected formatMessage(\n    logLevel: LogLevel,\n    message: unknown,\n    pidMessage: string,\n    formattedLogLevel: string,\n    contextMessage: string,\n    timestampDiff: string,\n  ) {\n    const output = this.stringifyMessage(message, logLevel);\n    pidMessage = this.colorize(pidMessage, logLevel);\n    formattedLogLevel = this.colorize(formattedLogLevel, logLevel);\n    return `${pidMessage}${this.getTimestamp()} ${formattedLogLevel} ${contextMessage}${output}${timestampDiff}\\n`;\n  }\n\n  protected stringifyMessage(message: unknown, logLevel: LogLevel) {\n    return isPlainObject(message)\n      ? `${this.colorize('Object:', logLevel)}\\n${JSON.stringify(\n          message,\n          (key, value) =>\n            typeof value === 'bigint' ? value.toString() : value,\n          2,\n        )}\\n`\n      : this.colorize(message as string, logLevel);\n  }\n\n  protected colorize(message: string, logLevel: LogLevel) {\n    const color = this.getColorByLogLevel(logLevel);\n    return color(message);\n  }\n\n  protected printStackTrace(stack: string) {\n    if (!stack) {\n      return;\n    }\n    process.stderr.write(`${stack}\\n`);\n  }\n\n  private updateAndGetTimestampDiff(): string {\n    const includeTimestamp =\n      ConsoleLogger.lastTimestampAt && this.options?.timestamp;\n    const result = includeTimestamp\n      ? yellow(` +${Date.now() - ConsoleLogger.lastTimestampAt}ms`)\n      : '';\n    ConsoleLogger.lastTimestampAt = Date.now();\n    return result;\n  }\n\n  private getContextAndMessagesToPrint(args: unknown[]) {\n    if (args?.length <= 1) {\n      return { messages: args, context: this.context };\n    }\n    const lastElement = args[args.length - 1];\n    const isContext = isString(lastElement);\n    if (!isContext) {\n      return { messages: args, context: this.context };\n    }\n    return {\n      context: lastElement as string,\n      messages: args.slice(0, args.length - 1),\n    };\n  }\n\n  private getContextAndStackAndMessagesToPrint(args: unknown[]) {\n    const { messages, context } = this.getContextAndMessagesToPrint(args);\n    if (messages?.length <= 1) {\n      return { messages, context };\n    }\n    const lastElement = messages[messages.length - 1];\n    const isStack = isString(lastElement);\n    if (!isStack) {\n      return { messages, context };\n    }\n    return {\n      stack: lastElement as string,\n      messages: messages.slice(0, messages.length - 1),\n      context,\n    };\n  }\n\n  private getColorByLogLevel(level: LogLevel) {\n    switch (level) {\n      case 'debug':\n        return clc.magentaBright;\n      case 'warn':\n        return clc.yellow;\n      case 'error':\n        return clc.red;\n      case 'verbose':\n        return clc.cyanBright;\n      default:\n        return clc.green;\n    }\n  }\n}\n","import { WriteStream } from 'tty';\n\ntype ColorTextFn = (text: string) => string;\n\nconst isColorAllowed = () =>\n  !process.env.NO_COLOR && WriteStream.prototype.hasColors();\nconst colorIfAllowed = (colorFn: ColorTextFn) => (text: string) =>\n  isColorAllowed() ? colorFn(text) : text;\n\nexport const clc = {\n  green: colorIfAllowed((text: string) => `\\x1B[32m${text}\\x1B[39m`),\n  yellow: colorIfAllowed((text: string) => `\\x1B[33m${text}\\x1B[39m`),\n  red: colorIfAllowed((text: string) => `\\x1B[31m${text}\\x1B[39m`),\n  magentaBright: colorIfAllowed((text: string) => `\\x1B[95m${text}\\x1B[39m`),\n  cyanBright: colorIfAllowed((text: string) => `\\x1B[96m${text}\\x1B[39m`),\n};\nexport const yellow = colorIfAllowed(\n  (text: string) => `\\x1B[38;5;3m${text}\\x1B[39m`,\n);\n","export * from './is-log-level-enabled.util';\n","import { LogLevel } from '../logger.service';\n\nconst LOG_LEVEL_VALUES: Record<LogLevel, number> = {\n  debug: 0,\n  verbose: 1,\n  log: 2,\n  warn: 3,\n  error: 4,\n};\n\n/**\n * Checks if target level is enabled.\n * @param targetLevel target level\n * @param logLevels array of enabled log levels\n */\nexport function isLogLevelEnabled(\n  targetLevel: LogLevel,\n  logLevels: LogLevel[] | undefined,\n): boolean {\n  if (!logLevels || (Array.isArray(logLevels) && logLevels?.length === 0)) {\n    return false;\n  }\n  if (logLevels.includes(targetLevel)) {\n    return true;\n  }\n  const highestLogLevelValue = logLevels\n    .map(level => LOG_LEVEL_VALUES[level])\n    .sort((a, b) => b - a)?.[0];\n\n  const targetLevelValue = LOG_LEVEL_VALUES[targetLevel];\n  return targetLevelValue >= highestLogLevelValue;\n}\n","export const defaultCacheOptions = {\n  ttl: 5,\n  max: 100,\n  store: 'memory',\n};\n","export * from './cache-key.decorator';\nexport * from './cache-ttl.decorator';\n","import { SetMetadata } from '../../decorators';\nimport { CACHE_KEY_METADATA } from '../cache.constants';\n\n/**\n * Decorator that sets the caching key used to store/retrieve cached items for\n * Web sockets or Microservice based apps.\n *\n * For example:\n * `@CacheKey('events')`\n *\n * @param key string naming the field to be used as a cache key\n *\n * @see [Caching](https://docs.nestjs.com/techniques/caching)\n *\n * @publicApi\n */\nexport const CacheKey = (key: string) => SetMetadata(CACHE_KEY_METADATA, key);\n","import { SetMetadata } from '../../decorators';\nimport { ExecutionContext } from '../../interfaces/features/execution-context.interface';\nimport { CACHE_TTL_METADATA } from '../cache.constants';\n\n/**\n * Decorator that sets the cache ttl setting the duration for cache expiration.\n *\n * For example: `@CacheTTL(5)`\n *\n * @param ttl number set the cache expiration time\n *\n * @see [Caching](https://docs.nestjs.com/techniques/caching)\n *\n * @publicApi\n */\ntype CacheTTLFactory = (ctx: ExecutionContext) => Promise<number> | number;\nexport const CacheTTL = (ttl: number | CacheTTLFactory) =>\n  SetMetadata(CACHE_TTL_METADATA, ttl);\n","export * from './cache.interceptor';\n","import { Observable, of } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport { Inject, Injectable, Optional } from '../../decorators';\nimport {\n  CallHandler,\n  ExecutionContext,\n  HttpServer,\n  NestInterceptor,\n} from '../../interfaces';\nimport { isFunction, isNil } from '../../utils/shared.utils';\nimport {\n  CACHE_KEY_METADATA,\n  CACHE_MANAGER,\n  CACHE_TTL_METADATA,\n} from '../cache.constants';\n\nconst HTTP_ADAPTER_HOST = 'HttpAdapterHost';\nconst REFLECTOR = 'Reflector';\n\nexport interface HttpAdapterHost<T extends HttpServer = any> {\n  httpAdapter: T;\n}\n\n@Injectable()\nexport class CacheInterceptor implements NestInterceptor {\n  @Optional()\n  @Inject(HTTP_ADAPTER_HOST)\n  protected readonly httpAdapterHost: HttpAdapterHost;\n\n  protected allowedMethods = ['GET'];\n  constructor(\n    @Inject(CACHE_MANAGER) protected readonly cacheManager: any,\n    @Inject(REFLECTOR) protected readonly reflector: any,\n  ) {}\n\n  async intercept(\n    context: ExecutionContext,\n    next: CallHandler,\n  ): Promise<Observable<any>> {\n    const key = this.trackBy(context);\n    const ttlValueOrFactory =\n      this.reflector.get(CACHE_TTL_METADATA, context.getHandler()) ?? null;\n\n    if (!key) {\n      return next.handle();\n    }\n    try {\n      const value = await this.cacheManager.get(key);\n      if (!isNil(value)) {\n        return of(value);\n      }\n      const ttl = isFunction(ttlValueOrFactory)\n        ? await ttlValueOrFactory(context)\n        : ttlValueOrFactory;\n      return next.handle().pipe(\n        tap(response => {\n          const args = isNil(ttl) ? [key, response] : [key, response, { ttl }];\n          this.cacheManager.set(...args);\n        }),\n      );\n    } catch {\n      return next.handle();\n    }\n  }\n\n  protected trackBy(context: ExecutionContext): string | undefined {\n    const httpAdapter = this.httpAdapterHost.httpAdapter;\n    const isHttpApp = httpAdapter && !!httpAdapter.getRequestMethod;\n    const cacheMetadata = this.reflector.get(\n      CACHE_KEY_METADATA,\n      context.getHandler(),\n    );\n\n    if (!isHttpApp || cacheMetadata) {\n      return cacheMetadata;\n    }\n\n    const request = context.getArgByIndex(0);\n    if (!this.isRequestCacheable(context)) {\n      return undefined;\n    }\n    return httpAdapter.getRequestUrl(request);\n  }\n\n  protected isRequestCacheable(context: ExecutionContext): boolean {\n    const req = context.switchToHttp().getRequest();\n    return this.allowedMethods.includes(req.method);\n  }\n}\n","export * from './cache-manager.interface';\nexport * from './cache-module.interface';\n","export interface LiteralObject {\n  [key: string]: any;\n}\n\n/**\n * Interface defining a cache store. Implement this interface to create a custom\n * cache store.\n *\n * @publicApi\n */\nexport interface CacheStore {\n  /**\n   * Create a key/value pair in the cache.\n   *\n   * @param key cache key\n   * @param value cache value\n   */\n  set<T>(\n    key: string,\n    value: T,\n    options?: CacheStoreSetOptions<T>,\n  ): Promise<void> | void;\n  /**\n   * Retrieve a key/value pair from the cache.\n   *\n   * @param key cache key\n   */\n  get<T>(key: string): Promise<T | undefined> | T | undefined;\n  /**\n   * Destroy a key/value pair from the cache.\n   *\n   * @param key cache key\n   */\n  del?(key: string): void | Promise<void>;\n}\n\nexport interface CacheStoreSetOptions<T> {\n  /**\n   * Time to live - amount of time in seconds that a response is cached before it\n   * is deleted. Defaults based on your cache manager settings.\n   */\n  ttl?: ((value: T) => number) | number;\n}\n\n/**\n * Interface defining a factory to create a cache store.\n *\n * @publicApi\n */\nexport interface CacheStoreFactory {\n  /**\n   * Return a configured cache store.\n   *\n   * @param args Cache manager options received from `CacheModule.register()`\n   * or `CacheModule.registerAsync()`\n   */\n  create(args: LiteralObject): CacheStore;\n}\n\n/**\n * Interface defining Cache Manager configuration options.\n *\n * @publicApi\n */\nexport interface CacheManagerOptions {\n  /**\n   * Cache storage manager.  Default is `'memory'` (in-memory store).  See\n   * [Different stores](https://docs.nestjs.com/techniques/caching#different-stores)\n   * for more info.\n   */\n  store?: string | CacheStoreFactory | CacheStore;\n  /**\n   * Time to live - amount of time in seconds that a response is cached before it\n   * is deleted. Subsequent request will call through the route handler and refresh\n   * the cache.  Defaults to 5 seconds.\n   */\n  ttl?: number;\n  /**\n   * Maximum number of responses to store in the cache.  Defaults to 100.\n   */\n  max?: number;\n  isCacheableValue?: (value: any) => boolean;\n}\n","import { ModuleMetadata, Provider, Type } from '../../interfaces';\nimport { CacheManagerOptions } from './cache-manager.interface';\n\nexport type CacheModuleOptions<\n  StoreConfig extends Record<any, any> = Record<string, any>,\n> =\n  // Store-specfic configuration takes precedence over cache module options due\n  // to how `createCacheManager` is implemented.\n  CacheManagerOptions &\n    StoreConfig & {\n      /**\n       * If \"true', register `CacheModule` as a global module.\n       */\n      isGlobal?: boolean;\n    };\n\n/**\n * Interface describing a `CacheOptionsFactory`.  Providers supplying configuration\n * options for the Cache module must implement this interface.\n *\n * @see [Async configuration](https://docs.nestjs.com/techniques/caching#async-configuration)\n *\n * @publicApi\n */\nexport interface CacheOptionsFactory<\n  StoreConfig extends Record<any, any> = Record<string, any>,\n> {\n  createCacheOptions():\n    | Promise<CacheModuleOptions<StoreConfig>>\n    | CacheModuleOptions<StoreConfig>;\n}\n\n/**\n * Options for dynamically configuring the Cache module.\n *\n * @see [Async configuration](https://docs.nestjs.com/techniques/caching#async-configuration)\n *\n * @publicApi\n */\nexport interface CacheModuleAsyncOptions<\n  StoreConfig extends Record<any, any> = Record<string, any>,\n> extends Pick<ModuleMetadata, 'imports'> {\n  /**\n   * Injection token resolving to an existing provider. The provider must implement\n   * the `CacheOptionsFactory` interface.\n   */\n  useExisting?: Type<CacheOptionsFactory<StoreConfig>>;\n  /**\n   * Injection token resolving to a class that will be instantiated as a provider.\n   * The class must implement the `CacheOptionsFactory` interface.\n   */\n  useClass?: Type<CacheOptionsFactory<StoreConfig>>;\n  /**\n   * Function returning options (or a Promise resolving to options) to configure the\n   * cache module.\n   */\n  useFactory?: (\n    ...args: any[]\n  ) =>\n    | Promise<CacheModuleOptions<StoreConfig>>\n    | CacheModuleOptions<StoreConfig>;\n  /**\n   * Dependencies that a Factory may inject.\n   */\n  inject?: any[];\n  extraProviders?: Provider[];\n  /**\n   * If \"true', register `CacheModule` as a global module.\n   */\n  isGlobal?: boolean;\n}\n","export * from './request-method.enum';\nexport * from './http-status.enum';\nexport * from './shutdown-signal.enum';\nexport * from './version-type.enum';\n","export enum HttpStatus {\n  CONTINUE = 100,\n  SWITCHING_PROTOCOLS = 101,\n  PROCESSING = 102,\n  EARLYHINTS = 103,\n  OK = 200,\n  CREATED = 201,\n  ACCEPTED = 202,\n  NON_AUTHORITATIVE_INFORMATION = 203,\n  NO_CONTENT = 204,\n  RESET_CONTENT = 205,\n  PARTIAL_CONTENT = 206,\n  AMBIGUOUS = 300,\n  MOVED_PERMANENTLY = 301,\n  FOUND = 302,\n  SEE_OTHER = 303,\n  NOT_MODIFIED = 304,\n  TEMPORARY_REDIRECT = 307,\n  PERMANENT_REDIRECT = 308,\n  BAD_REQUEST = 400,\n  UNAUTHORIZED = 401,\n  PAYMENT_REQUIRED = 402,\n  FORBIDDEN = 403,\n  NOT_FOUND = 404,\n  METHOD_NOT_ALLOWED = 405,\n  NOT_ACCEPTABLE = 406,\n  PROXY_AUTHENTICATION_REQUIRED = 407,\n  REQUEST_TIMEOUT = 408,\n  CONFLICT = 409,\n  GONE = 410,\n  LENGTH_REQUIRED = 411,\n  PRECONDITION_FAILED = 412,\n  PAYLOAD_TOO_LARGE = 413,\n  URI_TOO_LONG = 414,\n  UNSUPPORTED_MEDIA_TYPE = 415,\n  REQUESTED_RANGE_NOT_SATISFIABLE = 416,\n  EXPECTATION_FAILED = 417,\n  I_AM_A_TEAPOT = 418,\n  MISDIRECTED = 421,\n  UNPROCESSABLE_ENTITY = 422,\n  FAILED_DEPENDENCY = 424,\n  PRECONDITION_REQUIRED = 428,\n  TOO_MANY_REQUESTS = 429,\n  INTERNAL_SERVER_ERROR = 500,\n  NOT_IMPLEMENTED = 501,\n  BAD_GATEWAY = 502,\n  SERVICE_UNAVAILABLE = 503,\n  GATEWAY_TIMEOUT = 504,\n  HTTP_VERSION_NOT_SUPPORTED = 505,\n}\n","/**\n * System signals which shut down a process\n */\nexport enum ShutdownSignal {\n  SIGHUP = 'SIGHUP',\n  SIGINT = 'SIGINT',\n  SIGQUIT = 'SIGQUIT',\n  SIGILL = 'SIGILL',\n  SIGTRAP = 'SIGTRAP',\n  SIGABRT = 'SIGABRT',\n  SIGBUS = 'SIGBUS',\n  SIGFPE = 'SIGFPE',\n  SIGSEGV = 'SIGSEGV',\n  SIGUSR2 = 'SIGUSR2',\n  SIGTERM = 'SIGTERM',\n}\n","/**\n * @publicApi\n */\nexport enum VersioningType {\n  URI,\n  HEADER,\n  MEDIA_TYPE,\n  CUSTOM,\n}\n","export * from './bad-request.exception';\nexport * from './http.exception';\nexport * from './unauthorized.exception';\nexport * from './method-not-allowed.exception';\nexport * from './not-found.exception';\nexport * from './forbidden.exception';\nexport * from './not-acceptable.exception';\nexport * from './request-timeout.exception';\nexport * from './conflict.exception';\nexport * from './gone.exception';\nexport * from './payload-too-large.exception';\nexport * from './unsupported-media-type.exception';\nexport * from './unprocessable-entity.exception';\nexport * from './internal-server-error.exception';\nexport * from './not-implemented.exception';\nexport * from './http-version-not-supported.exception';\nexport * from './bad-gateway.exception';\nexport * from './service-unavailable.exception';\nexport * from './gateway-timeout.exception';\nexport * from './im-a-teapot.exception';\nexport * from './precondition-failed.exception';\nexport * from './misdirected.exception';\n","import { HttpStatus } from '../enums/http-status.enum';\nimport { HttpException } from './http.exception';\n\n/**\n * Defines an HTTP exception for *Bad Request* type errors.\n *\n * @see [Base Exceptions](https://docs.nestjs.com/exception-filters#base-exceptions)\n *\n * @publicApi\n */\nexport class BadRequestException extends HttpException {\n  /**\n   * Instantiate a `BadRequestException` Exception.\n   *\n   * @example\n   * `throw new BadRequestException()`\n   *\n   * @usageNotes\n   * The HTTP response status code will be 400.\n   * - The `objectOrError` argument defines the JSON response body or the message string.\n   * - The `description` argument contains a short description of the HTTP error.\n   *\n   * By default, the JSON response body contains two properties:\n   * - `statusCode`: this will be the value 400.\n   * - `message`: the string `'Bad Request'` by default; override this by supplying\n   * a string in the `objectOrError` parameter.\n   *\n   * If the parameter `objectOrError` is a string, the response body will contain an\n   * additional property, `error`, with a short description of the HTTP error. To override the\n   * entire JSON response body, pass an object instead. Nest will serialize the object\n   * and return it as the JSON response body.\n   *\n   * @param objectOrError string or object describing the error condition.\n   * @param description a short description of the HTTP error.\n   */\n  constructor(\n    objectOrError?: string | object | any,\n    description = 'Bad Request',\n  ) {\n    super(\n      HttpException.createBody(\n        objectOrError,\n        description,\n        HttpStatus.BAD_REQUEST,\n      ),\n      HttpStatus.BAD_REQUEST,\n    );\n  }\n}\n","import { isObject, isString } from '../utils/shared.utils';\n\n/**\n * Defines the base Nest HTTP exception, which is handled by the default\n * Exceptions Handler.\n *\n * @see [Base Exceptions](https://docs.nestjs.com/exception-filters#base-exceptions)\n *\n * @publicApi\n */\nexport class HttpException extends Error {\n  /**\n   * Instantiate a plain HTTP Exception.\n   *\n   * @example\n   * `throw new HttpException()`\n   *\n   * @usageNotes\n   * The constructor arguments define the response and the HTTP response status code.\n   * - The `response` argument (required) defines the JSON response body.\n   * - The `status` argument (required) defines the HTTP Status Code.\n   *\n   * By default, the JSON response body contains two properties:\n   * - `statusCode`: the Http Status Code.\n   * - `message`: a short description of the HTTP error by default; override this\n   * by supplying a string in the `response` parameter.\n   *\n   * To override the entire JSON response body, pass an object to the `createBody`\n   * method. Nest will serialize the object and return it as the JSON response body.\n   *\n   * The `status` argument is required, and should be a valid HTTP status code.\n   * Best practice is to use the `HttpStatus` enum imported from `nestjs/common`.\n   *\n   * @param response string or object describing the error condition.\n   * @param status HTTP response status code.\n   */\n  constructor(\n    private readonly response: string | Record<string, any>,\n    private readonly status: number,\n  ) {\n    super();\n    this.initMessage();\n    this.initName();\n  }\n\n  public initMessage() {\n    if (isString(this.response)) {\n      this.message = this.response;\n    } else if (\n      isObject(this.response) &&\n      isString((this.response as Record<string, any>).message)\n    ) {\n      this.message = (this.response as Record<string, any>).message;\n    } else if (this.constructor) {\n      this.message = this.constructor.name\n        .match(/[A-Z][a-z]+|[0-9]+/g)\n        .join(' ');\n    }\n  }\n\n  public initName(): void {\n    this.name = this.constructor.name;\n  }\n\n  public getResponse(): string | object {\n    return this.response;\n  }\n\n  public getStatus(): number {\n    return this.status;\n  }\n\n  public static createBody(\n    objectOrError: object | string,\n    description?: string,\n    statusCode?: number,\n  ) {\n    if (!objectOrError) {\n      return { statusCode, message: description };\n    }\n    return isObject(objectOrError) && !Array.isArray(objectOrError)\n      ? objectOrError\n      : { statusCode, message: objectOrError, error: description };\n  }\n}\n","import { HttpStatus } from '../enums/http-status.enum';\nimport { HttpException } from './http.exception';\n\n/**\n * Defines an HTTP exception for *Unauthorized* type errors.\n *\n * @see [Base Exceptions](https://docs.nestjs.com/exception-filters#base-exceptions)\n *\n * @publicApi\n */\nexport class UnauthorizedException extends HttpException {\n  /**\n   * Instantiate an `UnauthorizedException` Exception.\n   *\n   * @example\n   * `throw new UnauthorizedException()`\n   *\n   * @usageNotes\n   * The HTTP response status code will be 401.\n   * - The `objectOrError` argument defines the JSON response body or the message string.\n   * - The `description` argument contains a short description of the HTTP error.\n   *\n   * By default, the JSON response body contains two properties:\n   * - `statusCode`: this will be the value 401.\n   * - `message`: the string `'Unauthorized'` by default; override this by supplying\n   * a string in the `objectOrError` parameter.\n   *\n   * If the parameter `objectOrError` is a string, the response body will contain an\n   * additional property, `error`, with a short description of the HTTP error. To override the\n   * entire JSON response body, pass an object instead. Nest will serialize the object\n   * and return it as the JSON response body.\n   *\n   * @param objectOrError string or object describing the error condition.\n   * @param description a short description of the HTTP error.\n   */\n  constructor(\n    objectOrError?: string | object | any,\n    description = 'Unauthorized',\n  ) {\n    super(\n      HttpException.createBody(\n        objectOrError,\n        description,\n        HttpStatus.UNAUTHORIZED,\n      ),\n      HttpStatus.UNAUTHORIZED,\n    );\n  }\n}\n","import { HttpStatus } from '../enums/http-status.enum';\nimport { HttpException } from './http.exception';\n\n/**\n * Defines an HTTP exception for *Method Not Allowed* type errors.\n *\n * @see [Base Exceptions](https://docs.nestjs.com/exception-filters#base-exceptions)\n *\n * @publicApi\n */\nexport class MethodNotAllowedException extends HttpException {\n  /**\n   * Instantiate a `MethodNotAllowedException` Exception.\n   *\n   * @example\n   * `throw new MethodNotAllowedException()`\n   *\n   * @usageNotes\n   * The HTTP response status code will be 405.\n   * - The `objectOrError` argument defines the JSON response body or the message string.\n   * - The `description` argument contains a short description of the HTTP error.\n   *\n   * By default, the JSON response body contains two properties:\n   * - `statusCode`: this will be the value 405.\n   * - `message`: the string `'Method Not Allowed'` by default; override this by supplying\n   * a string in the `objectOrError` parameter.\n   *\n   * If the parameter `objectOrError` is a string, the response body will contain an\n   * additional property, `error`, with a short description of the HTTP error. To override the\n   * entire JSON response body, pass an object instead. Nest will serialize the object\n   * and return it as the JSON response body.\n   *\n   * @param objectOrError string or object describing the error condition.\n   * @param description a short description of the HTTP error.\n   */\n  constructor(\n    objectOrError?: string | object | any,\n    description = 'Method Not Allowed',\n  ) {\n    super(\n      HttpException.createBody(\n        objectOrError,\n        description,\n        HttpStatus.METHOD_NOT_ALLOWED,\n      ),\n      HttpStatus.METHOD_NOT_ALLOWED,\n    );\n  }\n}\n","import { HttpStatus } from '../enums/http-status.enum';\nimport { HttpException } from './http.exception';\n\n/**\n * Defines an HTTP exception for *Not Found* type errors.\n *\n * @see [Base Exceptions](https://docs.nestjs.com/exception-filters#base-exceptions)\n *\n * @publicApi\n */\nexport class NotFoundException extends HttpException {\n  /**\n   * Instantiate a `NotFoundException` Exception.\n   *\n   * @example\n   * `throw new NotFoundException()`\n   *\n   * @usageNotes\n   * The HTTP response status code will be 404.\n   * - The `objectOrError` argument defines the JSON response body or the message string.\n   * - The `description` argument contains a short description of the HTTP error.\n   *\n   * By default, the JSON response body contains two properties:\n   * - `statusCode`: this will be the value 404.\n   * - `message`: the string `'Not Found'` by default; override this by supplying\n   * a string in the `objectOrError` parameter.\n   *\n   * If the parameter `objectOrError` is a string, the response body will contain an\n   * additional property, `error`, with a short description of the HTTP error. To override the\n   * entire JSON response body, pass an object instead. Nest will serialize the object\n   * and return it as the JSON response body.\n   *\n   * @param objectOrError string or object describing the error condition.\n   * @param description a short description of the HTTP error.\n   */\n  constructor(\n    objectOrError?: string | object | any,\n    description = 'Not Found',\n  ) {\n    super(\n      HttpException.createBody(\n        objectOrError,\n        description,\n        HttpStatus.NOT_FOUND,\n      ),\n      HttpStatus.NOT_FOUND,\n    );\n  }\n}\n","import { HttpStatus } from '../enums/http-status.enum';\nimport { HttpException } from './http.exception';\n\n/**\n * Defines an HTTP exception for *Forbidden* type errors.\n *\n * @see [Base Exceptions](https://docs.nestjs.com/exception-filters#base-exceptions)\n *\n * @publicApi\n */\nexport class ForbiddenException extends HttpException {\n  /**\n   * Instantiate a `ForbiddenException` Exception.\n   *\n   * @example\n   * `throw new ForbiddenException()`\n   *\n   * @usageNotes\n   * The HTTP response status code will be 403.\n   * - The `objectOrError` argument defines the JSON response body or the message string.\n   * - The `description` argument contains a short description of the HTTP error.\n   *\n   * By default, the JSON response body contains two properties:\n   * - `statusCode`: this will be the value 403.\n   * - `message`: the string `'Forbidden'` by default; override this by supplying\n   * a string in the `objectOrError` parameter.\n   *\n   * If the parameter `objectOrError` is a string, the response body will contain an\n   * additional property, `error`, with a short description of the HTTP error. To override the\n   * entire JSON response body, pass an object instead. Nest will serialize the object\n   * and return it as the JSON response body.\n   *\n   * @param objectOrError string or object describing the error condition.\n   * @param description a short description of the HTTP error.\n   */\n  constructor(\n    objectOrError?: string | object | any,\n    description = 'Forbidden',\n  ) {\n    super(\n      HttpException.createBody(\n        objectOrError,\n        description,\n        HttpStatus.FORBIDDEN,\n      ),\n      HttpStatus.FORBIDDEN,\n    );\n  }\n}\n","import { HttpStatus } from '../enums/http-status.enum';\nimport { HttpException } from './http.exception';\n\n/**\n * Defines an HTTP exception for *Not Acceptable* type errors.\n *\n * @see [Base Exceptions](https://docs.nestjs.com/exception-filters#base-exceptions)\n *\n * @publicApi\n */\nexport class NotAcceptableException extends HttpException {\n  /**\n   * Instantiate a `NotAcceptableException` Exception.\n   *\n   * @example\n   * `throw new NotAcceptableException()`\n   *\n   * @usageNotes\n   * The HTTP response status code will be 406.\n   * - The `objectOrError` argument defines the JSON response body or the message string.\n   * - The `description` argument contains a short description of the HTTP error.\n   *\n   * By default, the JSON response body contains two properties:\n   * - `statusCode`: this will be the value 406.\n   * - `error`: the string `'Not Acceptable'` by default; override this by supplying\n   * a string in the `error` parameter.\n   *\n   * If the parameter `objectOrError` is a string, the response body will contain an\n   * additional property, `error`, with a short description of the HTTP error. To override the\n   * entire JSON response body, pass an object instead. Nest will serialize the object\n   * and return it as the JSON response body.\n   *\n   * @param objectOrError string or object describing the error condition.\n   * @param description a short description of the HTTP error.\n   */\n  constructor(\n    objectOrError?: string | object | any,\n    description = 'Not Acceptable',\n  ) {\n    super(\n      HttpException.createBody(\n        objectOrError,\n        description,\n        HttpStatus.NOT_ACCEPTABLE,\n      ),\n      HttpStatus.NOT_ACCEPTABLE,\n    );\n  }\n}\n","import { HttpStatus } from '../enums/http-status.enum';\nimport { HttpException } from './http.exception';\n\n/**\n * Defines an HTTP exception for *Request Timeout* type errors.\n *\n * @see [Base Exceptions](https://docs.nestjs.com/exception-filters#base-exceptions)\n *\n * @publicApi\n */\nexport class RequestTimeoutException extends HttpException {\n  /**\n   * Instantiate a `RequestTimeoutException` Exception.\n   *\n   * @example\n   * `throw new RequestTimeoutException()`\n   *\n   * @usageNotes\n   * The HTTP response status code will be 408.\n   * - The `objectOrError` argument defines the JSON response body or the message string.\n   * - The `description` argument contains a short description of the HTTP error.\n   *\n   * By default, the JSON response body contains two properties:\n   * - `statusCode`: this will be the value 408.\n   * - `message`: the string `'Request Timeout'` by default; override this by supplying\n   * a string in the `objectOrError` parameter.\n   *\n   * If the parameter `objectOrError` is a string, the response body will contain an\n   * additional property, `error`, with a short description of the HTTP error. To override the\n   * entire JSON response body, pass an object instead. Nest will serialize the object\n   * and return it as the JSON response body.\n   *\n   * @param objectOrError string or object describing the error condition.\n   * @param description a short description of the HTTP error.\n   */\n  constructor(\n    objectOrError?: string | object | any,\n    description = 'Request Timeout',\n  ) {\n    super(\n      HttpException.createBody(\n        objectOrError,\n        description,\n        HttpStatus.REQUEST_TIMEOUT,\n      ),\n      HttpStatus.REQUEST_TIMEOUT,\n    );\n  }\n}\n","import { HttpStatus } from '../enums/http-status.enum';\nimport { HttpException } from './http.exception';\n\n/**\n * Defines an HTTP exception for *Conflict* type errors.\n *\n * @see [Base Exceptions](https://docs.nestjs.com/exception-filters#base-exceptions)\n *\n * @publicApi\n */\nexport class ConflictException extends HttpException {\n  /**\n   * Instantiate a `ConflictException` Exception.\n   *\n   * @example\n   * `throw new ConflictException()`\n   *\n   * @usageNotes\n   * The HTTP response status code will be 409.\n   * - The `objectOrError` argument defines the JSON response body or the message string.\n   * - The `description` argument contains a short description of the HTTP error.\n   *\n   * By default, the JSON response body contains two properties:\n   * - `statusCode`: this will be the value 409.\n   * - `message`: the string `'Conflict'` by default; override this by supplying\n   * a string in the `objectOrError` parameter.\n   *\n   * If the parameter `objectOrError` is a string, the response body will contain an\n   * additional property, `error`, with a short description of the HTTP error. To override the\n   * entire JSON response body, pass an object instead. Nest will serialize the object\n   * and return it as the JSON response body.\n   *\n   * @param objectOrError string or object describing the error condition.\n   * @param description a short description of the HTTP error.\n   */\n  constructor(objectOrError?: string | object | any, description = 'Conflict') {\n    super(\n      HttpException.createBody(objectOrError, description, HttpStatus.CONFLICT),\n      HttpStatus.CONFLICT,\n    );\n  }\n}\n","import { HttpStatus } from '../enums/http-status.enum';\nimport { HttpException } from './http.exception';\n\n/**\n * Defines an HTTP exception for *Gone* type errors.\n *\n * @see [Base Exceptions](https://docs.nestjs.com/exception-filters#base-exceptions)\n *\n * @publicApi\n */\nexport class GoneException extends HttpException {\n  /**\n   * Instantiate a `GoneException` Exception.\n   *\n   * @example\n   * `throw new GoneException()`\n   *\n   * @usageNotes\n   * The HTTP response status code will be 410.\n   * - The `objectOrError` argument defines the JSON response body or the message string.\n   * - The `description` argument contains a short description of the HTTP error.\n   *\n   * By default, the JSON response body contains two properties:\n   * - `statusCode`: this will be the value 410.\n   * - `message`: the string `'Gone'` by default; override this by supplying\n   * a string in the `objectOrError` parameter.\n   *\n   * If the parameter `objectOrError` is a string, the response body will contain an\n   * additional property, `error`, with a short description of the HTTP error. To override the\n   * entire JSON response body, pass an object instead. Nest will serialize the object\n   * and return it as the JSON response body.\n   *\n   * @param objectOrError string or object describing the error condition.\n   * @param description a short description of the HTTP error.\n   */\n  constructor(objectOrError?: string | object | any, description = 'Gone') {\n    super(\n      HttpException.createBody(objectOrError, description, HttpStatus.GONE),\n      HttpStatus.GONE,\n    );\n  }\n}\n","import { HttpStatus } from '../enums/http-status.enum';\nimport { HttpException } from './http.exception';\n\n/**\n * Defines an HTTP exception for *Payload Too Large* type errors.\n *\n * @see [Base Exceptions](https://docs.nestjs.com/exception-filters#base-exceptions)\n *\n * @publicApi\n */\nexport class PayloadTooLargeException extends HttpException {\n  /**\n   * Instantiate a `PayloadTooLargeException` Exception.\n   *\n   * @example\n   * `throw new PayloadTooLargeException()`\n   *\n   * @usageNotes\n   * The HTTP response status code will be 413.\n   * - The `objectOrError` argument defines the JSON response body or the message string.\n   * - The `description` argument contains a short description of the HTTP error.\n   *\n   * By default, the JSON response body contains two properties:\n   * - `statusCode`: this will be the value 413.\n   * - `message`: the string `'Payload Too Large'` by default; override this by supplying\n   * a string in the `objectOrError` parameter.\n   *\n   * If the parameter `objectOrError` is a string, the response body will contain an\n   * additional property, `error`, with a short description of the HTTP error. To override the\n   * entire JSON response body, pass an object instead. Nest will serialize the object\n   * and return it as the JSON response body.\n   *\n   * @param objectOrError string or object describing the error condition.\n   * @param description a short description of the HTTP error.\n   */\n  constructor(\n    objectOrError?: string | object | any,\n    description = 'Payload Too Large',\n  ) {\n    super(\n      HttpException.createBody(\n        objectOrError,\n        description,\n        HttpStatus.PAYLOAD_TOO_LARGE,\n      ),\n      HttpStatus.PAYLOAD_TOO_LARGE,\n    );\n  }\n}\n","import { HttpStatus } from '../enums/http-status.enum';\nimport { HttpException } from './http.exception';\n\n/**\n * Defines an HTTP exception for *Unsupported Media Type* type errors.\n *\n * @see [Base Exceptions](https://docs.nestjs.com/exception-filters#base-exceptions)\n *\n * @publicApi\n */\nexport class UnsupportedMediaTypeException extends HttpException {\n  /**\n   * Instantiate an `UnsupportedMediaTypeException` Exception.\n   *\n   * @example\n   * `throw new UnsupportedMediaTypeException()`\n   *\n   * @usageNotes\n   * The HTTP response status code will be 415.\n   * - The `objectOrError` argument defines the JSON response body or the message string.\n   * - The `description` argument contains a short description of the HTTP error.\n   *\n   * By default, the JSON response body contains two properties:\n   * - `statusCode`: this will be the value 415.\n   * - `message`: the string `'Unsupported Media Type'` by default; override this by supplying\n   * a string in the `objectOrError` parameter.\n   *\n   * If the parameter `objectOrError` is a string, the response body will contain an\n   * additional property, `error`, with a short description of the HTTP error. To override the\n   * entire JSON response body, pass an object instead. Nest will serialize the object\n   * and return it as the JSON response body.\n   *\n   * @param objectOrError string or object describing the error condition.\n   * @param description a short description of the HTTP error.\n   */\n  constructor(\n    objectOrError?: string | object | any,\n    description = 'Unsupported Media Type',\n  ) {\n    super(\n      HttpException.createBody(\n        objectOrError,\n        description,\n        HttpStatus.UNSUPPORTED_MEDIA_TYPE,\n      ),\n      HttpStatus.UNSUPPORTED_MEDIA_TYPE,\n    );\n  }\n}\n","import { HttpStatus } from '../enums/http-status.enum';\nimport { HttpException } from './http.exception';\n\n/**\n * Defines an HTTP exception for *Unprocessable Entity* type errors.\n *\n * @see [Base Exceptions](https://docs.nestjs.com/exception-filters#base-exceptions)\n *\n * @publicApi\n */\nexport class UnprocessableEntityException extends HttpException {\n  /**\n   * Instantiate an `UnprocessableEntityException` Exception.\n   *\n   * @example\n   * `throw new UnprocessableEntityException()`\n   *\n   * @usageNotes\n   * The HTTP response status code will be 422.\n   * - The `objectOrError` argument defines the JSON response body or the message string.\n   * - The `description` argument contains a short description of the HTTP error.\n   *\n   * By default, the JSON response body contains two properties:\n   * - `statusCode`: this will be the value 422.\n   * - `message`: the string `'Unprocessable Entity'` by default; override this by supplying\n   * a string in the `objectOrError` parameter.\n   *\n   * If the parameter `objectOrError` is a string, the response body will contain an\n   * additional property, `error`, with a short description of the HTTP error. To override the\n   * entire JSON response body, pass an object instead. Nest will serialize the object\n   * and return it as the JSON response body.\n   *\n   * @param objectOrError string or object describing the error condition.\n   * @param description a short description of the HTTP error.\n   */\n  constructor(\n    objectOrError?: string | object | any,\n    description = 'Unprocessable Entity',\n  ) {\n    super(\n      HttpException.createBody(\n        objectOrError,\n        description,\n        HttpStatus.UNPROCESSABLE_ENTITY,\n      ),\n      HttpStatus.UNPROCESSABLE_ENTITY,\n    );\n  }\n}\n","import { HttpStatus } from '../enums/http-status.enum';\nimport { HttpException } from './http.exception';\n\n/**\n * Defines an HTTP exception for *Internal Server Error* type errors.\n *\n * @see [Base Exceptions](https://docs.nestjs.com/exception-filters#base-exceptions)\n *\n * @publicApi\n */\nexport class InternalServerErrorException extends HttpException {\n  /**\n   * Instantiate an `InternalServerErrorException` Exception.\n   *\n   * @example\n   * `throw new InternalServerErrorException()`\n   *\n   * @usageNotes\n   * The HTTP response status code will be 500.\n   * - The `objectOrError` argument defines the JSON response body or the message string.\n   * - The `description` argument contains a short description of the HTTP error.\n   *\n   * By default, the JSON response body contains two properties:\n   * - `statusCode`: this will be the value 500.\n   * - `message`: the string `'Internal Server Error'` by default; override this by supplying\n   * a string in the `objectOrError` parameter.\n   *\n   * If the parameter `objectOrError` is a string, the response body will contain an\n   * additional property, `error`, with a short description of the HTTP error. To override the\n   * entire JSON response body, pass an object instead. Nest will serialize the object\n   * and return it as the JSON response body.\n   *\n   * @param objectOrError string or object describing the error condition.\n   * @param description a short description of the HTTP error.\n   */\n  constructor(\n    objectOrError?: string | object | any,\n    description = 'Internal Server Error',\n  ) {\n    super(\n      HttpException.createBody(\n        objectOrError,\n        description,\n        HttpStatus.INTERNAL_SERVER_ERROR,\n      ),\n      HttpStatus.INTERNAL_SERVER_ERROR,\n    );\n  }\n}\n","import { HttpStatus } from '../enums/http-status.enum';\nimport { HttpException } from './http.exception';\n\n/**\n * Defines an HTTP exception for *Not Implemented* type errors.\n *\n * @see [Base Exceptions](https://docs.nestjs.com/exception-filters#base-exceptions)\n *\n * @publicApi\n */\nexport class NotImplementedException extends HttpException {\n  /**\n   * Instantiate a `NotImplementedException` Exception.\n   *\n   * @example\n   * `throw new NotImplementedException()`\n   *\n   * @usageNotes\n   * The HTTP response status code will be 501.\n   * - The `objectOrError` argument defines the JSON response body or the message string.\n   * - The `description` argument contains a short description of the HTTP error.\n   *\n   * By default, the JSON response body contains two properties:\n   * - `statusCode`: this will be the value 501.\n   * - `message`: the string `'Not Implemented'` by default; override this by supplying\n   * a string in the `objectOrError` parameter.\n   *\n   * If the parameter `objectOrError` is a string, the response body will contain an\n   * additional property, `error`, with a short description of the HTTP error. To override the\n   * entire JSON response body, pass an object instead. Nest will serialize the object\n   * and return it as the JSON response body.\n   *\n   * @param description string or object describing the error condition.\n   * @param error a short description of the HTTP error.\n   */\n  constructor(\n    objectOrError?: string | object | any,\n    description = 'Not Implemented',\n  ) {\n    super(\n      HttpException.createBody(\n        objectOrError,\n        description,\n        HttpStatus.NOT_IMPLEMENTED,\n      ),\n      HttpStatus.NOT_IMPLEMENTED,\n    );\n  }\n}\n","import { HttpStatus } from '../enums/http-status.enum';\nimport { HttpException } from './http.exception';\n\n/**\n * Defines an HTTP exception for *Http Version Not Supported* type errors.\n *\n * @see [Base Exceptions](https://docs.nestjs.com/exception-filters#base-exceptions)\n *\n * @publicApi\n */\nexport class HttpVersionNotSupportedException extends HttpException {\n  /**\n   * Instantiate a `HttpVersionNotSupportedException` Exception.\n   *\n   * @example\n   * `throw new HttpVersionNotSupportedException()`\n   *\n   * @usageNotes\n   * The HTTP response status code will be 505.\n   * - The `objectOrError` argument defines the JSON response body or the message string.\n   * - The `description` argument contains a short description of the HTTP error.\n   *\n   * By default, the JSON response body contains two properties:\n   * - `statusCode`: this will be the value 505.\n   * - `message`: the string `'HTTP Version Not Supported'` by default; override this by supplying\n   * a string in the `objectOrError` parameter.\n   *\n   * If the parameter `objectOrError` is a string, the response body will contain an\n   * additional property, `error`, with a short description of the HTTP error. To override the\n   * entire JSON response body, pass an object instead. Nest will serialize the object\n   * and return it as the JSON response body.\n   *\n   * @param objectOrError string or object describing the error condition.\n   * @param description a short description of the HTTP error.\n   */\n  constructor(\n    objectOrError?: string | object | any,\n    description = 'HTTP Version Not Supported',\n  ) {\n    super(\n      HttpException.createBody(\n        objectOrError,\n        description,\n        HttpStatus.HTTP_VERSION_NOT_SUPPORTED,\n      ),\n      HttpStatus.HTTP_VERSION_NOT_SUPPORTED,\n    );\n  }\n}\n","import { HttpStatus } from '../enums/http-status.enum';\nimport { HttpException } from './http.exception';\n\n/**\n * Defines an HTTP exception for *Bad Gateway* type errors.\n *\n * @see [Base Exceptions](https://docs.nestjs.com/exception-filters#base-exceptions)\n *\n * @publicApi\n */\nexport class BadGatewayException extends HttpException {\n  /**\n   * Instantiate a `BadGatewayException` Exception.\n   *\n   * @example\n   * `throw new BadGatewayException()`\n   *\n   * @usageNotes\n   * The HTTP response status code will be 502.\n   * - The `objectOrError` argument defines the JSON response body or the message string.\n   * - The `description` argument contains a short description of the HTTP error.\n   *\n   * By default, the JSON response body contains two properties:\n   * - `statusCode`: this will be the value 502.\n   * - `message`: the string `'Bad Gateway'` by default; override this by supplying\n   * a string in the `objectOrError` parameter.\n   *\n   * If the parameter `objectOrError` is a string, the response body will contain an\n   * additional property, `error`, with a short description of the HTTP error. To override the\n   * entire JSON response body, pass an object instead. Nest will serialize the object\n   * and return it as the JSON response body.\n   *\n   * @param objectOrError string or object describing the error condition.\n   * @param description a short description of the HTTP error.\n   */\n  constructor(\n    objectOrError?: string | object | any,\n    description = 'Bad Gateway',\n  ) {\n    super(\n      HttpException.createBody(\n        objectOrError,\n        description,\n        HttpStatus.BAD_GATEWAY,\n      ),\n      HttpStatus.BAD_GATEWAY,\n    );\n  }\n}\n","import { HttpStatus } from '../enums/http-status.enum';\nimport { HttpException } from './http.exception';\n\n/**\n * Defines an HTTP exception for *Service Unavailable* type errors.\n *\n * @see [Base Exceptions](https://docs.nestjs.com/exception-filters#base-exceptions)\n *\n * @publicApi\n */\nexport class ServiceUnavailableException extends HttpException {\n  /**\n   * Instantiate a `ServiceUnavailableException` Exception.\n   *\n   * @example\n   * `throw new ServiceUnavailableException()`\n   *\n   * @usageNotes\n   * The HTTP response status code will be 503.\n   * - The `objectOrError` argument defines the JSON response body or the message string.\n   * - The `description` argument contains a short description of the HTTP error.\n   *\n   * By default, the JSON response body contains two properties:\n   * - `statusCode`: this will be the value 503.\n   * - `message`: the string `'Service Unavailable'` by default; override this by supplying\n   * a string in the `objectOrError` parameter.\n   *\n   * If the parameter `objectOrError` is a string, the response body will contain an\n   * additional property, `error`, with a short description of the HTTP error. To override the\n   * entire JSON response body, pass an object instead. Nest will serialize the object\n   * and return it as the JSON response body.\n   *\n   * @param objectOrError string or object describing the error condition.\n   * @param description a short description of the HTTP error.\n   */\n  constructor(\n    objectOrError?: string | object | any,\n    description = 'Service Unavailable',\n  ) {\n    super(\n      HttpException.createBody(\n        objectOrError,\n        description,\n        HttpStatus.SERVICE_UNAVAILABLE,\n      ),\n      HttpStatus.SERVICE_UNAVAILABLE,\n    );\n  }\n}\n","import { HttpStatus } from '../enums/http-status.enum';\nimport { HttpException } from './http.exception';\n\n/**\n * Defines an HTTP exception for *Gateway Timeout* type errors.\n *\n * @see [Base Exceptions](https://docs.nestjs.com/exception-filters#base-exceptions)\n *\n * @publicApi\n */\nexport class GatewayTimeoutException extends HttpException {\n  /**\n   * Instantiate a `GatewayTimeoutException` Exception.\n   *\n   * @example\n   * `throw new GatewayTimeoutException()`\n   *\n   * @usageNotes\n   * The HTTP response status code will be 504.\n   * - The `objectOrError` argument defines the JSON response body or the message string.\n   * - The `description` argument contains a short description of the HTTP error.\n   *\n   * By default, the JSON response body contains two properties:\n   * - `statusCode`: this will be the value 504.\n   * - `message`: the string `'Gateway Timeout'` by default; override this by supplying\n   * a string in the `objectOrError` parameter.\n   *\n   * If the parameter `objectOrError` is a string, the response body will contain an\n   * additional property, `error`, with a short description of the HTTP error. To override the\n   * entire JSON response body, pass an object instead. Nest will serialize the object\n   * and return it as the JSON response body.\n   *\n   * @param objectOrError string or object describing the error condition.\n   * @param description a short description of the HTTP error.\n   */\n  constructor(\n    objectOrError?: string | object | any,\n    description = 'Gateway Timeout',\n  ) {\n    super(\n      HttpException.createBody(\n        objectOrError,\n        description,\n        HttpStatus.GATEWAY_TIMEOUT,\n      ),\n      HttpStatus.GATEWAY_TIMEOUT,\n    );\n  }\n}\n","import { HttpStatus } from '../enums/http-status.enum';\nimport { HttpException } from './http.exception';\n\n/**\n * Defines an HTTP exception for *ImATeapotException* type errors.\n *\n * Any attempt to brew coffee with a teapot should result in the error code\n * \"418 I'm a teapot\". The resulting entity body MAY be short and stout.\n *\n * @see [Base Exceptions](https://docs.nestjs.com/exception-filters#base-exceptions)\n *\n * @publicApi\n */\nexport class ImATeapotException extends HttpException {\n  /**\n   * Instantiate an `ImATeapotException` Exception.\n   *\n   * @example\n   * `throw new ImATeapotException()`\n   *\n   * @usageNotes\n   * The HTTP response status code will be 418.\n   * - The `objectOrError` argument defines the JSON response body or the message string.\n   * - The `description` argument contains a short description of the HTTP error.\n   *\n   * By default, the JSON response body contains two properties:\n   * - `statusCode`: this will be the value 418.\n   * - `message`: the string `\"I'm a Teapot\"` by default; override this by supplying\n   * a string in the `objectOrError` parameter.\n   *\n   * If the parameter `objectOrError` is a string, the response body will contain an\n   * additional property, `error`, with a short description of the HTTP error. To override the\n   * entire JSON response body, pass an object instead. Nest will serialize the object\n   * and return it as the JSON response body.\n   *\n   * @param objectOrError string or object describing the error condition.\n   * @param description a short description of the HTTP error.\n   */\n  constructor(\n    objectOrError?: string | object | any,\n    description = `I'm a teapot`,\n  ) {\n    super(\n      HttpException.createBody(\n        objectOrError,\n        description,\n        HttpStatus.I_AM_A_TEAPOT,\n      ),\n      HttpStatus.I_AM_A_TEAPOT,\n    );\n  }\n}\n","import { HttpStatus } from '../enums/http-status.enum';\nimport { HttpException } from './http.exception';\n\n/**\n * Defines an HTTP exception for *Precondition Failed* type errors.\n *\n * @see [Base Exceptions](https://docs.nestjs.com/exception-filters#base-exceptions)\n *\n * @publicApi\n */\nexport class PreconditionFailedException extends HttpException {\n  /**\n   * Instantiate a `PreconditionFailedException` Exception.\n   *\n   * @example\n   * `throw new PreconditionFailedException()`\n   *\n   * @usageNotes\n   * The HTTP response status code will be 412.\n   * - The `objectOrError` argument defines the JSON response body or the message string.\n   * - The `description` argument contains a short description of the HTTP error.\n   *\n   * By default, the JSON response body contains two properties:\n   * - `statusCode`: this will be the value 412.\n   * - `message`: the string `'Precondition Failed'` by default; override this by supplying\n   * a string in the `objectOrError` parameter.\n   *\n   * If the parameter `objectOrError` is a string, the response body will contain an\n   * additional property, `error`, with a short description of the HTTP error. To override the\n   * entire JSON response body, pass an object instead. Nest will serialize the object\n   * and return it as the JSON response body.\n   *\n   * @param objectOrError string or object describing the error condition.\n   * @param description a short description of the HTTP error.\n   */\n  constructor(\n    objectOrError?: string | object | any,\n    description = 'Precondition Failed',\n  ) {\n    super(\n      HttpException.createBody(\n        objectOrError,\n        description,\n        HttpStatus.PRECONDITION_FAILED,\n      ),\n      HttpStatus.PRECONDITION_FAILED,\n    );\n  }\n}\n","import { HttpStatus } from '../enums/http-status.enum';\nimport { HttpException } from './http.exception';\n\n/**\n * Defines an HTTP exception for *Misdirected* type errors.\n *\n * @see [Base Exceptions](https://docs.nestjs.com/exception-filters#base-exceptions)\n *\n * @publicApi\n */\nexport class MisdirectedException extends HttpException {\n  /**\n   * Instantiate a `MisdirectedException` Exception.\n   *\n   * @example\n   * `throw new MisdirectedException()`\n   *\n   * @usageNotes\n   * The HTTP response status code will be 421.\n   * - The `objectOrError` argument defines the JSON response body or the message string.\n   * - The `description` argument contains a short description of the HTTP error.\n   *\n   * By default, the JSON response body contains two properties:\n   * - `statusCode`: this will be the value 421.\n   * - `message`: the string `'Bad Gateway'` by default; override this by supplying\n   * a string in the `objectOrError` parameter.\n   *\n   * If the parameter `objectOrError` is a string, the response body will contain an\n   * additional property, `error`, with a short description of the HTTP error. To override the\n   * entire JSON response body, pass an object instead. Nest will serialize the object\n   * and return it as the JSON response body.\n   *\n   * @param objectOrError string or object describing the error condition.\n   * @param description a short description of the HTTP error.\n   */\n  constructor(\n    objectOrError?: string | object | any,\n    description = 'Misdirected',\n  ) {\n    super(\n      HttpException.createBody(\n        objectOrError,\n        description,\n        HttpStatus.MISDIRECTED,\n      ),\n      HttpStatus.MISDIRECTED,\n    );\n  }\n}\n","export * from './streamable-file';\n","import { Readable } from 'stream';\nimport { types } from 'util';\nimport { isFunction } from '../utils/shared.utils';\nimport { StreamableFileOptions } from './streamable-options.interface';\n\nexport class StreamableFile {\n  private readonly stream: Readable;\n\n  constructor(buffer: Uint8Array, options?: StreamableFileOptions);\n  constructor(readable: Readable, options?: StreamableFileOptions);\n  constructor(\n    bufferOrReadStream: Uint8Array | Readable,\n    readonly options: StreamableFileOptions = {},\n  ) {\n    if (types.isUint8Array(bufferOrReadStream)) {\n      this.stream = new Readable();\n      this.stream.push(bufferOrReadStream);\n      this.stream.push(null);\n    } else if (bufferOrReadStream.pipe && isFunction(bufferOrReadStream.pipe)) {\n      this.stream = bufferOrReadStream;\n    }\n  }\n\n  getStream(): Readable {\n    return this.stream;\n  }\n\n  getHeaders() {\n    const {\n      type = 'application/octet-stream',\n      disposition = undefined,\n      length = undefined,\n    } = this.options;\n    return {\n      type,\n      disposition,\n      length,\n    };\n  }\n}\n","export * from './http.module';\nexport * from './http.service';\nexport * from './interfaces';\n","import Axios from 'axios';\nimport { Module } from '../decorators/modules/module.decorator';\nimport { DynamicModule, Provider } from '../interfaces';\nimport { randomStringGenerator } from '../utils/random-string-generator.util';\nimport {\n  AXIOS_INSTANCE_TOKEN,\n  HTTP_MODULE_ID,\n  HTTP_MODULE_OPTIONS,\n} from './http.constants';\nimport { HttpService } from './http.service';\nimport {\n  HttpModuleAsyncOptions,\n  HttpModuleOptions,\n  HttpModuleOptionsFactory,\n} from './interfaces';\n\n/**\n * @deprecated \"HttpModule\" (from the \"@nestjs/common\" package) is deprecated and will be removed in the next major release. Please, use the \"@nestjs/axios\" package instead.\n */\n@Module({\n  providers: [\n    HttpService,\n    {\n      provide: AXIOS_INSTANCE_TOKEN,\n      useValue: Axios,\n    },\n  ],\n  exports: [HttpService],\n})\nexport class HttpModule {\n  static register(config: HttpModuleOptions): DynamicModule {\n    return {\n      module: HttpModule,\n      providers: [\n        {\n          provide: AXIOS_INSTANCE_TOKEN,\n          useValue: Axios.create(config),\n        },\n        {\n          provide: HTTP_MODULE_ID,\n          useValue: randomStringGenerator(),\n        },\n      ],\n    };\n  }\n\n  static registerAsync(options: HttpModuleAsyncOptions): DynamicModule {\n    return {\n      module: HttpModule,\n      imports: options.imports,\n      providers: [\n        ...this.createAsyncProviders(options),\n        {\n          provide: AXIOS_INSTANCE_TOKEN,\n          useFactory: (config: HttpModuleOptions) => Axios.create(config),\n          inject: [HTTP_MODULE_OPTIONS],\n        },\n        {\n          provide: HTTP_MODULE_ID,\n          useValue: randomStringGenerator(),\n        },\n        ...(options.extraProviders || []),\n      ],\n    };\n  }\n\n  private static createAsyncProviders(\n    options: HttpModuleAsyncOptions,\n  ): Provider[] {\n    if (options.useExisting || options.useFactory) {\n      return [this.createAsyncOptionsProvider(options)];\n    }\n    return [\n      this.createAsyncOptionsProvider(options),\n      {\n        provide: options.useClass,\n        useClass: options.useClass,\n      },\n    ];\n  }\n\n  private static createAsyncOptionsProvider(\n    options: HttpModuleAsyncOptions,\n  ): Provider {\n    if (options.useFactory) {\n      return {\n        provide: HTTP_MODULE_OPTIONS,\n        useFactory: options.useFactory,\n        inject: options.inject || [],\n      };\n    }\n    return {\n      provide: HTTP_MODULE_OPTIONS,\n      useFactory: async (optionsFactory: HttpModuleOptionsFactory) =>\n        optionsFactory.createHttpOptions(),\n      inject: [options.useExisting || options.useClass],\n    };\n  }\n}\n","import { v4 as uuid } from 'uuid';\n\nexport const randomStringGenerator = () => uuid();\n","export const AXIOS_INSTANCE_TOKEN = 'AXIOS_INSTANCE_TOKEN';\nexport const HTTP_MODULE_ID = 'HTTP_MODULE_ID';\nexport const HTTP_MODULE_OPTIONS = 'HTTP_MODULE_OPTIONS';\n","import Axios, {\n  AxiosInstance,\n  AxiosPromise,\n  AxiosRequestConfig,\n  AxiosResponse,\n  CancelTokenSource,\n} from 'axios';\nimport { Observable } from 'rxjs';\nimport { Inject } from '../decorators';\nimport { Logger } from '../services';\nimport { AXIOS_INSTANCE_TOKEN } from './http.constants';\n\n/**\n * @deprecated \"HttpModule\" (from the \"@nestjs/common\" package) is deprecated and will be removed in the next major release. Please, use the \"@nestjs/axios\" package instead.\n */\nexport class HttpService {\n  private readonly logger = new Logger(HttpService.name);\n\n  constructor(\n    @Inject(AXIOS_INSTANCE_TOKEN)\n    private readonly instance: AxiosInstance = Axios,\n  ) {\n    this.logger.warn(\n      'DEPRECATED! \"HttpModule\" (from the \"@nestjs/common\" package) is deprecated and will be removed in the next major release. Please, use the \"@nestjs/axios\" package instead.',\n    );\n  }\n\n  request<T = any>(config: AxiosRequestConfig): Observable<AxiosResponse<T>> {\n    return this.makeObservable<T>(this.instance.request, config);\n  }\n\n  get<T = any>(\n    url: string,\n    config?: AxiosRequestConfig,\n  ): Observable<AxiosResponse<T>> {\n    return this.makeObservable<T>(this.instance.get, url, config);\n  }\n\n  delete<T = any>(\n    url: string,\n    config?: AxiosRequestConfig,\n  ): Observable<AxiosResponse<T>> {\n    return this.makeObservable<T>(this.instance.delete, url, config);\n  }\n\n  head<T = any>(\n    url: string,\n    config?: AxiosRequestConfig,\n  ): Observable<AxiosResponse<T>> {\n    return this.makeObservable<T>(this.instance.head, url, config);\n  }\n\n  post<T = any>(\n    url: string,\n    data?: any,\n    config?: AxiosRequestConfig,\n  ): Observable<AxiosResponse<T>> {\n    return this.makeObservable<T>(this.instance.post, url, data, config);\n  }\n\n  put<T = any>(\n    url: string,\n    data?: any,\n    config?: AxiosRequestConfig,\n  ): Observable<AxiosResponse<T>> {\n    return this.makeObservable<T>(this.instance.put, url, data, config);\n  }\n\n  patch<T = any>(\n    url: string,\n    data?: any,\n    config?: AxiosRequestConfig,\n  ): Observable<AxiosResponse<T>> {\n    return this.makeObservable<T>(this.instance.patch, url, data, config);\n  }\n\n  get axiosRef(): AxiosInstance {\n    return this.instance;\n  }\n\n  private makeObservable<T>(\n    axios: (...args: any[]) => AxiosPromise<T>,\n    ...args: any[]\n  ) {\n    return new Observable<AxiosResponse<T>>(subscriber => {\n      const config: AxiosRequestConfig = { ...(args[args.length - 1] || {}) };\n\n      let cancelSource: CancelTokenSource;\n      if (!config.cancelToken) {\n        cancelSource = Axios.CancelToken.source();\n        config.cancelToken = cancelSource.token;\n      }\n\n      axios(...args)\n        .then(res => {\n          subscriber.next(res);\n          subscriber.complete();\n        })\n        .catch(err => {\n          subscriber.error(err);\n        });\n      return () => {\n        if (config.responseType === 'stream') {\n          return;\n        }\n\n        if (cancelSource) {\n          cancelSource.cancel();\n        }\n      };\n    });\n  }\n}\n","export * from './console-logger.service';\nexport * from './logger.service';\n","export * from './http-module.interface';\n","import { AxiosRequestConfig } from 'axios';\nimport { ModuleMetadata, Provider, Type } from '../../interfaces';\n\nexport type HttpModuleOptions = AxiosRequestConfig;\n\nexport interface HttpModuleOptionsFactory {\n  createHttpOptions(): Promise<HttpModuleOptions> | HttpModuleOptions;\n}\n\nexport interface HttpModuleAsyncOptions\n  extends Pick<ModuleMetadata, 'imports'> {\n  useExisting?: Type<HttpModuleOptionsFactory>;\n  useClass?: Type<HttpModuleOptionsFactory>;\n  useFactory?: (\n    ...args: any[]\n  ) => Promise<HttpModuleOptions> | HttpModuleOptions;\n  inject?: any[];\n  extraProviders?: Provider[];\n}\n","export * from './abstract.interface';\nexport * from './controllers/controller-metadata.interface';\nexport * from './controllers/controller.interface';\nexport * from './exceptions/exception-filter.interface';\nexport * from './exceptions/rpc-exception-filter.interface';\nexport * from './exceptions/ws-exception-filter.interface';\nexport * from './external/validation-error.interface';\nexport * from './features/arguments-host.interface';\nexport * from './features/can-activate.interface';\nexport * from './features/custom-route-param-factory.interface';\nexport * from './features/execution-context.interface';\nexport * from './features/nest-interceptor.interface';\nexport * from './features/paramtype.interface';\nexport * from './features/pipe-transform.interface';\nexport * from './global-prefix-options.interface';\nexport * from './hooks';\nexport * from './http';\nexport * from './injectable.interface';\nexport * from './microservices/nest-hybrid-application-options.interface';\nexport * from './middleware';\nexport * from './modules';\nexport * from './nest-application-context.interface';\nexport * from './nest-application-options.interface';\nexport * from './nest-application.interface';\nexport * from './nest-microservice.interface';\nexport * from './scope-options.interface';\nexport * from './type.interface';\nexport * from './version-options.interface';\nexport * from './websockets/web-socket-adapter.interface';\n","export interface Abstract<T> extends Function {\n  prototype: T;\n}\n","export interface ControllerMetadata {\n  path?: string;\n}\n","export type Controller = object;\n","import { ArgumentsHost } from '../features/arguments-host.interface';\n\n/**\n * Interface describing implementation of an exception filter.\n *\n * @see [Exception Filters](https://docs.nestjs.com/exception-filters)\n *\n * @publicApi\n */\nexport interface ExceptionFilter<T = any> {\n  /**\n   * Method to implement a custom exception filter.\n   *\n   * @param exception the class of the exception being handled\n   * @param host used to access an array of arguments for\n   * the in-flight request\n   */\n  catch(exception: T, host: ArgumentsHost): any;\n}\n","import { Observable } from 'rxjs';\nimport { ArgumentsHost } from '../features/arguments-host.interface';\n\n/**\n * Interface describing implementation of an RPC exception filter.\n *\n * @see [Exception Filters](https://docs.nestjs.com/microservices/exception-filters)\n *\n * @publicApi\n */\nexport interface RpcExceptionFilter<T = any, R = any> {\n  /**\n   * Method to implement a custom (microservice) exception filter.\n   *\n   * @param exception the type (class) of the exception being handled\n   * @param host used to access an array of arguments for\n   * the in-flight message\n   */\n  catch(exception: T, host: ArgumentsHost): Observable<R>;\n}\n","import { ArgumentsHost } from '../features/arguments-host.interface';\n\n/**\n * Interface describing implementation of a Web Sockets exception filter.\n *\n * @see [Exception Filters](https://docs.nestjs.com/websockets/exception-filters)\n *\n * @publicApi\n */\n\nexport interface WsExceptionFilter<T = any> {\n  /**\n   * Method to implement a custom (web sockets) exception filter.\n   *\n   * @param exception the type (class) of the exception being handled\n   * @param host used to access an array of arguments for\n   * the in-flight message  catch(exception: T, host: ArgumentsHost): any;\n   */\n  catch(exception: T, host: ArgumentsHost): any;\n}\n","/**\n * Validation error description.\n * @see https://github.com/typestack/class-validator\n *\n * class-validator@0.13.0\n *\n * @publicApi\n */\nexport interface ValidationError {\n  /**\n   * Object that was validated.\n   *\n   * OPTIONAL - configurable via the ValidatorOptions.validationError.target option\n   */\n  target?: Record<string, any>;\n  /**\n   * Object's property that hasn't passed validation.\n   */\n  property: string;\n  /**\n   * Value that haven't pass a validation.\n   *\n   * OPTIONAL - configurable via the ValidatorOptions.validationError.value option\n   */\n  value?: any;\n  /**\n   * Constraints that failed validation with error messages.\n   */\n  constraints?: {\n    [type: string]: string;\n  };\n  /**\n   * Contains all nested validation errors of the property.\n   */\n  children?: ValidationError[];\n  /**\n   * A transient set of data passed through to the validation result for response mapping\n   */\n  contexts?: {\n    [type: string]: any;\n  };\n}\n","export type ContextType = 'http' | 'ws' | 'rpc';\n\n/**\n * Methods to obtain request and response objects.\n *\n * @publicApi\n */\nexport interface HttpArgumentsHost {\n  /**\n   * Returns the in-flight `request` object.\n   */\n  getRequest<T = any>(): T;\n  /**\n   * Returns the in-flight `response` object.\n   */\n  getResponse<T = any>(): T;\n  getNext<T = any>(): T;\n}\n\n/**\n * Methods to obtain WebSocket data and client objects.\n *\n * @publicApi\n */\nexport interface WsArgumentsHost {\n  /**\n   * Returns the data object.\n   */\n  getData<T = any>(): T;\n  /**\n   * Returns the client object.\n   */\n  getClient<T = any>(): T;\n}\n\n/**\n * Methods to obtain RPC data object.\n *\n * @publicApi\n */\nexport interface RpcArgumentsHost {\n  /**\n   * Returns the data object.\n   */\n  getData<T = any>(): T;\n\n  /**\n   * Returns the context object.\n   */\n  getContext<T = any>(): T;\n}\n\n/**\n * Provides methods for retrieving the arguments being passed to a handler.\n * Allows choosing the appropriate execution context (e.g., Http, RPC, or\n * WebSockets) to retrieve the arguments from.\n *\n * @publicApi\n */\nexport interface ArgumentsHost {\n  /**\n   * Returns the array of arguments being passed to the handler.\n   */\n  getArgs<T extends Array<any> = any[]>(): T;\n  /**\n   * Returns a particular argument by index.\n   * @param index index of argument to retrieve\n   */\n  getArgByIndex<T = any>(index: number): T;\n  /**\n   * Switch context to RPC.\n   * @returns interface with methods to retrieve RPC arguments\n   */\n  switchToRpc(): RpcArgumentsHost;\n  /**\n   * Switch context to HTTP.\n   * @returns interface with methods to retrieve HTTP arguments\n   */\n  switchToHttp(): HttpArgumentsHost;\n  /**\n   * Switch context to WebSockets.\n   * @returns interface with methods to retrieve WebSockets arguments\n   */\n  switchToWs(): WsArgumentsHost;\n  /**\n   * Returns the current execution context type (string)\n   */\n  getType<TContext extends string = ContextType>(): TContext;\n}\n","import { Observable } from 'rxjs';\nimport { ExecutionContext } from './execution-context.interface';\n\n/**\n * Interface defining the `canActivate()` function that must be implemented\n * by a guard.  Return value indicates whether or not the current request is\n * allowed to proceed.  Return can be either synchronous (`boolean`)\n * or asynchronous (`Promise` or `Observable`).\n *\n * @see [Guards](https://docs.nestjs.com/guards)\n *\n * @publicApi\n */\nexport interface CanActivate {\n  /**\n   * @param context Current execution context. Provides access to details about\n   * the current request pipeline.\n   *\n   * @returns Value indicating whether or not the current request is allowed to\n   * proceed.\n   */\n  canActivate(\n    context: ExecutionContext,\n  ): boolean | Promise<boolean> | Observable<boolean>;\n}\n","export type CustomParamFactory<TData = any, TInput = any, TOutput = any> = (\n  data: TData,\n  input: TInput,\n) => TOutput;\n","import { Type } from '../index';\nimport { ArgumentsHost } from './arguments-host.interface';\n\n/**\n * Interface describing details about the current request pipeline.\n *\n * @see [Execution Context](https://docs.nestjs.com/guards#execution-context)\n *\n * @publicApi\n */\nexport interface ExecutionContext extends ArgumentsHost {\n  /**\n   * Returns the *type* of the controller class which the current handler belongs to.\n   */\n  getClass<T = any>(): Type<T>;\n  /**\n   * Returns a reference to the handler (method) that will be invoked next in the\n   * request pipeline.\n   */\n  getHandler(): Function;\n}\n","import { Observable } from 'rxjs';\nimport { ExecutionContext } from './execution-context.interface';\n\n/**\n * Interface providing access to the response stream.\n *\n * @see [Interceptors](https://docs.nestjs.com/interceptors)\n *\n * @publicApi\n */\nexport interface CallHandler<T = any> {\n  /**\n   * Returns an `Observable` representing the response stream from the route\n   * handler.\n   */\n  handle(): Observable<T>;\n}\n\n/**\n * Interface describing implementation of an interceptor.\n *\n * @see [Interceptors](https://docs.nestjs.com/interceptors)\n *\n * @publicApi\n */\n\nexport interface NestInterceptor<T = any, R = any> {\n  /**\n   * Method to implement a custom interceptor.\n   *\n   * @param context an `ExecutionContext` object providing methods to access the\n   * route handler and class about to be invoked.\n   * @param next a reference to the `CallHandler`, which provides access to an\n   * `Observable` representing the response stream from the route handler.\n   */\n  intercept(\n    context: ExecutionContext,\n    next: CallHandler<T>,\n  ): Observable<R> | Promise<Observable<R>>;\n}\n","export type Paramtype = 'body' | 'query' | 'param' | 'custom';\n","import { Type } from '../type.interface';\nimport { Paramtype } from './paramtype.interface';\n\nexport type Transform<T = any> = (value: T, metadata: ArgumentMetadata) => any;\n\n/**\n * Interface describing a pipe implementation's `transform()` method metadata argument.\n *\n * @see [Pipes](https://docs.nestjs.com/pipes)\n *\n * @publicApi\n */\nexport interface ArgumentMetadata {\n  /**\n   * Indicates whether argument is a body, query, param, or custom parameter\n   */\n  readonly type: Paramtype;\n  /**\n   * Underlying base type (e.g., `String`) of the parameter, based on the type\n   * definition in the route handler.\n   */\n  readonly metatype?: Type<any> | undefined;\n  /**\n   * String passed as an argument to the decorator.\n   * Example: `@Body('userId')` would yield `userId`\n   */\n  readonly data?: string | undefined;\n}\n\n/**\n * Interface describing implementation of a pipe.\n *\n * @see [Pipes](https://docs.nestjs.com/pipes)\n *\n * @publicApi\n */\nexport interface PipeTransform<T = any, R = any> {\n  /**\n   * Method to implement a custom pipe.  Called with two parameters\n   *\n   * @param value argument before it is received by route handler method\n   * @param metadata contains metadata about the value\n   */\n  transform(value: T, metadata: ArgumentMetadata): R;\n}\n","import { RouteInfo } from './middleware';\n\n/**\n * @publicApi\n */\nexport interface GlobalPrefixOptions<T = string | RouteInfo> {\n  exclude?: T[];\n}\n","export * from './before-application-shutdown.interface';\nexport * from './on-application-bootstrap.interface';\nexport * from './on-application-shutdown.interface';\nexport * from './on-destroy.interface';\nexport * from './on-init.interface';\n","export interface BeforeApplicationShutdown {\n  beforeApplicationShutdown(signal?: string): any;\n}\n","/**\n * Interface defining method called once the application has fully started and\n * is bootstrapped.\n *\n * @see [Lifecycle Events](https://docs.nestjs.com/fundamentals/lifecycle-events)\n *\n * @publicApi\n */\nexport interface OnApplicationBootstrap {\n  onApplicationBootstrap(): any;\n}\n","/**\n * Interface defining method to respond to system signals (when application gets\n * shutdown by, e.g., SIGTERM)\n *\n * @see [Lifecycle Events](https://docs.nestjs.com/fundamentals/lifecycle-events)\n *\n * @publicApi\n */\nexport interface OnApplicationShutdown {\n  onApplicationShutdown(signal?: string): any;\n}\n","/**\n * Interface defining method called just before Nest destroys the host module\n * (`app.close()` method has been evaluated).  Use to perform cleanup on\n * resources (e.g., Database connections).\n *\n * @see [Lifecycle Events](https://docs.nestjs.com/fundamentals/lifecycle-events)\n *\n * @publicApi\n */\nexport interface OnModuleDestroy {\n  onModuleDestroy(): any;\n}\n","/**\n * Interface defining method called once the host module has been initialized.\n *\n * @see [Lifecycle Events](https://docs.nestjs.com/fundamentals/lifecycle-events)\n *\n * @publicApi\n */\nexport interface OnModuleInit {\n  onModuleInit(): any;\n}\n","export * from './http-server.interface';\nexport * from './message-event.interface';\n","import { RequestMethod } from '../../enums';\nimport {\n  CorsOptions,\n  CorsOptionsDelegate,\n} from '../../interfaces/external/cors-options.interface';\nimport { NestApplicationOptions } from '../../interfaces/nest-application-options.interface';\nimport { VersioningOptions, VersionValue } from '../version-options.interface';\n\nexport type ErrorHandler<TRequest = any, TResponse = any> = (\n  error: any,\n  req: TRequest,\n  res: TResponse,\n  next?: Function,\n) => any;\nexport type RequestHandler<TRequest = any, TResponse = any> = (\n  req: TRequest,\n  res: TResponse,\n  next?: Function,\n) => any;\n\nexport interface HttpServer<TRequest = any, TResponse = any> {\n  use(\n    handler:\n      | RequestHandler<TRequest, TResponse>\n      | ErrorHandler<TRequest, TResponse>,\n  ): any;\n  use(\n    path: string,\n    handler:\n      | RequestHandler<TRequest, TResponse>\n      | ErrorHandler<TRequest, TResponse>,\n  ): any;\n  get(handler: RequestHandler<TRequest, TResponse>): any;\n  get(path: string, handler: RequestHandler<TRequest, TResponse>): any;\n  post(handler: RequestHandler<TRequest, TResponse>): any;\n  post(path: string, handler: RequestHandler<TRequest, TResponse>): any;\n  head(handler: RequestHandler<TRequest, TResponse>): any;\n  head(path: string, handler: RequestHandler<TRequest, TResponse>): any;\n  delete(handler: RequestHandler<TRequest, TResponse>): any;\n  delete(path: string, handler: RequestHandler<TRequest, TResponse>): any;\n  put(handler: RequestHandler<TRequest, TResponse>): any;\n  put(path: string, handler: RequestHandler<TRequest, TResponse>): any;\n  patch(handler: RequestHandler<TRequest, TResponse>): any;\n  patch(path: string, handler: RequestHandler<TRequest, TResponse>): any;\n  all(path: string, handler: RequestHandler<TRequest, TResponse>): any;\n  all(handler: RequestHandler<TRequest, TResponse>): any;\n  options(handler: RequestHandler<TRequest, TResponse>): any;\n  options(path: string, handler: RequestHandler<TRequest, TResponse>): any;\n  listen(port: number | string, callback?: () => void): any;\n  listen(port: number | string, hostname: string, callback?: () => void): any;\n  reply(response: any, body: any, statusCode?: number): any;\n  status(response: any, statusCode: number): any;\n  render(response: any, view: string, options: any): any;\n  redirect(response: any, statusCode: number, url: string): any;\n  setHeader(response: any, name: string, value: string): any;\n  setErrorHandler?(handler: Function, prefix?: string): any;\n  setNotFoundHandler?(handler: Function, prefix?: string): any;\n  useStaticAssets?(...args: any[]): this;\n  setBaseViewsDir?(path: string | string[]): this;\n  setViewEngine?(engineOrOptions: any): this;\n  createMiddlewareFactory(\n    method: RequestMethod,\n  ):\n    | ((path: string, callback: Function) => any)\n    | Promise<(path: string, callback: Function) => any>;\n  getRequestHostname?(request: TRequest): string;\n  getRequestMethod?(request: TRequest): string;\n  getRequestUrl?(request: TRequest): string;\n  getInstance(): any;\n  registerParserMiddleware(): any;\n  enableCors(options: CorsOptions | CorsOptionsDelegate<TRequest>): any;\n  getHttpServer(): any;\n  initHttpServer(options: NestApplicationOptions): void;\n  close(): any;\n  getType(): string;\n  init?(): Promise<void>;\n  applyVersionFilter?(\n    handler: Function,\n    version: VersionValue,\n    versioningOptions: VersioningOptions,\n  ): <TRequest extends Record<string, any> = any, TResponse = any>(\n    req: TRequest,\n    res: TResponse,\n    next: () => void,\n  ) => any;\n}\n","export interface MessageEvent {\n  data: string | object;\n  id?: string;\n  type?: string;\n  retry?: number;\n}\n","export type Injectable = unknown;\n","export interface NestHybridApplicationOptions {\n  inheritAppConfig?: boolean;\n}\n","export * from './middleware-config-proxy.interface';\nexport * from './middleware-configuration.interface';\nexport * from './middleware-consumer.interface';\nexport * from './nest-middleware.interface';\n","import { Type } from '../type.interface';\nimport { RouteInfo } from './middleware-configuration.interface';\nimport { MiddlewareConsumer } from './middleware-consumer.interface';\n\nexport interface MiddlewareConfigProxy {\n  /**\n   * Excludes routes from the currently processed middleware.\n   *\n   * @param {(string | RouteInfo)[]} routes\n   * @returns {MiddlewareConfigProxy}\n   */\n  exclude(...routes: (string | RouteInfo)[]): MiddlewareConfigProxy;\n\n  /**\n   * Attaches passed either routes or controllers to the currently configured middleware.\n   * If you pass a class, Nest would attach middleware to every path defined within this controller.\n   *\n   * @param {(string | Type | RouteInfo)[]} routes\n   * @returns {MiddlewareConsumer}\n   */\n  forRoutes(...routes: (string | Type<any> | RouteInfo)[]): MiddlewareConsumer;\n}\n","import { RequestMethod } from '../../enums';\nimport { Type } from '../type.interface';\n\nexport interface RouteInfo {\n  path: string;\n  method: RequestMethod;\n}\n\nexport interface MiddlewareConfiguration<T = any> {\n  middleware: T;\n  forRoutes: (Type<any> | string | RouteInfo)[];\n}\n","import { Type } from '../type.interface';\nimport { MiddlewareConfigProxy } from './middleware-config-proxy.interface';\n\n/**\n * Interface defining method for applying user defined middleware to routes.\n *\n * @see [MiddlewareConsumer](https://docs.nestjs.com/middleware#middleware-consumer)\n *\n * @publicApi\n */\nexport interface MiddlewareConsumer {\n  /**\n   * @param {...(Type | Function)} middleware middleware class/function or array of classes/functions\n   * to be attached to the passed routes.\n   *\n   * @returns {MiddlewareConfigProxy}\n   */\n  apply(...middleware: (Type<any> | Function)[]): MiddlewareConfigProxy;\n}\n","export interface NestMiddleware<TRequest = any, TResponse = any> {\n  use(req: TRequest, res: TResponse, next: (error?: Error | any) => void): any;\n}\n","export * from './dynamic-module.interface';\nexport * from './forward-reference.interface';\nexport * from './injection-token.interface';\nexport * from './introspection-result.interface';\nexport * from './module-metadata.interface';\nexport * from './nest-module.interface';\nexport * from './optional-factory-dependency.interface';\nexport * from './provider.interface';\n","import { Type } from '../type.interface';\nimport { ModuleMetadata } from './module-metadata.interface';\n\n/**\n * Interface defining a Dynamic Module.\n *\n * @see [Dynamic Modules](https://docs.nestjs.com/modules#dynamic-modules)\n *\n * @publicApi\n */\nexport interface DynamicModule extends ModuleMetadata {\n  /**\n   * A module reference\n   */\n  module: Type<any>;\n\n  /**\n   * When \"true\", makes a module global-scoped.\n   *\n   * Once imported into any module, a global-scoped module will be visible\n   * in all modules. Thereafter, modules that wish to inject a service exported\n   * from a global module do not need to import the provider module.\n   *\n   * @default false\n   */\n  global?: boolean;\n}\n","export interface ForwardReference<T = any> {\n  forwardRef: T;\n}\n","import { Abstract } from '../abstract.interface';\nimport { Type } from '../type.interface';\n\nexport type InjectionToken =\n  | string\n  | symbol\n  | Type<any>\n  | Abstract<any>\n  | Function;\n","import { Scope } from '../scope-options.interface';\n\n/**\n * @publicApi\n */\nexport interface IntrospectionResult {\n  /**\n   * Enum defining lifetime of host class or factory.\n   */\n  scope: Scope;\n}\n","import { Abstract } from '../abstract.interface';\nimport { Type } from '../type.interface';\nimport { DynamicModule } from './dynamic-module.interface';\nimport { ForwardReference } from './forward-reference.interface';\nimport { Provider } from './provider.interface';\n\n/**\n * Interface defining the property object that describes the module.\n *\n * @see [Modules](https://docs.nestjs.com/modules)\n *\n * @publicApi\n */\nexport interface ModuleMetadata {\n  /**\n   * Optional list of imported modules that export the providers which are\n   * required in this module.\n   */\n  imports?: Array<\n    Type<any> | DynamicModule | Promise<DynamicModule> | ForwardReference\n  >;\n  /**\n   * Optional list of controllers defined in this module which have to be\n   * instantiated.\n   */\n  controllers?: Type<any>[];\n  /**\n   * Optional list of providers that will be instantiated by the Nest injector\n   * and that may be shared at least across this module.\n   */\n  providers?: Provider[];\n  /**\n   * Optional list of the subset of providers that are provided by this module\n   * and should be available in other modules which import this module.\n   */\n  exports?: Array<\n    | DynamicModule\n    | Promise<DynamicModule>\n    | string\n    | symbol\n    | Provider\n    | ForwardReference\n    | Abstract<any>\n    | Function\n  >;\n}\n","import { MiddlewareConsumer } from '../middleware/middleware-consumer.interface';\n\nexport interface NestModule {\n  configure(consumer: MiddlewareConsumer);\n}\n","import { InjectionToken } from './injection-token.interface';\n\nexport type OptionalFactoryDependency = {\n  token: InjectionToken;\n  optional: boolean;\n};\n","import { Scope } from '../scope-options.interface';\nimport { Type } from '../type.interface';\nimport { InjectionToken } from './injection-token.interface';\nimport { OptionalFactoryDependency } from './optional-factory-dependency.interface';\n\n/**\n *\n * @publicApi\n */\nexport type Provider<T = any> =\n  | Type<any>\n  | ClassProvider<T>\n  | ValueProvider<T>\n  | FactoryProvider<T>\n  | ExistingProvider<T>;\n\n/**\n * Interface defining a *Class* type provider.\n *\n * For example:\n * ```typescript\n * const configServiceProvider = {\n * provide: ConfigService,\n * useClass:\n *   process.env.NODE_ENV === 'development'\n *     ? DevelopmentConfigService\n *     : ProductionConfigService,\n * };\n * ```\n *\n * @see [Use class](https://docs.nestjs.com/fundamentals/custom-providers#use-class)\n * @see [Injection scopes](https://docs.nestjs.com/fundamentals/injection-scopes)\n *\n * @publicApi\n */\nexport interface ClassProvider<T = any> {\n  /**\n   * Injection token\n   */\n  provide: InjectionToken;\n  /**\n   * Type (class name) of provider (instance to be injected).\n   */\n  useClass: Type<T>;\n  /**\n   * Optional enum defining lifetime of the provider that is injected.\n   */\n  scope?: Scope;\n}\n\n/**\n * Interface defining a *Value* type provider.\n *\n * For example:\n * ```typescript\n * const connectionProvider = {\n *   provide: 'CONNECTION',\n *   useValue: connection,\n * };\n * ```\n *\n * @see [Use value](https://docs.nestjs.com/fundamentals/custom-providers#use-value)\n *\n * @publicApi\n */\nexport interface ValueProvider<T = any> {\n  /**\n   * Injection token\n   */\n  provide: InjectionToken;\n  /**\n   * Instance of a provider to be injected.\n   */\n  useValue: T;\n}\n\n/**\n * Interface defining a *Factory* type provider.\n *\n * For example:\n * ```typescript\n * const connectionFactory = {\n *   provide: 'CONNECTION',\n *   useFactory: (optionsProvider: OptionsProvider) => {\n *     const options = optionsProvider.get();\n *     return new DatabaseConnection(options);\n *   },\n *   inject: [OptionsProvider],\n * };\n * ```\n *\n * @see [Use factory](https://docs.nestjs.com/fundamentals/custom-providers#use-factory)\n * @see [Injection scopes](https://docs.nestjs.com/fundamentals/injection-scopes)\n *\n * @publicApi\n */\nexport interface FactoryProvider<T = any> {\n  /**\n   * Injection token\n   */\n  provide: InjectionToken;\n  /**\n   * Factory function that returns an instance of the provider to be injected.\n   */\n  useFactory: (...args: any[]) => T;\n  /**\n   * Optional list of providers to be injected into the context of the Factory function.\n   */\n  inject?: Array<InjectionToken | OptionalFactoryDependency>;\n  /**\n   * Optional enum defining lifetime of the provider that is returned by the Factory function.\n   */\n  scope?: Scope;\n}\n\n/**\n * Interface defining an *Existing* (aliased) type provider.\n *\n * For example:\n * ```typescript\n * const loggerAliasProvider = {\n *   provide: 'AliasedLoggerService',\n *   useExisting: LoggerService\n * };\n * ```\n *\n * @see [Use existing](https://docs.nestjs.com/fundamentals/custom-providers#use-existing)\n *\n * @publicApi\n */\nexport interface ExistingProvider<T = any> {\n  /**\n   * Injection token\n   */\n  provide: InjectionToken;\n  /**\n   * Provider to be aliased by the Injection token.\n   */\n  useExisting: any;\n}\n","import { ShutdownSignal } from '../enums/shutdown-signal.enum';\nimport { LoggerService, LogLevel } from '../services/logger.service';\nimport { DynamicModule } from './modules';\nimport { Type } from './type.interface';\n\n/**\n * Interface defining NestApplicationContext.\n *\n * @publicApi\n */\nexport interface INestApplicationContext {\n  /**\n   * Allows navigating through the modules tree, for example, to pull out a specific instance from the selected module.\n   * @returns {INestApplicationContext}\n   */\n  select<T>(module: Type<T> | DynamicModule): INestApplicationContext;\n\n  /**\n   * Retrieves an instance of either injectable or controller, otherwise, throws exception.\n   * @returns {TResult}\n   */\n  get<TInput = any, TResult = TInput>(\n    typeOrToken: Type<TInput> | Function | string | symbol,\n    options?: { strict: boolean },\n  ): TResult;\n\n  /**\n   * Resolves transient or request-scoped instance of either injectable or controller, otherwise, throws exception.\n   * @returns {Promise<TResult>}\n   */\n  resolve<TInput = any, TResult = TInput>(\n    typeOrToken: Type<TInput> | Function | string | symbol,\n    contextId?: { id: number },\n    options?: { strict: boolean },\n  ): Promise<TResult>;\n\n  /**\n   * Registers the request/context object for a given context ID (DI container sub-tree).\n   * @returns {void}\n   */\n  registerRequestByContextId<T = any>(\n    request: T,\n    contextId: { id: number },\n  ): void;\n\n  /**\n   * Terminates the application\n   * @returns {Promise<void>}\n   */\n  close(): Promise<void>;\n\n  /**\n   * Sets custom logger service.\n   * Flushes buffered logs if auto flush is on.\n   * @returns {void}\n   */\n  useLogger(logger: LoggerService | LogLevel[] | false): void;\n\n  /**\n   * Prints buffered logs and detaches buffer.\n   * @returns {void}\n   */\n  flushLogs(): void;\n\n  /**\n   * Enables the usage of shutdown hooks. Will call the\n   * `onApplicationShutdown` function of a provider if the\n   * process receives a shutdown signal.\n   *\n   * @returns {this} The Nest application context instance\n   */\n  enableShutdownHooks(signals?: ShutdownSignal[] | string[]): this;\n\n  /**\n   * Initalizes the Nest application.\n   * Calls the Nest lifecycle events.\n   * It isn't mandatory to call this method directly.\n   *\n   * @returns {Promise<this>} The NestApplicationContext instance as Promise\n   */\n  init(): Promise<this>;\n}\n","import {\n  CorsOptions,\n  CorsOptionsDelegate,\n} from './external/cors-options.interface';\nimport { HttpsOptions } from './external/https-options.interface';\nimport { NestApplicationContextOptions } from './nest-application-context-options.interface';\n\n/**\n * @publicApi\n */\nexport interface NestApplicationOptions extends NestApplicationContextOptions {\n  /**\n   * CORS options from [CORS package](https://github.com/expressjs/cors#configuration-options)\n   */\n  cors?: boolean | CorsOptions | CorsOptionsDelegate<any>;\n  /**\n   * Whether to use underlying platform body parser.\n   */\n  bodyParser?: boolean;\n  /**\n   * Set of configurable HTTPS options\n   */\n  httpsOptions?: HttpsOptions;\n}\n","import {\n  CorsOptions,\n  CorsOptionsDelegate,\n} from './external/cors-options.interface';\nimport { CanActivate } from './features/can-activate.interface';\nimport { NestInterceptor } from './features/nest-interceptor.interface';\nimport { GlobalPrefixOptions } from './global-prefix-options.interface';\nimport { HttpServer } from './http/http-server.interface';\nimport {\n  ExceptionFilter,\n  INestMicroservice,\n  NestHybridApplicationOptions,\n  PipeTransform,\n} from './index';\nimport { INestApplicationContext } from './nest-application-context.interface';\nimport { VersioningOptions } from './version-options.interface';\nimport { WebSocketAdapter } from './websockets/web-socket-adapter.interface';\n\n/**\n * Interface defining the core NestApplication object.\n *\n * @publicApi\n */\nexport interface INestApplication extends INestApplicationContext {\n  /**\n   * A wrapper function around HTTP adapter method: `adapter.use()`.\n   * Example `app.use(cors())`\n   *\n   * @returns {this}\n   */\n  use(...args: any[]): this;\n\n  /**\n   * Enables CORS (Cross-Origin Resource Sharing)\n   *\n   * @returns {void}\n   */\n  enableCors(options?: CorsOptions | CorsOptionsDelegate<any>): void;\n\n  /**\n   * Enables Versioning for the application.\n   * By default, URI-based versioning is used.\n   *\n   * @param {VersioningOptions} options\n   * @returns {this}\n   */\n  enableVersioning(options?: VersioningOptions): this;\n\n  /**\n   * Starts the application.\n   *\n   * @param {number|string} port\n   * @param {string} [hostname]\n   * @param {Function} [callback] Optional callback\n   * @returns {Promise} A Promise that, when resolved, is a reference to the underlying HttpServer.\n   */\n  listen(port: number | string, callback?: () => void): Promise<any>;\n  listen(\n    port: number | string,\n    hostname: string,\n    callback?: () => void,\n  ): Promise<any>;\n\n  /**\n   * Starts the application (can be awaited).\n   * @deprecated use \"listen\" instead.\n   *\n   * @param {number|string} port\n   * @param {string} [hostname]\n   * @returns {Promise}\n   */\n  listenAsync(port: number | string, hostname?: string): Promise<any>;\n\n  /**\n   * Returns the url the application is listening at, based on OS and IP version. Returns as an IP value either in IPv6 or IPv4\n   *\n   * @returns {Promise<string>} The IP where the server is listening\n   */\n  getUrl(): Promise<string>;\n\n  /**\n   * Registers a prefix for every HTTP route path.\n   *\n   * @param {string} prefix The prefix for every HTTP route path (for example `/v1/api`)\n   * @param {GlobalPrefixOptions} options Global prefix options object\n   * @returns {this}\n   */\n  setGlobalPrefix(prefix: string, options?: GlobalPrefixOptions): this;\n\n  /**\n   * Register Ws Adapter which will be used inside Gateways.\n   * Use when you want to override default `socket.io` library.\n   *\n   * @param {WebSocketAdapter} adapter\n   * @returns {this}\n   */\n  useWebSocketAdapter(adapter: WebSocketAdapter): this;\n\n  /**\n   * Connects microservice to the NestApplication instance. Transforms application\n   * to a hybrid instance.\n   *\n   * @template {object} T\n   * @param {T} options Microservice options object\n   * @param {NestHybridApplicationOptions} hybridOptions Hybrid options object\n   * @returns {INestMicroservice}\n   */\n  connectMicroservice<T extends object = any>(\n    options: T,\n    hybridOptions?: NestHybridApplicationOptions,\n  ): INestMicroservice;\n\n  /**\n   * Returns array of the microservices connected to the NestApplication.\n   *\n   * @returns {INestMicroservice[]}\n   */\n  getMicroservices(): INestMicroservice[];\n\n  /**\n   * Returns the underlying native HTTP server.\n   *\n   * @returns {*}\n   */\n  getHttpServer(): any;\n\n  /**\n   * Returns the underlying HTTP adapter.\n   *\n   * @returns {HttpServer}\n   */\n  getHttpAdapter(): HttpServer;\n\n  /**\n   * Starts all connected microservices asynchronously.\n   *\n   * @returns {Promise}\n   */\n  startAllMicroservices(): Promise<this>;\n\n  /**\n   * Starts all connected microservices and can be awaited.\n   * @deprecated use \"startAllMicroservices\" instead.\n   *\n   * @returns {Promise}\n   */\n  startAllMicroservicesAsync(): Promise<this>;\n\n  /**\n   * Registers exception filters as global filters (will be used within\n   * every HTTP route handler)\n   *\n   * @param {...ExceptionFilter} filters\n   */\n  useGlobalFilters(...filters: ExceptionFilter[]): this;\n\n  /**\n   * Registers pipes as global pipes (will be used within every HTTP route handler)\n   *\n   * @param {...PipeTransform} pipes\n   */\n  useGlobalPipes(...pipes: PipeTransform<any>[]): this;\n\n  /**\n   * Registers interceptors as global interceptors (will be used within\n   * every HTTP route handler)\n   *\n   * @param {...NestInterceptor} interceptors\n   */\n  useGlobalInterceptors(...interceptors: NestInterceptor[]): this;\n\n  /**\n   * Registers guards as global guards (will be used within every HTTP route handler)\n   *\n   * @param {...CanActivate} guards\n   */\n  useGlobalGuards(...guards: CanActivate[]): this;\n\n  /**\n   * Terminates the application (including NestApplication, Gateways, and each connected\n   * microservice)\n   *\n   * @returns {Promise<void>}\n   */\n  close(): Promise<void>;\n}\n","import { ExceptionFilter } from './exceptions/exception-filter.interface';\nimport { CanActivate } from './features/can-activate.interface';\nimport { NestInterceptor } from './features/nest-interceptor.interface';\nimport { PipeTransform } from './features/pipe-transform.interface';\nimport { INestApplicationContext } from './nest-application-context.interface';\nimport { WebSocketAdapter } from './websockets/web-socket-adapter.interface';\n\n/**\n * Interface describing Microservice Context.\n *\n * @publicApi\n */\nexport interface INestMicroservice extends INestApplicationContext {\n  /**\n   * Starts the microservice.\n   *\n   * @returns {void}\n   */\n  listen(): Promise<any>;\n\n  /**\n   * Starts the microservice (can be awaited).\n   * @deprecated use \"listen\" instead.\n   *\n   * @returns {Promise}\n   */\n  listenAsync(): Promise<any>;\n\n  /**\n   * Register Ws Adapter which will be used inside Gateways.\n   * Use when you want to override default `socket.io` library.\n   *\n   * @param {WebSocketAdapter} adapter\n   * @returns {this}\n   */\n  useWebSocketAdapter(adapter: WebSocketAdapter): this;\n\n  /**\n   * Registers exception filters as global filters (will be used within every message pattern handler)\n   *\n   * @param {...ExceptionFilter} filters\n   */\n  useGlobalFilters(...filters: ExceptionFilter[]): this;\n\n  /**\n   * Registers pipes as global pipes (will be used within every message pattern handler)\n   *\n   * @param {...PipeTransform} pipes\n   */\n  useGlobalPipes(...pipes: PipeTransform<any>[]): this;\n\n  /**\n   * Registers interceptors as global interceptors (will be used within every message pattern handler)\n   *\n   * @param {...NestInterceptor} interceptors\n   */\n  useGlobalInterceptors(...interceptors: NestInterceptor[]): this;\n\n  /**\n   * Registers guards as global guards (will be used within every message pattern handler)\n   *\n   * @param {...CanActivate} guards\n   */\n  useGlobalGuards(...guards: CanActivate[]): this;\n\n  /**\n   * Terminates the application\n   *\n   * @returns {Promise<void>}\n   */\n  close(): Promise<void>;\n}\n","/**\n * @publicApi\n */\nexport enum Scope {\n  /**\n   * The provider can be shared across multiple classes. The provider lifetime\n   * is strictly tied to the application lifecycle. Once the application has\n   * bootstrapped, all providers have been instantiated.\n   */\n  DEFAULT,\n  /**\n   * A new private instance of the provider is instantiated for every use\n   */\n  TRANSIENT,\n  /**\n   * A new instance is instantiated for each request processing pipeline\n   */\n  REQUEST,\n}\n\n/**\n * @publicApi\n *\n * @see [Injection Scopes](https://docs.nestjs.com/fundamentals/injection-scopes)\n */\nexport interface ScopeOptions {\n  /**\n   * Specifies the lifetime of an injected Provider or Controller.\n   */\n  scope?: Scope;\n}\n","export interface Type<T = any> extends Function {\n  new (...args: any[]): T;\n}\n","import { VersioningType } from '../enums/version-type.enum';\n\n/**\n * Indicates that this will work for any version passed in the request, or no version.\n *\n * @publicApi\n */\nexport const VERSION_NEUTRAL = Symbol('VERSION_NEUTRAL');\n\nexport type VersionValue =\n  | string\n  | typeof VERSION_NEUTRAL\n  | Array<string | typeof VERSION_NEUTRAL>;\n\n/**\n * @publicApi\n */\nexport interface VersionOptions {\n  /**\n   * Specifies an optional API Version. When configured, methods\n   * withing the controller will only be routed if the request version\n   * matches the specified value.\n   *\n   * Supported only by HTTP-based applications (does not apply to non-HTTP microservices).\n   *\n   * @see [Versioning](https://docs.nestjs.com/techniques/versioning)\n   */\n  version?: VersionValue;\n}\n\nexport interface HeaderVersioningOptions {\n  type: VersioningType.HEADER;\n  /**\n   * The name of the Request Header that contains the version.\n   */\n  header: string;\n}\n\nexport interface UriVersioningOptions {\n  type: VersioningType.URI;\n  /**\n   * Optional prefix that will prepend the version within the URI.\n   *\n   * Defaults to `v`.\n   *\n   * Ex. Assuming a version of `1`, for `/api/v1/route`, `v` is the prefix.\n   */\n  prefix?: string | false;\n}\n\nexport interface MediaTypeVersioningOptions {\n  type: VersioningType.MEDIA_TYPE;\n  /**\n   * The key within the Media Type Header to determine the version from.\n   *\n   * Ex. For `application/json;v=1`, the key is `v=`.\n   */\n  key: string;\n}\n\nexport interface CustomVersioningOptions {\n  type: VersioningType.CUSTOM;\n\n  /**\n   * A function that accepts a request object (specific to the underlying platform, ie Express or Fastify)\n   * and returns a single version value or an ordered array of versions, in order from HIGHEST to LOWEST.\n   *\n   * Ex. Returned version array = ['3.1', '3.0', '2.5', '2', '1.9']\n   *\n   * Use type assertion or narrowing to identify the specific request type.\n   */\n  extractor: (request: unknown) => string | string[];\n}\n\ninterface VersioningCommonOptions {\n  /**\n   * The default version to be used as a fallback when you did not provide some\n   * version to `@Controller()` nor `@Version()`.\n   */\n  defaultVersion?: VersionOptions['version'];\n}\n\n/**\n * @publicApi\n */\nexport type VersioningOptions = VersioningCommonOptions &\n  (\n    | HeaderVersioningOptions\n    | UriVersioningOptions\n    | MediaTypeVersioningOptions\n    | CustomVersioningOptions\n  );\n","import { Observable } from 'rxjs';\n\nexport interface WsMessageHandler<T = string> {\n  message: T;\n  callback: (...args: any[]) => Observable<any> | Promise<any>;\n}\n\nexport interface WebSocketAdapter<\n  TServer = any,\n  TClient = any,\n  TOptions = any,\n> {\n  create(port: number, options?: TOptions): TServer;\n  bindClientConnect(server: TServer, callback: Function): any;\n  bindClientDisconnect?(client: TClient, callback: Function): any;\n  bindMessageHandlers(\n    client: TClient,\n    handlers: WsMessageHandler[],\n    transform: (data: any) => Observable<any>,\n  ): any;\n  close(server: TServer): any;\n}\n","export * from './default-value.pipe';\nexport * from './parse-array.pipe';\nexport * from './parse-bool.pipe';\nexport * from './parse-int.pipe';\nexport * from './parse-float.pipe';\nexport * from './parse-enum.pipe';\nexport * from './parse-uuid.pipe';\nexport * from './validation.pipe';\n","import { Injectable } from '../decorators/core/injectable.decorator';\nimport {\n  ArgumentMetadata,\n  PipeTransform,\n} from '../interfaces/features/pipe-transform.interface';\nimport { isNil, isNumber } from '../utils/shared.utils';\n\n/**\n * Defines the built-in DefaultValue Pipe\n *\n * @see [Built-in Pipes](https://docs.nestjs.com/pipes#built-in-pipes)\n *\n * @publicApi\n */\n@Injectable()\nexport class DefaultValuePipe<T = any, R = any>\n  implements PipeTransform<T, T | R>\n{\n  constructor(private readonly defaultValue: R) {}\n\n  transform(value?: T, _metadata?: ArgumentMetadata): T | R {\n    if (\n      isNil(value) ||\n      (isNumber(value) && isNaN(value as unknown as number))\n    ) {\n      return this.defaultValue;\n    }\n    return value;\n  }\n}\n","import { Injectable } from '../decorators/core/injectable.decorator';\nimport { Optional } from '../decorators/core/optional.decorator';\nimport { HttpStatus } from '../enums/http-status.enum';\nimport { Type } from '../interfaces';\nimport {\n  ArgumentMetadata,\n  PipeTransform,\n} from '../interfaces/features/pipe-transform.interface';\nimport { HttpErrorByCode } from '../utils/http-error-by-code.util';\nimport { isNil, isUndefined, isString } from '../utils/shared.utils';\nimport { ValidationPipe, ValidationPipeOptions } from './validation.pipe';\n\nconst VALIDATION_ERROR_MESSAGE = 'Validation failed (parsable array expected)';\nconst DEFAULT_ARRAY_SEPARATOR = ',';\n\nexport interface ParseArrayOptions\n  extends Omit<\n    ValidationPipeOptions,\n    'transform' | 'validateCustomDecorators' | 'exceptionFactory'\n  > {\n  items?: Type<unknown>;\n  separator?: string;\n  optional?: boolean;\n  exceptionFactory?: (error: any) => any;\n}\n\n/**\n * Defines the built-in ParseArray Pipe\n *\n * @see [Built-in Pipes](https://docs.nestjs.com/pipes#built-in-pipes)\n *\n * @publicApi\n */\n@Injectable()\nexport class ParseArrayPipe implements PipeTransform {\n  protected readonly validationPipe: ValidationPipe;\n  protected exceptionFactory: (error: string) => any;\n\n  constructor(@Optional() private readonly options: ParseArrayOptions = {}) {\n    this.validationPipe = new ValidationPipe({\n      transform: true,\n      validateCustomDecorators: true,\n      ...options,\n    });\n\n    const { exceptionFactory, errorHttpStatusCode = HttpStatus.BAD_REQUEST } =\n      options;\n    this.exceptionFactory =\n      exceptionFactory ||\n      (error => new HttpErrorByCode[errorHttpStatusCode](error));\n  }\n\n  /**\n   * Method that accesses and performs optional transformation on argument for\n   * in-flight requests.\n   *\n   * @param value currently processed route argument\n   * @param metadata contains metadata about the currently processed route argument\n   */\n  async transform(value: any, metadata: ArgumentMetadata): Promise<any> {\n    if (!value && !this.options.optional) {\n      throw this.exceptionFactory(VALIDATION_ERROR_MESSAGE);\n    } else if (isNil(value) && this.options.optional) {\n      return value;\n    }\n\n    if (!Array.isArray(value)) {\n      if (!isString(value)) {\n        throw this.exceptionFactory(VALIDATION_ERROR_MESSAGE);\n      } else {\n        try {\n          value = value\n            .trim()\n            .split(this.options.separator || DEFAULT_ARRAY_SEPARATOR);\n        } catch {\n          throw this.exceptionFactory(VALIDATION_ERROR_MESSAGE);\n        }\n      }\n    }\n    if (this.options.items) {\n      const validationMetadata: ArgumentMetadata = {\n        metatype: this.options.items,\n        type: 'query',\n      };\n\n      const isExpectedTypePrimitive = this.isExpectedTypePrimitive();\n      const toClassInstance = (item: any, index?: number) => {\n        try {\n          item = JSON.parse(item);\n        } catch {}\n\n        if (isExpectedTypePrimitive) {\n          return this.validatePrimitive(item, index);\n        }\n        return this.validationPipe.transform(item, validationMetadata);\n      };\n      if (this.options.stopAtFirstError === false) {\n        // strict compare to \"false\" to make sure\n        // that this option is disabled by default\n        let errors = [];\n\n        const targetArray = value as Array<unknown>;\n        for (let i = 0; i < targetArray.length; i++) {\n          try {\n            targetArray[i] = await toClassInstance(targetArray[i]);\n          } catch (err) {\n            let message: string[] | unknown;\n            if ((err as any).getResponse) {\n              const response = (err as any).getResponse();\n              if (Array.isArray(response.message)) {\n                message = response.message.map(\n                  (item: string) => `[${i}] ${item}`,\n                );\n              } else {\n                message = `[${i}] ${response.message}`;\n              }\n            } else {\n              message = err;\n            }\n            errors = errors.concat(message);\n          }\n        }\n        if (errors.length > 0) {\n          throw this.exceptionFactory(errors as any);\n        }\n        return targetArray;\n      } else {\n        value = await Promise.all(value.map(toClassInstance));\n      }\n    }\n    return value;\n  }\n\n  protected isExpectedTypePrimitive(): boolean {\n    return [Boolean, Number, String].includes(this.options.items as any);\n  }\n\n  protected validatePrimitive(originalValue: any, index?: number) {\n    if (this.options.items === Number) {\n      const value =\n        originalValue !== null && originalValue !== '' ? +originalValue : NaN;\n      if (isNaN(value)) {\n        throw this.exceptionFactory(\n          `${isUndefined(index) ? '' : `[${index}] `}item must be a number`,\n        );\n      }\n      return value;\n    } else if (this.options.items === String) {\n      if (!isString(originalValue)) {\n        return `${originalValue}`;\n      }\n    } else if (this.options.items === Boolean) {\n      if (typeof originalValue !== 'boolean') {\n        throw this.exceptionFactory(\n          `${\n            isUndefined(index) ? '' : `[${index}] `\n          }item must be a boolean value`,\n        );\n      }\n    }\n    return originalValue;\n  }\n}\n","import { HttpStatus } from '../enums';\nimport {\n  BadGatewayException,\n  BadRequestException,\n  ConflictException,\n  ForbiddenException,\n  GatewayTimeoutException,\n  GoneException,\n  ImATeapotException,\n  InternalServerErrorException,\n  MethodNotAllowedException,\n  NotAcceptableException,\n  NotFoundException,\n  NotImplementedException,\n  PayloadTooLargeException,\n  PreconditionFailedException,\n  RequestTimeoutException,\n  ServiceUnavailableException,\n  UnauthorizedException,\n  UnprocessableEntityException,\n  UnsupportedMediaTypeException,\n} from '../exceptions';\nimport { Type } from '../interfaces';\n\nexport type ErrorHttpStatusCode =\n  | HttpStatus.BAD_GATEWAY\n  | HttpStatus.BAD_REQUEST\n  | HttpStatus.CONFLICT\n  | HttpStatus.FORBIDDEN\n  | HttpStatus.GATEWAY_TIMEOUT\n  | HttpStatus.GONE\n  | HttpStatus.I_AM_A_TEAPOT\n  | HttpStatus.INTERNAL_SERVER_ERROR\n  | HttpStatus.METHOD_NOT_ALLOWED\n  | HttpStatus.NOT_ACCEPTABLE\n  | HttpStatus.NOT_FOUND\n  | HttpStatus.NOT_IMPLEMENTED\n  | HttpStatus.PAYLOAD_TOO_LARGE\n  | HttpStatus.PRECONDITION_FAILED\n  | HttpStatus.REQUEST_TIMEOUT\n  | HttpStatus.SERVICE_UNAVAILABLE\n  | HttpStatus.UNAUTHORIZED\n  | HttpStatus.UNPROCESSABLE_ENTITY\n  | HttpStatus.UNSUPPORTED_MEDIA_TYPE;\n\nexport const HttpErrorByCode: Record<ErrorHttpStatusCode, Type<unknown>> = {\n  [HttpStatus.BAD_GATEWAY]: BadGatewayException,\n  [HttpStatus.BAD_REQUEST]: BadRequestException,\n  [HttpStatus.CONFLICT]: ConflictException,\n  [HttpStatus.FORBIDDEN]: ForbiddenException,\n  [HttpStatus.GATEWAY_TIMEOUT]: GatewayTimeoutException,\n  [HttpStatus.GONE]: GoneException,\n  [HttpStatus.I_AM_A_TEAPOT]: ImATeapotException,\n  [HttpStatus.INTERNAL_SERVER_ERROR]: InternalServerErrorException,\n  [HttpStatus.METHOD_NOT_ALLOWED]: MethodNotAllowedException,\n  [HttpStatus.NOT_ACCEPTABLE]: NotAcceptableException,\n  [HttpStatus.NOT_FOUND]: NotFoundException,\n  [HttpStatus.NOT_IMPLEMENTED]: NotImplementedException,\n  [HttpStatus.PAYLOAD_TOO_LARGE]: PayloadTooLargeException,\n  [HttpStatus.PRECONDITION_FAILED]: PreconditionFailedException,\n  [HttpStatus.REQUEST_TIMEOUT]: RequestTimeoutException,\n  [HttpStatus.SERVICE_UNAVAILABLE]: ServiceUnavailableException,\n  [HttpStatus.UNAUTHORIZED]: UnauthorizedException,\n  [HttpStatus.UNPROCESSABLE_ENTITY]: UnprocessableEntityException,\n  [HttpStatus.UNSUPPORTED_MEDIA_TYPE]: UnsupportedMediaTypeException,\n};\n","import { iterate } from 'iterare';\nimport { Optional } from '../decorators';\nimport { Injectable } from '../decorators/core';\nimport { HttpStatus } from '../enums/http-status.enum';\nimport { ClassTransformOptions } from '../interfaces/external/class-transform-options.interface';\nimport { TransformerPackage } from '../interfaces/external/transformer-package.interface';\nimport { ValidationError } from '../interfaces/external/validation-error.interface';\nimport { ValidatorOptions } from '../interfaces/external/validator-options.interface';\nimport { ValidatorPackage } from '../interfaces/external/validator-package.interface';\nimport {\n  ArgumentMetadata,\n  PipeTransform,\n} from '../interfaces/features/pipe-transform.interface';\nimport { Type } from '../interfaces/type.interface';\nimport {\n  ErrorHttpStatusCode,\n  HttpErrorByCode,\n} from '../utils/http-error-by-code.util';\nimport { loadPackage } from '../utils/load-package.util';\nimport { isNil, isObject } from '../utils/shared.utils';\n\nexport interface ValidationPipeOptions extends ValidatorOptions {\n  transform?: boolean;\n  disableErrorMessages?: boolean;\n  transformOptions?: ClassTransformOptions;\n  errorHttpStatusCode?: ErrorHttpStatusCode;\n  exceptionFactory?: (errors: ValidationError[]) => any;\n  validateCustomDecorators?: boolean;\n  expectedType?: Type<any>;\n  validatorPackage?: ValidatorPackage;\n  transformerPackage?: TransformerPackage;\n}\n\nlet classValidator: ValidatorPackage = {} as any;\nlet classTransformer: TransformerPackage = {} as any;\n\n@Injectable()\nexport class ValidationPipe implements PipeTransform<any> {\n  protected isTransformEnabled: boolean;\n  protected isDetailedOutputDisabled?: boolean;\n  protected validatorOptions: ValidatorOptions;\n  protected transformOptions: ClassTransformOptions;\n  protected errorHttpStatusCode: ErrorHttpStatusCode;\n  protected expectedType: Type<any>;\n  protected exceptionFactory: (errors: ValidationError[]) => any;\n  protected validateCustomDecorators: boolean;\n\n  constructor(@Optional() options?: ValidationPipeOptions) {\n    options = options || {};\n    const {\n      transform,\n      disableErrorMessages,\n      errorHttpStatusCode,\n      expectedType,\n      transformOptions,\n      validateCustomDecorators,\n      ...validatorOptions\n    } = options;\n\n    this.isTransformEnabled = !!transform;\n    this.validatorOptions = validatorOptions;\n    this.transformOptions = transformOptions;\n    this.isDetailedOutputDisabled = disableErrorMessages;\n    this.validateCustomDecorators = validateCustomDecorators || false;\n    this.errorHttpStatusCode = errorHttpStatusCode || HttpStatus.BAD_REQUEST;\n    this.expectedType = expectedType;\n    this.exceptionFactory =\n      options.exceptionFactory || this.createExceptionFactory();\n\n    classValidator = this.loadValidator(options.validatorPackage);\n    classTransformer = this.loadTransformer(options.transformerPackage);\n  }\n\n  protected loadValidator(\n    validatorPackage?: ValidatorPackage,\n  ): ValidatorPackage {\n    return (\n      validatorPackage ??\n      loadPackage('class-validator', 'ValidationPipe', () =>\n        require('class-validator'),\n      )\n    );\n  }\n\n  protected loadTransformer(\n    transformerPackage?: TransformerPackage,\n  ): TransformerPackage {\n    return (\n      transformerPackage ??\n      loadPackage('class-transformer', 'ValidationPipe', () =>\n        require('class-transformer'),\n      )\n    );\n  }\n\n  public async transform(value: any, metadata: ArgumentMetadata) {\n    if (this.expectedType) {\n      metadata = { ...metadata, metatype: this.expectedType };\n    }\n\n    const metatype = metadata.metatype;\n    if (!metatype || !this.toValidate(metadata)) {\n      return this.isTransformEnabled\n        ? this.transformPrimitive(value, metadata)\n        : value;\n    }\n    const originalValue = value;\n    value = this.toEmptyIfNil(value);\n\n    const isNil = value !== originalValue;\n    const isPrimitive = this.isPrimitive(value);\n    this.stripProtoKeys(value);\n    let entity = classTransformer.plainToClass(\n      metatype,\n      value,\n      this.transformOptions,\n    );\n\n    const originalEntity = entity;\n    const isCtorNotEqual = entity.constructor !== metatype;\n\n    if (isCtorNotEqual && !isPrimitive) {\n      entity.constructor = metatype;\n    } else if (isCtorNotEqual) {\n      // when \"entity\" is a primitive value, we have to temporarily\n      // replace the entity to perform the validation against the original\n      // metatype defined inside the handler\n      entity = { constructor: metatype };\n    }\n\n    const errors = await this.validate(entity, this.validatorOptions);\n    if (errors.length > 0) {\n      throw await this.exceptionFactory(errors);\n    }\n    if (isPrimitive) {\n      // if the value is a primitive value and the validation process has been successfully completed\n      // we have to revert the original value passed through the pipe\n      entity = originalEntity;\n    }\n    if (this.isTransformEnabled) {\n      return entity;\n    }\n    if (isNil) {\n      // if the value was originally undefined or null, revert it back\n      return originalValue;\n    }\n    return Object.keys(this.validatorOptions).length > 0\n      ? classTransformer.classToPlain(entity, this.transformOptions)\n      : value;\n  }\n\n  public createExceptionFactory() {\n    return (validationErrors: ValidationError[] = []) => {\n      if (this.isDetailedOutputDisabled) {\n        return new HttpErrorByCode[this.errorHttpStatusCode]();\n      }\n      const errors = this.flattenValidationErrors(validationErrors);\n      return new HttpErrorByCode[this.errorHttpStatusCode](errors);\n    };\n  }\n\n  protected toValidate(metadata: ArgumentMetadata): boolean {\n    const { metatype, type } = metadata;\n    if (type === 'custom' && !this.validateCustomDecorators) {\n      return false;\n    }\n    const types = [String, Boolean, Number, Array, Object, Buffer];\n    return !types.some(t => metatype === t) && !isNil(metatype);\n  }\n\n  protected transformPrimitive(value: any, metadata: ArgumentMetadata) {\n    if (!metadata.data) {\n      // leave top-level query/param objects unmodified\n      return value;\n    }\n    const { type, metatype } = metadata;\n    if (type !== 'param' && type !== 'query') {\n      return value;\n    }\n    if (metatype === Boolean) {\n      return value === true || value === 'true';\n    }\n    if (metatype === Number) {\n      return +value;\n    }\n    return value;\n  }\n\n  protected toEmptyIfNil<T = any, R = any>(value: T): R | {} {\n    return isNil(value) ? {} : value;\n  }\n\n  protected stripProtoKeys(value: Record<string, any>) {\n    delete value.__proto__;\n    const keys = Object.keys(value);\n    iterate(keys)\n      .filter(key => isObject(value[key]) && value[key])\n      .forEach(key => this.stripProtoKeys(value[key]));\n  }\n\n  protected isPrimitive(value: unknown): boolean {\n    return ['number', 'boolean', 'string'].includes(typeof value);\n  }\n\n  protected validate(\n    object: object,\n    validatorOptions?: ValidatorOptions,\n  ): Promise<ValidationError[]> | ValidationError[] {\n    return classValidator.validate(object, validatorOptions);\n  }\n\n  protected flattenValidationErrors(\n    validationErrors: ValidationError[],\n  ): string[] {\n    return iterate(validationErrors)\n      .map(error => this.mapChildrenToValidationErrors(error))\n      .flatten()\n      .filter(item => !!item.constraints)\n      .map(item => Object.values(item.constraints))\n      .flatten()\n      .toArray();\n  }\n\n  protected mapChildrenToValidationErrors(\n    error: ValidationError,\n    parentPath?: string,\n  ): ValidationError[] {\n    if (!(error.children && error.children.length)) {\n      return [error];\n    }\n    const validationErrors = [];\n    parentPath = parentPath\n      ? `${parentPath}.${error.property}`\n      : error.property;\n    for (const item of error.children) {\n      if (item.children && item.children.length) {\n        validationErrors.push(\n          ...this.mapChildrenToValidationErrors(item, parentPath),\n        );\n      }\n      validationErrors.push(\n        this.prependConstraintsWithParentProp(parentPath, item),\n      );\n    }\n    return validationErrors;\n  }\n\n  protected prependConstraintsWithParentProp(\n    parentPath: string,\n    error: ValidationError,\n  ): ValidationError {\n    const constraints = {};\n    for (const key in error.constraints) {\n      constraints[key] = `${parentPath}.${error.constraints[key]}`;\n    }\n    return {\n      ...error,\n      constraints,\n    };\n  }\n}\n","import { Injectable } from '../decorators/core/injectable.decorator';\nimport { Optional } from '../decorators/core/optional.decorator';\nimport { HttpStatus } from '../enums/http-status.enum';\nimport {\n  ArgumentMetadata,\n  PipeTransform,\n} from '../interfaces/features/pipe-transform.interface';\nimport {\n  ErrorHttpStatusCode,\n  HttpErrorByCode,\n} from '../utils/http-error-by-code.util';\n\nexport interface ParseBoolPipeOptions {\n  errorHttpStatusCode?: ErrorHttpStatusCode;\n  exceptionFactory?: (error: string) => any;\n}\n\n/**\n * Defines the built-in ParseBool Pipe\n *\n * @see [Built-in Pipes](https://docs.nestjs.com/pipes#built-in-pipes)\n *\n * @publicApi\n */\n@Injectable()\nexport class ParseBoolPipe\n  implements PipeTransform<string | boolean, Promise<boolean>>\n{\n  protected exceptionFactory: (error: string) => any;\n\n  constructor(@Optional() options?: ParseBoolPipeOptions) {\n    options = options || {};\n    const { exceptionFactory, errorHttpStatusCode = HttpStatus.BAD_REQUEST } =\n      options;\n    this.exceptionFactory =\n      exceptionFactory ||\n      (error => new HttpErrorByCode[errorHttpStatusCode](error));\n  }\n\n  /**\n   * Method that accesses and performs optional transformation on argument for\n   * in-flight requests.\n   *\n   * @param value currently processed route argument\n   * @param metadata contains metadata about the currently processed route argument\n   */\n  async transform(\n    value: string | boolean,\n    metadata: ArgumentMetadata,\n  ): Promise<boolean> {\n    if (value === true || value === 'true') {\n      return true;\n    }\n    if (value === false || value === 'false') {\n      return false;\n    }\n    throw this.exceptionFactory(\n      'Validation failed (boolean string is expected)',\n    );\n  }\n}\n","import { Injectable } from '../decorators/core/injectable.decorator';\nimport { Optional } from '../decorators/core/optional.decorator';\nimport { HttpStatus } from '../enums/http-status.enum';\nimport {\n  ArgumentMetadata,\n  PipeTransform,\n} from '../interfaces/features/pipe-transform.interface';\nimport {\n  ErrorHttpStatusCode,\n  HttpErrorByCode,\n} from '../utils/http-error-by-code.util';\n\nexport interface ParseIntPipeOptions {\n  errorHttpStatusCode?: ErrorHttpStatusCode;\n  exceptionFactory?: (error: string) => any;\n}\n\n/**\n * Defines the built-in ParseInt Pipe\n *\n * @see [Built-in Pipes](https://docs.nestjs.com/pipes#built-in-pipes)\n *\n * @publicApi\n */\n@Injectable()\nexport class ParseIntPipe implements PipeTransform<string> {\n  protected exceptionFactory: (error: string) => any;\n\n  constructor(@Optional() options?: ParseIntPipeOptions) {\n    options = options || {};\n    const { exceptionFactory, errorHttpStatusCode = HttpStatus.BAD_REQUEST } =\n      options;\n\n    this.exceptionFactory =\n      exceptionFactory ||\n      (error => new HttpErrorByCode[errorHttpStatusCode](error));\n  }\n\n  /**\n   * Method that accesses and performs optional transformation on argument for\n   * in-flight requests.\n   *\n   * @param value currently processed route argument\n   * @param metadata contains metadata about the currently processed route argument\n   */\n  async transform(value: string, metadata: ArgumentMetadata): Promise<number> {\n    const isNumeric =\n      ['string', 'number'].includes(typeof value) &&\n      /^-?\\d+$/.test(value) &&\n      isFinite(value as any);\n    if (!isNumeric) {\n      throw this.exceptionFactory(\n        'Validation failed (numeric string is expected)',\n      );\n    }\n    return parseInt(value, 10);\n  }\n}\n","import { ArgumentMetadata, HttpStatus, Injectable, Optional } from '../index';\nimport { PipeTransform } from '../interfaces/features/pipe-transform.interface';\nimport {\n  ErrorHttpStatusCode,\n  HttpErrorByCode,\n} from '../utils/http-error-by-code.util';\n\nexport interface ParseFloatPipeOptions {\n  errorHttpStatusCode?: ErrorHttpStatusCode;\n  exceptionFactory?: (error: string) => any;\n}\n\n/**\n * Defines the built-in ParseFloat Pipe\n *\n * @see [Built-in Pipes](https://docs.nestjs.com/pipes#built-in-pipes)\n *\n * @publicApi\n */\n@Injectable()\nexport class ParseFloatPipe implements PipeTransform<string> {\n  protected exceptionFactory: (error: string) => any;\n\n  constructor(@Optional() options?: ParseFloatPipeOptions) {\n    options = options || {};\n    const { exceptionFactory, errorHttpStatusCode = HttpStatus.BAD_REQUEST } =\n      options;\n\n    this.exceptionFactory =\n      exceptionFactory ||\n      (error => new HttpErrorByCode[errorHttpStatusCode](error));\n  }\n\n  /**\n   * Method that accesses and performs optional transformation on argument for\n   * in-flight requests.\n   *\n   * @param value currently processed route argument\n   * @param metadata contains metadata about the currently processed route argument\n   */\n  async transform(value: string, metadata: ArgumentMetadata): Promise<number> {\n    const isNumeric =\n      ['string', 'number'].includes(typeof value) &&\n      !isNaN(parseFloat(value)) &&\n      isFinite(value as any);\n    if (!isNumeric) {\n      throw this.exceptionFactory(\n        'Validation failed (numeric string is expected)',\n      );\n    }\n    return parseFloat(value);\n  }\n}\n","import { ArgumentMetadata, HttpStatus, Injectable, Optional } from '../index';\nimport { PipeTransform } from '../interfaces/features/pipe-transform.interface';\nimport {\n  ErrorHttpStatusCode,\n  HttpErrorByCode,\n} from '../utils/http-error-by-code.util';\n\nexport interface ParseEnumPipeOptions {\n  errorHttpStatusCode?: ErrorHttpStatusCode;\n  exceptionFactory?: (error: string) => any;\n}\n\n/**\n * Defines the built-in ParseEnum Pipe\n *\n * @see [Built-in Pipes](https://docs.nestjs.com/pipes#built-in-pipes)\n *\n * @publicApi\n */\n@Injectable()\nexport class ParseEnumPipe<T = any> implements PipeTransform<T> {\n  protected exceptionFactory: (error: string) => any;\n\n  constructor(\n    protected readonly enumType: T,\n    @Optional() options?: ParseEnumPipeOptions,\n  ) {\n    if (!enumType) {\n      throw new Error(\n        `\"ParseEnumPipe\" requires \"enumType\" argument specified (to validate input values).`,\n      );\n    }\n    options = options || {};\n    const { exceptionFactory, errorHttpStatusCode = HttpStatus.BAD_REQUEST } =\n      options;\n\n    this.exceptionFactory =\n      exceptionFactory ||\n      (error => new HttpErrorByCode[errorHttpStatusCode](error));\n  }\n\n  /**\n   * Method that accesses and performs optional transformation on argument for\n   * in-flight requests.\n   *\n   * @param value currently processed route argument\n   * @param metadata contains metadata about the currently processed route argument\n   */\n  async transform(value: T, metadata: ArgumentMetadata): Promise<T> {\n    if (!this.isEnum(value)) {\n      throw this.exceptionFactory(\n        'Validation failed (enum string is expected)',\n      );\n    }\n    return value;\n  }\n\n  protected isEnum(value: T): boolean {\n    const enumValues = Object.keys(this.enumType).map(\n      item => this.enumType[item],\n    );\n    return enumValues.includes(value);\n  }\n}\n","import { Injectable } from '../decorators/core/injectable.decorator';\nimport { Optional } from '../decorators/core/optional.decorator';\nimport { HttpStatus } from '../enums/http-status.enum';\nimport {\n  ArgumentMetadata,\n  PipeTransform,\n} from '../interfaces/features/pipe-transform.interface';\nimport {\n  ErrorHttpStatusCode,\n  HttpErrorByCode,\n} from '../utils/http-error-by-code.util';\nimport { isUUID } from '../utils/is-uuid';\n\nexport interface ParseUUIDPipeOptions {\n  version?: '3' | '4' | '5';\n  errorHttpStatusCode?: ErrorHttpStatusCode;\n  exceptionFactory?: (errors: string) => any;\n}\n\n@Injectable()\nexport class ParseUUIDPipe implements PipeTransform<string> {\n  private readonly version: '3' | '4' | '5';\n  protected exceptionFactory: (errors: string) => any;\n\n  constructor(@Optional() options?: ParseUUIDPipeOptions) {\n    options = options || {};\n    const {\n      exceptionFactory,\n      errorHttpStatusCode = HttpStatus.BAD_REQUEST,\n      version,\n    } = options;\n\n    this.version = version;\n    this.exceptionFactory =\n      exceptionFactory ||\n      (error => new HttpErrorByCode[errorHttpStatusCode](error));\n  }\n  async transform(value: string, metadata: ArgumentMetadata): Promise<string> {\n    if (!isUUID(value, this.version)) {\n      throw this.exceptionFactory(\n        `Validation failed (uuid ${\n          this.version ? 'v' + this.version : ''\n        } is expected)`,\n      );\n    }\n    return value;\n  }\n}\n","import { BadRequestException } from '../exceptions';\nimport { isString } from './shared.utils';\n\nconst uuid = {\n  3: /^[0-9A-F]{8}-[0-9A-F]{4}-3[0-9A-F]{3}-[0-9A-F]{4}-[0-9A-F]{12}$/i,\n  4: /^[0-9A-F]{8}-[0-9A-F]{4}-4[0-9A-F]{3}-[89AB][0-9A-F]{3}-[0-9A-F]{12}$/i,\n  5: /^[0-9A-F]{8}-[0-9A-F]{4}-5[0-9A-F]{3}-[89AB][0-9A-F]{3}-[0-9A-F]{12}$/i,\n  all: /^[0-9A-F]{8}-[0-9A-F]{4}-[0-9A-F]{4}-[0-9A-F]{4}-[0-9A-F]{12}$/i,\n};\n\nexport function isUUID(str: any, version = 'all') {\n  if (!isString(str)) {\n    throw new BadRequestException('The value passed as UUID is not a string');\n  }\n  const pattern = uuid[version];\n  return pattern && pattern.test(str);\n}\n","export * from './class-serializer.interceptor';\nexport * from './decorators';\n","import { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { Inject, Injectable, Optional } from '../decorators/core';\nimport { StreamableFile } from '../file-stream';\nimport { CallHandler, ExecutionContext, NestInterceptor } from '../interfaces';\nimport { ClassTransformOptions } from '../interfaces/external/class-transform-options.interface';\nimport { TransformerPackage } from '../interfaces/external/transformer-package.interface';\nimport { loadPackage } from '../utils/load-package.util';\nimport { isObject } from '../utils/shared.utils';\nimport { CLASS_SERIALIZER_OPTIONS } from './class-serializer.constants';\n\nlet classTransformer: TransformerPackage = {} as any;\n\nexport interface PlainLiteralObject {\n  [key: string]: any;\n}\n\n// NOTE (external)\n// We need to deduplicate them here due to the circular dependency\n// between core and common packages\nconst REFLECTOR = 'Reflector';\n\nexport interface ClassSerializerInterceptorOptions\n  extends ClassTransformOptions {\n  transformerPackage?: TransformerPackage;\n}\n\n@Injectable()\nexport class ClassSerializerInterceptor implements NestInterceptor {\n  constructor(\n    @Inject(REFLECTOR) protected readonly reflector: any,\n    @Optional()\n    protected readonly defaultOptions: ClassSerializerInterceptorOptions = {},\n  ) {\n    classTransformer =\n      defaultOptions?.transformerPackage ??\n      loadPackage('class-transformer', 'ClassSerializerInterceptor', () =>\n        require('class-transformer'),\n      );\n\n    if (!defaultOptions?.transformerPackage) {\n      require('class-transformer');\n    }\n  }\n\n  intercept(context: ExecutionContext, next: CallHandler): Observable<any> {\n    const contextOptions = this.getContextOptions(context);\n    const options = {\n      ...this.defaultOptions,\n      ...contextOptions,\n    };\n    return next\n      .handle()\n      .pipe(\n        map((res: PlainLiteralObject | Array<PlainLiteralObject>) =>\n          this.serialize(res, options),\n        ),\n      );\n  }\n\n  /**\n   * Serializes responses that are non-null objects nor streamable files.\n   */\n  serialize(\n    response: PlainLiteralObject | Array<PlainLiteralObject>,\n    options: ClassTransformOptions,\n  ): PlainLiteralObject | Array<PlainLiteralObject> {\n    if (!isObject(response) || response instanceof StreamableFile) {\n      return response;\n    }\n\n    return Array.isArray(response)\n      ? response.map(item => this.transformToPlain(item, options))\n      : this.transformToPlain(response, options);\n  }\n\n  transformToPlain(\n    plainOrClass: any,\n    options: ClassTransformOptions,\n  ): PlainLiteralObject {\n    return plainOrClass\n      ? classTransformer.classToPlain(plainOrClass, options)\n      : plainOrClass;\n  }\n\n  protected getContextOptions(\n    context: ExecutionContext,\n  ): ClassTransformOptions | undefined {\n    return (\n      this.reflectSerializeMetadata(context.getHandler()) ||\n      this.reflectSerializeMetadata(context.getClass())\n    );\n  }\n\n  private reflectSerializeMetadata(\n    obj: object | Function,\n  ): ClassTransformOptions | undefined {\n    return this.reflector.get(CLASS_SERIALIZER_OPTIONS, obj);\n  }\n}\n","export const CLASS_SERIALIZER_OPTIONS = 'class_serializer:options';\n","export * from './serialize-options.decorator';\n","import { SetMetadata } from '../../decorators';\nimport { ClassTransformOptions } from '../../interfaces/external/class-transform-options.interface';\nimport { CLASS_SERIALIZER_OPTIONS } from '../class-serializer.constants';\n\nexport const SerializeOptions = (options: ClassTransformOptions) =>\n  SetMetadata(CLASS_SERIALIZER_OPTIONS, options);\n","export * from './forward-ref.util';\n","import { ForwardReference } from '../interfaces/modules/forward-reference.interface';\n\nexport const forwardRef = (fn: () => any): ForwardReference => ({\n  forwardRef: fn,\n});\n"],"mappings":"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;AAUO,4CAAsC,cAAc;AAAA,EAyBzD,YACE,eACA,cAAc,mBACd;AACA,UACE,cAAc,WACZ,eACA,aACA,yBACF,GACA,yBACF;AAAA,EACF;AACF;;;AChDA;AAUO,sCAAgC,cAAc;AAAA,EAyBnD,YAAY,eAAuC,cAAc,YAAY;AAC3E,UACE,cAAc,WAAW,eAAe,aAAa,kBAAmB,GACxE,kBACF;AAAA,EACF;AACF;;;ACzCA;AAUO,kCAA4B,cAAc;AAAA,EAyB/C,YAAY,eAAuC,cAAc,QAAQ;AACvE,UACE,cAAc,WAAW,eAAe,aAAa,cAAe,GACpE,cACF;AAAA,EACF;AACF;;;ACzCA;AAUO,6CAAuC,cAAc;AAAA,EAyB1D,YACE,eACA,cAAc,qBACd;AACA,UACE,cAAc,WACZ,eACA,aACA,2BACF,GACA,2BACF;AAAA,EACF;AACF;;;AChDA;AAUO,kDAA4C,cAAc;AAAA,EAyB/D,YACE,eACA,cAAc,0BACd;AACA,UACE,cAAc,WACZ,eACA,aACA,gCACF,GACA,gCACF;AAAA,EACF;AACF;;;AChDA;AAUO,iDAA2C,cAAc;AAAA,EAyB9D,YACE,eACA,cAAc,wBACd;AACA,UACE,cAAc,WACZ,eACA,aACA,8BACF,GACA,8BACF;AAAA,EACF;AACF;;;AChDA;AAUO,iDAA2C,cAAc;AAAA,EAyB9D,YACE,eACA,cAAc,yBACd;AACA,UACE,cAAc,WACZ,eACA,aACA,+BACF,GACA,+BACF;AAAA,EACF;AACF;;;AChDA;AAUO,4CAAsC,cAAc;AAAA,EAyBzD,YACE,eACA,cAAc,mBACd;AACA,UACE,cAAc,WACZ,eACA,aACA,yBACF,GACA,yBACF;AAAA,EACF;AACF;;;AChDA;AAUO,qDAA+C,cAAc;AAAA,EAyBlE,YACE,eACA,cAAc,8BACd;AACA,UACE,cAAc,WACZ,eACA,aACA,oCACF,GACA,oCACF;AAAA,EACF;AACF;;;AChDA;AAUO,wCAAkC,cAAc;AAAA,EAyBrD,YACE,eACA,cAAc,eACd;AACA,UACE,cAAc,WACZ,eACA,aACA,qBACF,GACA,qBACF;AAAA,EACF;AACF;;;ACh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","names":[]}